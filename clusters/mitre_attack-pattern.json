{
  "source": "https://github.com/mitre/cti",
  "type": "mitre-attack-pattern",
  "name": "Attack Pattern",
  "description": "ATT&CK tactic",
  "values": [
    {
      "value": "Exfiltration Over Alternative Protocol",
      "description": "Data exfiltration is performed with a different protocol from the main command and control protocol or channel. The data is likely to be sent to an alternate network location from the main command and control server. Alternate protocols include FTP, SMTP, HTTP/S, DNS, or some other network protocol. Different channels could include Internet Web services such as cloud storage.\n\nDetection: Analyze network data for uncommon data flows (e.g., a client sending significantly more data than it receives from a server). Processes utilizing the network that do not normally have network communication or have never been seen before are suspicious. Analyze packet contents to detect communications that do not follow the expected protocol behavior for the port that is being used.[[Citation: University of Birmingham C2]]\n\nPlatforms: Windows Server 2003, Windows Server 2008, Windows Server 2012, Windows XP, Windows 7, Windows 8, Windows Server 2003 R2, Windows Server 2008 R2, Windows Server 2012 R2, Windows Vista, Windows 8.1\n\nData Sources: User interface, Process monitoring, Process use of network, Packet capture, Netflow/Enclave netflow, Network protocol analysis",
      "meta": {
        "refs": [
          "https://attack.mitre.org/wiki/Technique/T1048",
          "https://arxiv.org/ftp/arxiv/papers/1408/1408.1136.pdf"
        ],
        "uuid": "a19e86f8-1c0a-4fea-8407-23b73d615776",
        "x_mitre_platforms": [
          "Windows Server 2003",
          "Windows Server 2008",
          "Windows Server 2012",
          "Windows XP",
          "Windows 7",
          "Windows 8",
          "Windows Server 2003 R2",
          "Windows Server 2008 R2",
          "Windows Server 2012 R2",
          "Windows Vista",
          "Windows 8.1"
        ],
        "x_mitre_data_sources": [
          "User interface",
          "Process monitoring",
          "Process use of network",
          "Packet capture",
          "Netflow/Enclave netflow",
          "Network protocol analysis"
        ]
      }
    },
    {
      "value": "Standard Application Layer Protocol",
      "description": "Adversaries may communicate using a common, standardized application layer protocol such as HTTP, HTTPS, SMTP, or DNS to avoid detection by blending in with existing traffic. Commands to the remote system, and often the results of those commands, will be embedded within the protocol traffic between the client and server.\n\nFor connections that occur internally within an enclave (such as those between a proxy or pivot node and other nodes), commonly used protocols are RPC, SSH, or RDP.\n\nDetection: Analyze network data for uncommon data flows (e.g., a client sending significantly more data than it receives from a server). Processes utilizing the network that do not normally have network communication or have never been seen before are suspicious.  Analyze packet contents to detect application layer protocols that do not follow the expected protocol for the port that is being used.[[Citation: University of Birmingham C2]]\n\nPlatforms: Windows Server 2003, Windows Server 2008, Windows Server 2012, Windows XP, Windows 7, Windows 8, Windows Server 2003 R2, Windows Server 2008 R2, Windows Server 2012 R2, Windows Vista, Windows 8.1\n\nData Sources: Packet capture, Netflow/Enclave netflow, Process use of network, Malware reverse engineering, Process monitoring",
      "meta": {
        "refs": [
          "https://attack.mitre.org/wiki/Technique/T1071",
          "https://arxiv.org/ftp/arxiv/papers/1408/1408.1136.pdf"
        ],
        "uuid": "355be19c-ffc9-46d5-8d50-d6a036c675b6",
        "x_mitre_platforms": [
          "Windows Server 2003",
          "Windows Server 2008",
          "Windows Server 2012",
          "Windows XP",
          "Windows 7",
          "Windows 8",
          "Windows Server 2003 R2",
          "Windows Server 2008 R2",
          "Windows Server 2012 R2",
          "Windows Vista",
          "Windows 8.1"
        ],
        "x_mitre_data_sources": [
          "Packet capture",
          "Netflow/Enclave netflow",
          "Process use of network",
          "Malware reverse engineering",
          "Process monitoring"
        ]
      }
    },
    {
      "value": "Communication Through Removable Media",
      "description": "Adversaries can perform command and control between compromised hosts on potentially disconnected networks using removable media to transfer commands from system to system. Both systems would need to be compromised, with the likelihood that an Internet-connected system was compromised first and the second through lateral movement by Replication Through Removable Media. Commands and files would be relayed from the disconnected system to the Internet-connected system to which the adversary has direct access.\n\nDetection: Monitor file access on removable media. Detect processes that execute when removable media is mounted.\n\nPlatforms: Windows Server 2003, Windows Server 2008, Windows Server 2012, Windows XP, Windows 7, Windows 8, Windows Server 2003 R2, Windows Server 2008 R2, Windows Server 2012 R2, Windows Vista, Windows 8.1\n\nData Sources: File monitoring, Data loss prevention",
      "meta": {
        "refs": [
          "https://attack.mitre.org/wiki/Technique/T1092"
        ],
        "uuid": "64196062-5210-42c3-9a02-563a0d1797ef",
        "x_mitre_platforms": [
          "Windows Server 2003",
          "Windows Server 2008",
          "Windows Server 2012",
          "Windows XP",
          "Windows 7",
          "Windows 8",
          "Windows Server 2003 R2",
          "Windows Server 2008 R2",
          "Windows Server 2012 R2",
          "Windows Vista",
          "Windows 8.1"
        ],
        "x_mitre_data_sources": [
          "File monitoring",
          "Data loss prevention"
        ]
      }
    },
    {
      "value": "Custom Command and Control Protocol",
      "description": "Adversaries may communicate using a custom command and control protocol instead of using existing Standard Application Layer Protocol to encapsulate commands. Implementations could mimic well-known protocols.\n\nDetection: Analyze network data for uncommon data flows (e.g., a client sending significantly more data than it receives from a server). Processes utilizing the network that do not normally have network communication or have never been seen before are suspicious. Analyze packet contents to detect communications that do not follow the expected protocol behavior for the port that is being used.[[Citation: University of Birmingham C2]]\n\nPlatforms: Windows Server 2003, Windows Server 2008, Windows Server 2012, Windows XP, Windows 7, Windows 8, Windows Server 2003 R2, Windows Server 2008 R2, Windows Server 2012 R2, Windows Vista, Windows 8.1\n\nData Sources: Packet capture, Netflow/Enclave netflow, Process use of network, Process monitoring",
      "meta": {
        "refs": [
          "https://attack.mitre.org/wiki/Technique/T1094",
          "https://arxiv.org/ftp/arxiv/papers/1408/1408.1136.pdf"
        ],
        "uuid": "f72eb8a8-cd4c-461d-a814-3f862befbf00",
        "x_mitre_platforms": [
          "Windows Server 2003",
          "Windows Server 2008",
          "Windows Server 2012",
          "Windows XP",
          "Windows 7",
          "Windows 8",
          "Windows Server 2003 R2",
          "Windows Server 2008 R2",
          "Windows Server 2012 R2",
          "Windows Vista",
          "Windows 8.1"
        ],
        "x_mitre_data_sources": [
          "Packet capture",
          "Netflow/Enclave netflow",
          "Process use of network",
          "Process monitoring"
        ]
      }
    },
    {
      "value": "File System Permissions Weakness",
      "description": "Processes may automatically execute specific binaries as part of their functionality or to perform other actions. If the permissions on the file system directory containing a target binary, or permissions on the binary itself, are improperly set, then the target binary may be overwritten with another binary using user-level permissions and executed by the original process. If the original process and thread are running under a higher permissions level, then the replaced binary will also execute under higher-level permissions, which could include SYSTEM.\n\nAdversaries may use this technique to replace legitimate binaries with malicious ones as a means of executing code at a higher permissions level. If the executing process is set to run at a specific time or during a certain event (e.g., system bootup) then this technique can also be used for persistence.\n\n===Services===\n\nManipulation of Windows service binaries is one variation of this technique. Adversaries may replace a legitimate service executable with their own executable to gain persistence and/or privilege escalation to the account context the service is set to execute under (local/domain account, SYSTEM, LocalService, or NetworkService). Once the service is started, either directly by the user (if appropriate access is available) or through some other means, such as a system restart if the service starts on bootup, the replaced executable will run instead of the original service executable.\n\n===Executable Installers===\n\nAnother variation of this technique can be performed by taking advantage of a weakness that is common in executable, self-extracting installers. During the installation process, it is common for installers to use a subdirectory within the <code>%TEMP%</code> directory to unpack binaries such as DLLs, EXEs, or other payloads. When installers create subdirectories and files they often do not set appropriate permissions to restrict write access, which allows for execution of untrusted code placed in the subdirectories or overwriting of binaries used in the installation process. This behavior is related to and may take advantage of DLL Search Order Hijacking. Some installers may also require elevated privileges that will result in privilege escalation when executing adversary controlled code. This behavior is related to Bypass User Account Control. Several examples of this weakness in existing common installers have been reported to software vendors.[[Citation: Mozilla Firefox Installer DLL Hijack]][[Citation: Seclists Kanthak 7zip Installer]]\n\nDetection: Look for changes to binaries and service executables that may normally occur during software updates. If an executable is written, renamed, and/or moved to match an existing service executable, it could be detected and correlated with other suspicious behavior. Hashing of binaries and service executables could be used to detect replacement against historical data.\n\nLook for abnormal process call trees from typical processes and services and for execution of other commands that could relate to [[Discovery]] or other adversary techniques.\n\nPlatforms: Windows Server 2003, Windows Server 2008, Windows Server 2012, Windows XP, Windows 7, Windows 8, Windows Server 2003 R2, Windows Server 2008 R2, Windows Server 2012 R2, Windows Vista, Windows 8.1\n\nData Sources: File monitoring, Process command-line parameters, Services\n\nEffective Permissions: User, Administrator, SYSTEM\n\nContributors: Stefan Kanthak",
      "meta": {
        "refs": [
          "https://attack.mitre.org/wiki/Technique/T1044",
          "http://seclists.org/fulldisclosure/2015/Dec/34",
          "https://www.mozilla.org/en-US/security/advisories/mfsa2012-98/"
        ],
        "uuid": "0ca7beef-9bbc-4e35-97cf-437384ddce6a",
        "x_mitre_platforms": [
          "Windows Server 2003",
          "Windows Server 2008",
          "Windows Server 2012",
          "Windows XP",
          "Windows 7",
          "Windows 8",
          "Windows Server 2003 R2",
          "Windows Server 2008 R2",
          "Windows Server 2012 R2",
          "Windows Vista",
          "Windows 8.1"
        ],
        "x_mitre_data_sources": [
          "File monitoring",
          "Process command-line parameters",
          "Services"
        ]
      }
    },
    {
      "value": "Process Hollowing",
      "description": "Process hollowing occurs when a process is created in a suspended state and the process's memory is replaced with the code of a second program so that the second program runs instead of the original program. Windows and process monitoring tools believe the original process is running, whereas the actual program running is different.DLL Injection to evade defenses and detection analysis of malicious process execution by launching adversary-controlled code under the context of a legitimate process.\n\nDetection: Monitoring API calls may generate a significant amount of data and may not be directly useful for defense unless collected under specific circumstances for known bad sequences of calls, since benign use of API functions may be common and difficult to distinguish from malicious behavior.\n\nAnalyze process behavior to determine if a process is performing actions it usually does not, such as opening network connections, reading files, or other suspicious actions that could relate to post-compromise behavior.\n\nPlatforms: Windows Server 2003, Windows Server 2008, Windows Server 2012, Windows XP, Windows 7, Windows 8, Windows Server 2003 R2, Windows Server 2008 R2, Windows Server 2012 R2, Windows Vista, Windows 8.1\n\nData Sources: Process monitoring, API monitoring",
      "meta": {
        "refs": [
          "https://attack.mitre.org/wiki/Technique/T1093",
          "http://www.autosectools.com/process-hollowing.pdf"
        ],
        "uuid": "1c338d0f-a65e-4073-a5c1-c06878849f21",
        "x_mitre_platforms": [
          "Windows Server 2003",
          "Windows Server 2008",
          "Windows Server 2012",
          "Windows XP",
          "Windows 7",
          "Windows 8",
          "Windows Server 2003 R2",
          "Windows Server 2008 R2",
          "Windows Server 2012 R2",
          "Windows Vista",
          "Windows 8.1"
        ],
        "x_mitre_data_sources": [
          "Process monitoring",
          "API monitoring"
        ]
      }
    },
    {
      "value": "Scripting",
      "description": "Adversaries may use scripts to aid in operations and perform multiple actions that would otherwise be manual. Scripting is useful for speeding up operational tasks and reducing the time required to gain access to critical resources. Some scripting languages may be used to bypass process monitoring mechanisms by directly interacting with the operating system at an API level instead of calling other programs. Common scripting languages for Windows include VBScript and PowerShell but could also be in the form of command-line batch scripts.\n\nMany popular offensive frameworks exist which use forms of scripting for security testers and adversaries alike. Metasploit[[Citation: Metasploit]], Veil[[Citation: Veil]], and PowerSploit[[Citation: Powersploit]] are three examples that are popular among penetration testers for exploit and post-compromise operations and include many features for evading defenses. Some adversaries are known to use PowerShell.[[Citation: Alperovitch 2014]]\n\nDetection: Scripting may be common on admin, developer, or power user systems, depending on job function. If scripting is restricted for normal users, then any attempts to enable scripts running on a system would be considered suspicious. If scripts are not commonly used on a system, but enabled, scripts running out of cycle from patching or other administrator functions are suspicious. Scripts should be captured from the file system when possible to determine their actions and intent.\n\nScripts are likely to perform actions with various effects on a system that may generate events, depending on the types of monitoring used. Monitor processes and command-line arguments for script execution and subsequent behavior. Actions may be related to network and system information [[Discovery]], [[Collection]], or other scriptable post-compromise behaviors and could be used as indicators of detection leading back to the source script.\n\nPlatforms: Windows Server 2003, Windows Server 2008, Windows Server 2012, Windows XP, Windows 7, Windows 8, Windows Server 2003 R2, Windows Server 2008 R2, Windows Server 2012 R2, Windows Vista, Windows 8.1\n\nData Sources: Process monitoring, File monitoring, Process command-line parameters",
      "meta": {
        "refs": [
          "https://attack.mitre.org/wiki/Technique/T1064",
          "http://blog.crowdstrike.com/deep-thought-chinese-targeting-national-security-think-tanks/",
          "http://www.metasploit.com",
          "https://github.com/mattifestation/PowerSploit",
          "https://www.veil-framework.com/framework/"
        ],
        "uuid": "7fd87010-3a00-4da3-b905-410525e8ec44",
        "x_mitre_platforms": [
          "Windows Server 2003",
          "Windows Server 2008",
          "Windows Server 2012",
          "Windows XP",
          "Windows 7",
          "Windows 8",
          "Windows Server 2003 R2",
          "Windows Server 2008 R2",
          "Windows Server 2012 R2",
          "Windows Vista",
          "Windows 8.1"
        ],
        "x_mitre_data_sources": [
          "Process monitoring",
          "File monitoring",
          "Process command-line parameters"
        ]
      }
    },
    {
      "value": "Data from Removable Media",
      "description": "Sensitive data can be collected from any removable media (optical disk drive, USB memory, etc.) connected to the compromised system prior to cmd may be used to gather information. Some adversaries may also use Automated Collection on removable media.\n\nDetection: Monitor processes and command-line arguments for actions that could be taken to collect files from a system's connected removable media. Remote access tools with built-in features may interact directly with the Windows API to gather data. Data may also be acquired through Windows system management tools such as Windows Management Instrumentation and PowerShell.\n\nPlatforms: Windows Server 2003, Windows Server 2008, Windows Server 2012, Windows XP, Windows 7, Windows 8, Windows Server 2003 R2, Windows Server 2008 R2, Windows Server 2012 R2, Windows Vista, Windows 8.1\n\nData Sources: File monitoring, Process monitoring, Process command-line parameters",
      "meta": {
        "refs": [
          "https://attack.mitre.org/wiki/Technique/T1025"
        ],
        "uuid": "1b7ba276-eedc-4951-a762-0ceea2c030ec",
        "x_mitre_platforms": [
          "Windows Server 2003",
          "Windows Server 2008",
          "Windows Server 2012",
          "Windows XP",
          "Windows 7",
          "Windows 8",
          "Windows Server 2003 R2",
          "Windows Server 2008 R2",
          "Windows Server 2012 R2",
          "Windows Vista",
          "Windows 8.1"
        ],
        "x_mitre_data_sources": [
          "File monitoring",
          "Process monitoring",
          "Process command-line parameters"
        ]
      }
    },
    {
      "value": "Code Signing",
      "description": "Code signing provides a level of authenticity on a binary from the developer and a guarantee that the binary has not been tampered with.[[Citation: Wikipedia Code Signing]] However, adversaries are known to use code signing certificates to masquerade malware and tools as legitimate binaries. The certificates used during an operation may be created, forged, or stolen by the adversary.[[Citation: Securelist Digital Certificates]][[Citation: Symantec Digital Certificates]]\n\nCode signing certificates may be used to bypass security policies that require signed code to execute on a system.\n\nDetection: Collect and analyze signing certificate metadata on software that executes within the environment to look for unusual certificate characteristics and outliers.\n\nPlatforms: Windows Server 2003, Windows Server 2008, Windows Server 2012, Windows XP, Windows 7, Windows 8, Windows Server 2003 R2, Windows Server 2008 R2, Windows Server 2012 R2, Windows Vista, Windows 8.1\n\nData Sources: Binary file metadata",
      "meta": {
        "refs": [
          "https://attack.mitre.org/wiki/Technique/T1116",
          "https://en.wikipedia.org/wiki/Code%20signing",
          "https://securelist.com/blog/security-policies/68593/why-you-shouldnt-completely-trust-files-signed-with-digital-certificates/",
          "http://www.symantec.com/connect/blogs/how-attackers-steal-private-keys-digital-certificates"
        ],
        "uuid": "1b84d551-6de8-4b96-9930-d177677c3b1d",
        "x_mitre_platforms": [
          "Windows Server 2003",
          "Windows Server 2008",
          "Windows Server 2012",
          "Windows XP",
          "Windows 7",
          "Windows 8",
          "Windows Server 2003 R2",
          "Windows Server 2008 R2",
          "Windows Server 2012 R2",
          "Windows Vista",
          "Windows 8.1"
        ],
        "x_mitre_data_sources": [
          "Binary file metadata"
        ]
      }
    },
    {
      "value": "Rootkit",
      "description": "Rootkits are programs that hide the existence of malware by intercepting and modifying operating system API calls that supply system information. Rootkits or rootkit enabling functionality may reside at the user or kernel level in the operating system or lower, to include a Hypervisor, Master Boot Record, or the Basic Input/Output System.[[Citation: Wikipedia Rootkit]]\n\nAdversaries may use rootkits to hide the presence of programs, files, network connections, services, drivers, and other system components.\n\nDetection: Some rootkit protections may be built into anti-virus or operating system software. There are dedicated rootkit detection tools that look for specific types of rootkit behavior. Monitor for the existence of unrecognized DLLs, devices, services, and changes to the MBR.[[Citation: Wikipedia Rootkit]]\n\nPlatforms: Windows Server 2003, Windows Server 2008, Windows Server 2012, Windows XP, Windows 7, Windows 8, Windows Server 2003 R2, Windows Server 2008 R2, Windows Server 2012 R2, Windows Vista, Windows 8.1\n\nData Sources: BIOS, MBR, System calls",
      "meta": {
        "refs": [
          "https://attack.mitre.org/wiki/Technique/T1014",
          "https://en.wikipedia.org/wiki/Rootkit"
        ],
        "uuid": "0f20e3cb-245b-4a61-8a91-2d93f7cb0e9b",
        "x_mitre_platforms": [
          "Windows Server 2003",
          "Windows Server 2008",
          "Windows Server 2012",
          "Windows XP",
          "Windows 7",
          "Windows 8",
          "Windows Server 2003 R2",
          "Windows Server 2008 R2",
          "Windows Server 2012 R2",
          "Windows Vista",
          "Windows 8.1"
        ],
        "x_mitre_data_sources": [
          "BIOS",
          "MBR",
          "System calls"
        ]
      }
    },
    {
      "value": "Command-Line Interface",
      "description": "Command-line interfaces provide a way of interacting with computer systems and is a common feature across many types of operating system platforms.cmd, which can be used to perform a number of tasks including execution of other software. Command-line interfaces can be interacted with locally or remotely via a remote desktop application, reverse shell session, etc. Commands that are executed run with the current permission level of the command-line interface process unless the command includes process invocation that changes permissions context for that execution (e.g. Scheduled Task).\n\nAdversaries may use command-line interfaces to interact with systems and execute other software during the course of an operation.\n\nDetection: Command-line interface activities can be captured through proper logging of process execution with command-line arguments. This information can be useful in gaining additional insight to adversaries' actions through how they use native processes or custom tools.\n\nPlatforms: Windows Server 2003, Windows Server 2008, Windows Server 2012, Windows XP, Windows 7, Windows 8, Windows Server 2003 R2, Windows Server 2008 R2, Windows Server 2012 R2, Windows Vista, Windows 8.1, Linux\n\nData Sources: Process command-line parameters, Process monitoring",
      "meta": {
        "refs": [
          "https://attack.mitre.org/wiki/Technique/T1059",
          "https://en.wikipedia.org/wiki/Command-line%20interface"
        ],
        "uuid": "7385dfaf-6886-4229-9ecd-6fd678040830",
        "x_mitre_platforms": [
          "Windows Server 2003",
          "Windows Server 2008",
          "Windows Server 2012",
          "Windows XP",
          "Windows 7",
          "Windows 8",
          "Windows Server 2003 R2",
          "Windows Server 2008 R2",
          "Windows Server 2012 R2",
          "Windows Vista",
          "Windows 8.1",
          "Linux"
        ],
        "x_mitre_data_sources": [
          "Process command-line parameters",
          "Process monitoring"
        ]
      }
    },
    {
      "value": "Exfiltration Over Command and Control Channel",
      "description": "Data exfiltration is performed over the [[Command and Control]] channel.  Data is encoded into the normal communications channel using the same protocol as command and control communications.\n\nDetection: Detection for command and control applies. Analyze network data for uncommon data flows (e.g., a client sending significantly more data than it receives from a server). Processes utilizing the network that do not normally have network communication or have never been seen before are suspicious. Analyze packet contents to detect communications that do not follow the expected protocol behavior for the port that is being used.[[Citation: University of Birmingham C2]]\n\nPlatforms: Windows Server 2003, Windows Server 2008, Windows Server 2012, Windows XP, Windows 7, Windows 8, Windows Server 2003 R2, Windows Server 2008 R2, Windows Server 2012 R2, Windows Vista, Windows 8.1\n\nData Sources: User interface, Process monitoring",
      "meta": {
        "refs": [
          "https://attack.mitre.org/wiki/Technique/T1041",
          "https://arxiv.org/ftp/arxiv/papers/1408/1408.1136.pdf"
        ],
        "uuid": "92d7da27-2d91-488e-a00c-059dc162766d",
        "x_mitre_platforms": [
          "Windows Server 2003",
          "Windows Server 2008",
          "Windows Server 2012",
          "Windows XP",
          "Windows 7",
          "Windows 8",
          "Windows Server 2003 R2",
          "Windows Server 2008 R2",
          "Windows Server 2012 R2",
          "Windows Vista",
          "Windows 8.1"
        ],
        "x_mitre_data_sources": [
          "User interface",
          "Process monitoring"
        ]
      }
    },
    {
      "value": "Multi-Stage Channels",
      "description": "Adversaries may create multiple stages for command and control that are employed under different conditions or for certain functions. Use of multiple stages may obfuscate the command and control channel to make detection more difficult.\n\nRemote access tools will call back to the first-stage command and control server for instructions. The first stage may have automated capabilities to collect basic host information, update tools, and upload additional files. A second remote access tool (RAT) could be uploaded at that point to redirect the host to the second-stage command and control server. The second stage will likely be more fully featured and allow the adversary to interact with the system through a reverse shell and additional RAT features.\n\nThe different stages will likely be hosted separately with no overlapping infrastructure. The loader may also have backup first-stage callbacks or Fallback Channels in case the original first-stage communication path is discovered and blocked.\n\nDetection: Host data that can relate unknown or suspicious process activity using a network connection is important to supplement any existing indicators of compromise based on malware command and control signatures and infrastructure. Relating subsequent actions that may result from [[Discovery]] of the system and network information or [[Lateral Movement]] to the originating process may also yield useful data.\n\nPlatforms: Windows Server 2003, Windows Server 2008, Windows Server 2012, Windows XP, Windows 7, Windows 8, Windows Server 2003 R2, Windows Server 2008 R2, Windows Server 2012 R2, Windows Vista, Windows 8.1\n\nData Sources: Netflow/Enclave netflow, Network device logs, Network protocol analysis, Packet capture, Process use of network",
      "meta": {
        "refs": [
          "https://attack.mitre.org/wiki/Technique/T1104"
        ],
        "uuid": "84e02621-8fdf-470f-bd58-993bb6a89d91",
        "x_mitre_platforms": [
          "Windows Server 2003",
          "Windows Server 2008",
          "Windows Server 2012",
          "Windows XP",
          "Windows 7",
          "Windows 8",
          "Windows Server 2003 R2",
          "Windows Server 2008 R2",
          "Windows Server 2012 R2",
          "Windows Vista",
          "Windows 8.1"
        ],
        "x_mitre_data_sources": [
          "Netflow/Enclave netflow",
          "Network device logs",
          "Network protocol analysis",
          "Packet capture",
          "Process use of network"
        ]
      }
    },
    {
      "value": "Input Capture",
      "description": "Adversaries can use methods of capturing user input for obtaining credentials for Legitimate Credentials and information Credential Dumping efforts are not effective, and may require an adversary to remain passive on a system for a period of time before an opportunity arises.\n\nAdversaries may also install code on externally facing portals, such as a VPN login page, to capture and transmit credentials of users who attempt to log into the service. This variation on input capture may be conducted post-compromise using legitimate administrative access as a backup measure to maintain network access through External Remote Services and Legitimate Credentials or as part of the initial compromise by exploitation of the externally facing web service.Legitimate Credentials in use by adversaries may help to catch the result of user input interception if new techniques are used.\n\nPlatforms: Windows Server 2003, Windows Server 2008, Windows Server 2012, Windows XP, Windows 7, Windows 8, Windows Server 2003 R2, Windows Server 2008 R2, Windows Server 2012 R2, Windows Vista, Windows 8.1\n\nData Sources: Windows Registry, Kernel drivers, Process monitoring, API monitoring\n\nContributors: John Lambert, Microsoft Threat Intelligence Center",
      "meta": {
        "refs": [
          "https://attack.mitre.org/wiki/Technique/T1056",
          "http://blog.leetsys.com/2012/01/02/capturing-windows-7-credentials-at-logon-using-custom-credential-provider/",
          "https://www.volexity.com/blog/2015/10/07/virtual-private-keylogging-cisco-web-vpns-leveraged-for-access-and-persistence/"
        ],
        "uuid": "bb5a00de-e086-4859-a231-fa793f6797e2",
        "x_mitre_platforms": [
          "Windows Server 2003",
          "Windows Server 2008",
          "Windows Server 2012",
          "Windows XP",
          "Windows 7",
          "Windows 8",
          "Windows Server 2003 R2",
          "Windows Server 2008 R2",
          "Windows Server 2012 R2",
          "Windows Vista",
          "Windows 8.1"
        ],
        "x_mitre_data_sources": [
          "Windows Registry",
          "Kernel drivers",
          "Process monitoring",
          "API monitoring"
        ]
      }
    },
    {
      "value": "Regsvcs/Regasm",
      "description": "Regsvcs and Regasm are Windows command-line utilities that are used to register .NET Component Object Model (COM) assemblies. Both are digitally signed by Microsoft.[[Citation: MSDN Regsvcs]][[Citation: MSDN Regasm]]\n\nAdversaries can use Regsvcs and Regasm to proxy execution of code through a trusted Windows utility. Both utilities may be used to bypass process whitelisting through use of attributes within the binary to specify code that should be run before registration or unregistration: <code>[ComRegisterFunction]</code> or <code>[ComUnregisterFunction]</code> respectively. The code with the registration and unregistration attributes will be executed even if the process is run under insufficient privileges and fails to execute.[[Citation: SubTee Regsvcs Regasm Whitelist Bypass]]\n\nDetection: Use process monitoring to monitor the execution and arguments of Regsvcs.exe and Regasm.exe. Compare recent invocations of Regsvcs.exe and Regasm.exe with prior history of known good arguments and executed binaries to determine anomalous and potentially adversarial activity. Command arguments used before and after Regsvcs.exe or Regasm.exe invocation may also be useful in determining the origin and purpose of the binary being executed.\n\nPlatforms: Windows Server 2003, Windows Server 2008, Windows Server 2012, Windows XP, Windows 7, Windows 8, Windows Server 2003 R2, Windows Server 2008 R2, Windows Server 2012 R2, Windows Vista, Windows 8.1\n\nData Sources: Process monitoring, Process command-line parameters\n\nContributors: Casey Smith",
      "meta": {
        "refs": [
          "https://attack.mitre.org/wiki/Technique/T1121",
          "https://msdn.microsoft.com/en-us/library/04za0hca.aspx",
          "https://msdn.microsoft.com/en-us/library/tzat5yw6.aspx",
          "http://subt0x10.blogspot.com/2015/11/all-natural-organic-free-range.html"
        ],
        "uuid": "215190a9-9f02-4e83-bb5f-e0589965a302",
        "x_mitre_platforms": [
          "Windows Server 2003",
          "Windows Server 2008",
          "Windows Server 2012",
          "Windows XP",
          "Windows 7",
          "Windows 8",
          "Windows Server 2003 R2",
          "Windows Server 2008 R2",
          "Windows Server 2012 R2",
          "Windows Vista",
          "Windows 8.1"
        ],
        "x_mitre_data_sources": [
          "Process monitoring",
          "Process command-line parameters"
        ]
      }
    },
    {
      "value": "MSBuild",
      "description": "MSBuild.exe (Microsoft Build Engine) is a software build platform used by Visual Studio. It takes XML formatted project files that define requirements for building various platforms and configurations.[[Citation: MSDN MSBuild]] \n\nAdversaries can use MSBuild to proxy execution of code through a trusted Windows utility. The inline task capability of MSBuild that was introduced in .NET version 4 allows for C# code to be inserted into the XML project file.[[Citation: MSDN MSBuild Inline Tasks]] MSBuild will compile and execute the inline task. MSBuild.exe is a signed Microsoft binary, so when it is used this way it can execute arbitrary code and bypass application whitelisting defenses that are configured to allow MSBuild.exe execution.[[Citation: SubTee MSBuild]]\n\nDetection: Use process monitoring to monitor the execution and arguments of MSBuild.exe. Compare recent invocations of MSBuild.exe with prior history of known good arguments and executed binaries to determine anomalous and potentially adversarial activity. It is likely that MSBuild will be used by software developers, so if it exists and is used outside of that context, then the event may be suspicious. Command arguments used before and after the MSBuild.exe invocation may also be useful in determining the origin and purpose of the binary being executed.\n\nPlatforms: Windows Server 2003, Windows Server 2008, Windows Server 2012, Windows XP, Windows 7, Windows 8, Windows Server 2003 R2, Windows Server 2008 R2, Windows Server 2012 R2, Windows Vista, Windows 8.1\n\nData Sources: Process monitoring\n\nContributors: Casey Smith",
      "meta": {
        "refs": [
          "https://attack.mitre.org/wiki/Technique/T1127",
          "https://msdn.microsoft.com/library/dd722601.aspx",
          "https://subt0x10.blogspot.com/2016/09/bypassing-application-whitelisting.html",
          "https://msdn.microsoft.com/library/dd393574.aspx"
        ],
        "uuid": "ff25900d-76d5-449b-a351-8824e62fc81b",
        "x_mitre_platforms": [
          "Windows Server 2003",
          "Windows Server 2008",
          "Windows Server 2012",
          "Windows XP",
          "Windows 7",
          "Windows 8",
          "Windows Server 2003 R2",
          "Windows Server 2008 R2",
          "Windows Server 2012 R2",
          "Windows Vista",
          "Windows 8.1"
        ],
        "x_mitre_data_sources": [
          "Process monitoring"
        ]
      }
    },
    {
      "value": "Local Network Configuration Discovery",
      "description": "Adversaries will likely look for details about the network configuration and settings of systems they access. Several operating system administration utilities exist that can be used to gather this information. Examples include Arp, ipconfig/ifconfig, nbtstat, and route.\n\nDetection: System and network discovery techniques normally occur throughout an operation as an adversary learns the environment. Data and events should not be viewed in isolation, but as part of a chain of behavior that could lead to other activities, such as Windows Management Instrumentation and PowerShell.\n\nPlatforms: Windows Server 2003, Windows Server 2008, Windows Server 2012, Windows XP, Windows 7, Windows 8, Windows Server 2003 R2, Windows Server 2008 R2, Windows Server 2012 R2, Windows Vista, Windows 8.1\n\nData Sources: Process command-line parameters, Process monitoring",
      "meta": {
        "refs": [
          "https://attack.mitre.org/wiki/Technique/T1016"
        ],
        "uuid": "707399d6-ab3e-4963-9315-d9d3818cd6a0",
        "x_mitre_platforms": [
          "Windows Server 2003",
          "Windows Server 2008",
          "Windows Server 2012",
          "Windows XP",
          "Windows 7",
          "Windows 8",
          "Windows Server 2003 R2",
          "Windows Server 2008 R2",
          "Windows Server 2012 R2",
          "Windows Vista",
          "Windows 8.1"
        ],
        "x_mitre_data_sources": [
          "Process command-line parameters",
          "Process monitoring"
        ]
      }
    },
    {
      "value": "Scheduled Task",
      "description": "Utilities such as at and schtasks, along with the Windows Task Scheduler, can be used to schedule programs or scripts to be executed at a date and time. The account used to create the task must be in the Administrators group on the local system. A task can also be scheduled on a remote system, provided the proper authentication is met to use RPC and file and printer sharing is turned on.Windows Management Instrumentation and PowerShell, so additional logging may need to be configured to gather the appropriate data.\n\nPlatforms: Windows Server 2003, Windows Server 2008, Windows Server 2012, Windows XP, Windows 7, Windows 8, Windows Server 2003 R2, Windows Server 2008 R2, Windows Server 2012 R2, Windows Vista, Windows 8.1\n\nData Sources: File monitoring, Process command-line parameters, Process monitoring\n\nEffective Permissions: Administrator, SYSTEM",
      "meta": {
        "refs": [
          "https://attack.mitre.org/wiki/Technique/T1053",
          "https://technet.microsoft.com/en-us/sysinternals/bb963902",
          "https://technet.microsoft.com/en-us/library/cc785125.aspx"
        ],
        "uuid": "35dd844a-b219-4e2b-a6bb-efa9a75995a9",
        "x_mitre_platforms": [
          "Windows Server 2003",
          "Windows Server 2008",
          "Windows Server 2012",
          "Windows XP",
          "Windows 7",
          "Windows 8",
          "Windows Server 2003 R2",
          "Windows Server 2008 R2",
          "Windows Server 2012 R2",
          "Windows Vista",
          "Windows 8.1"
        ],
        "x_mitre_data_sources": [
          "File monitoring",
          "Process command-line parameters",
          "Process monitoring"
        ]
      }
    },
    {
      "value": "Windows Management Instrumentation",
      "description": "Windows Management Instrumentation (WMI) is a Windows administration feature that provides a uniform environment for local and remote access to Windows system components. It relies on the WMI service for local and remote access and the server message block (SMB)[[Citation: Wikipedia SMB]] and Remote Procedure Call Service (RPCS)[[Citation: TechNet RPC]] for remote access. RPCS operates over port 135.[[Citation: MSDN WMI]]\n\nAn adversary can use WMI to interact with local and remote systems and use it as a means to perform many tactic functions, such as gathering information for [[Discovery]] and remote [[Execution]] of files as part of [[Lateral Movement]].[[Citation: FireEye WMI 2015]]\n\nDetection: Monitor network traffic for WMI connections; the use of WMI in environments that do not typically use WMI may be suspect. Perform process monitoring to capture command-line arguments of \"wmic\" and detect commands that are used to perform remote behavior.[[Citation: FireEye WMI 2015]]\n\nPlatforms: Windows Server 2003, Windows Server 2008, Windows Server 2012, Windows XP, Windows 7, Windows 8, Windows Server 2003 R2, Windows Server 2008 R2, Windows Server 2012 R2, Windows Vista, Windows 8.1\n\nData Sources: Authentication logs, Netflow/Enclave netflow, Process command-line parameters, Process monitoring",
      "meta": {
        "refs": [
          "https://attack.mitre.org/wiki/Technique/T1047",
          "https://technet.microsoft.com/en-us/library/cc787851.aspx",
          "https://en.wikipedia.org/wiki/Server%20Message%20Block",
          "https://www.fireeye.com/content/dam/fireeye-www/global/en/current-threats/pdfs/wp-windows-management-instrumentation.pdf",
          "https://msdn.microsoft.com/en-us/library/aa394582.aspx"
        ],
        "uuid": "01a5a209-b94c-450b-b7f9-946497d91055",
        "x_mitre_platforms": [
          "Windows Server 2003",
          "Windows Server 2008",
          "Windows Server 2012",
          "Windows XP",
          "Windows 7",
          "Windows 8",
          "Windows Server 2003 R2",
          "Windows Server 2008 R2",
          "Windows Server 2012 R2",
          "Windows Vista",
          "Windows 8.1"
        ],
        "x_mitre_data_sources": [
          "Authentication logs",
          "Netflow/Enclave netflow",
          "Process command-line parameters",
          "Process monitoring"
        ]
      }
    },
    {
      "value": "NTFS Extended Attributes",
      "description": "Data or executables may be stored in New Technology File System (NTFS) partition metadata instead of directly in files. This may be done to evade some defenses, such as static indicator scanning tools and anti-virus.[[Citation: Journey into IR ZeroAccess NTFS EA]]\n\nThe NTFS format has a feature called Extended Attributes (EA), which allows data to be stored as an attribute of a file or folder.[[Citation: Microsoft File Streams]]\n\nDetection: Forensic techniques exist to identify information stored in EA.[[Citation: Journey into IR ZeroAccess NTFS EA]] It may be possible to monitor NTFS for writes or reads to NTFS EA or to regularly scan for the presence of modified information.\n\nPlatforms: Windows Server 2003, Windows Server 2008, Windows Server 2012, Windows XP, Windows 7, Windows 8, Windows Server 2003 R2, Windows Server 2008 R2, Windows Server 2012 R2, Windows Vista, Windows 8.1\n\nData Sources: File monitoring, Kernel drivers",
      "meta": {
        "refs": [
          "https://attack.mitre.org/wiki/Technique/T1096",
          "http://journeyintoir.blogspot.com/2012/12/extracting-zeroaccess-from-ntfs.html",
          "http://msdn.microsoft.com/en-us/library/aa364404"
        ],
        "uuid": "f2d44246-91f1-478a-b6c8-1227e0ca109d",
        "x_mitre_platforms": [
          "Windows Server 2003",
          "Windows Server 2008",
          "Windows Server 2012",
          "Windows XP",
          "Windows 7",
          "Windows 8",
          "Windows Server 2003 R2",
          "Windows Server 2008 R2",
          "Windows Server 2012 R2",
          "Windows Vista",
          "Windows 8.1"
        ],
        "x_mitre_data_sources": [
          "File monitoring",
          "Kernel drivers"
        ]
      }
    },
    {
      "value": "Process Discovery",
      "description": "Adversaries may attempt to get information about running processes on a system. An example command that would obtain details on processes is \"tasklist\" using the Tasklist utility.\n\nInformation obtained could be used to gain an understanding of common software running on systems within the network.\n\nDetection: System and network discovery techniques normally occur throughout an operation as an adversary learns the environment. Data and events should not be viewed in isolation, but as part of a chain of behavior that could lead to other activities, such as Windows Management Instrumentation and PowerShell.\n\nPlatforms: Windows Server 2003, Windows Server 2008, Windows Server 2012, Windows XP, Windows 7, Windows 8, Windows Server 2003 R2, Windows Server 2008 R2, Windows Server 2012 R2, Windows Vista, Windows 8.1, Linux\n\nData Sources: Process command-line parameters, Process monitoring",
      "meta": {
        "refs": [
          "https://attack.mitre.org/wiki/Technique/T1057"
        ],
        "uuid": "8f4a33ec-8b1f-4b80-a2f6-642b2e479580",
        "x_mitre_platforms": [
          "Windows Server 2003",
          "Windows Server 2008",
          "Windows Server 2012",
          "Windows XP",
          "Windows 7",
          "Windows 8",
          "Windows Server 2003 R2",
          "Windows Server 2008 R2",
          "Windows Server 2012 R2",
          "Windows Vista",
          "Windows 8.1",
          "Linux"
        ],
        "x_mitre_data_sources": [
          "Process command-line parameters",
          "Process monitoring"
        ]
      }
    },
    {
      "value": "Basic Input/Output System",
      "description": "The BIOS (Basic Input/Output System), which underlies the functionality of a computer, may be modified to perform or assist in malicious activity.[[Citation: Wikipedia BIOS]]\n\nCapabilities exist to overwrite the system firmware, which may give sophisticated adversaries a means to install malicious firmware updates as a means of persistence on a system that may be difficult to detect.\n\nThe Unified Extensible Firmware Interface (UEFI) is new specification for the interface between platform firmware and a computer operating system.[[Citation: About UEFI]]\n\nDetection: Firmware manipulation may be detected.[[Citation: MITRE Trustworthy Firmware Measurement]] Dump and inspect BIOS images on vulnerable systems and compare against known good images.[[Citation: MITRE Copernicus]] Analyze differences to determine if malicious changes have occurred. Log attempts to read/write to BIOS and compare against known patching behavior.\n\nLikewise, extensible firmware interface (EFI) modules can be collected and compared against a known-clean list of EFI executable binaries to detect potentially malicious modules. The CHIPSEC framework can be used for analysis to determine if firmware modifications have been performed.[[Citation: McAfee CHIPSEC Blog]][[Citation: Github CHIPSEC]][[Citation: Intel HackingTeam UEFI Rootkit]]\n\nPlatforms: Windows Server 2003, Windows Server 2008, Windows Server 2012, Windows XP, Windows 7, Windows 8, Windows Server 2003 R2, Windows Server 2008 R2, Windows Server 2012 R2, Windows Vista, Windows 8.1\n\nData Sources: API monitoring, BIOS",
      "meta": {
        "refs": [
          "https://attack.mitre.org/wiki/Technique/T1019",
          "https://securingtomorrow.mcafee.com/business/chipsec-support-vault-7-disclosure-scanning/",
          "http://www.intelsecurity.com/advanced-threat-research/content/data/HT-UEFI-rootkit.html",
          "https://github.com/chipsec/chipsec",
          "http://www.uefi.org/about",
          "https://en.wikipedia.org/wiki/BIOS",
          "http://www.mitre.org/publications/project-stories/going-deep-into-the-bios-with-mitre-firmware-security-research",
          "http://www.mitre.org/capabilities/cybersecurity/overview/cybersecurity-blog/copernicus-question-your-assumptions-about"
        ],
        "uuid": "6856ddd6-2df3-4379-8b87-284603c189c3",
        "x_mitre_platforms": [
          "Windows Server 2003",
          "Windows Server 2008",
          "Windows Server 2012",
          "Windows XP",
          "Windows 7",
          "Windows 8",
          "Windows Server 2003 R2",
          "Windows Server 2008 R2",
          "Windows Server 2012 R2",
          "Windows Vista",
          "Windows 8.1"
        ],
        "x_mitre_data_sources": [
          "API monitoring",
          "BIOS"
        ]
      }
    },
    {
      "value": "Registry Run Keys / Start Folder",
      "description": "Adding an entry to the \"run keys\" in the Registry or startup folder will cause the program referenced to be executed when a user logs in.Masquerading to make the Registry entries look as if they are associated with legitimate programs.\n\nDetection: Monitor Registry for changes to run keys that do not correlate with known software, patch cycles, etc. Monitor the start folder for additions or changes. Tools such as Sysinternals Autoruns may also be used to detect system changes that could be attempts at persistence, including listing the run keys' Registry locations and startup folders.[[Citation: TechNet Autoruns]] Suspicious program execution as startup programs may show up as outlier processes that have not been seen before when compared against historical data.\n\nChanges to these locations typically happen under normal conditions when legitimate software is installed. To increase confidence of malicious activity, data and events should not be viewed in isolation, but as part of a chain of behavior that could lead to other activities, such as network connections made for [[Command and Control]], learning details about the environment through [[Discovery]], and [[Lateral Movement]].\n\nPlatforms: Windows Server 2003, Windows Server 2008, Windows Server 2012, Windows XP, Windows 7, Windows 8, Windows Server 2003 R2, Windows Server 2008 R2, Windows Server 2012 R2, Windows Vista, Windows 8.1\n\nData Sources: Windows Registry, File monitoring",
      "meta": {
        "refs": [
          "https://attack.mitre.org/wiki/Technique/T1060",
          "http://msdn.microsoft.com/en-us/library/aa376977",
          "https://technet.microsoft.com/en-us/sysinternals/bb963902"
        ],
        "uuid": "9422fc14-1c43-410d-ab0f-a709b76c72dc",
        "x_mitre_platforms": [
          "Windows Server 2003",
          "Windows Server 2008",
          "Windows Server 2012",
          "Windows XP",
          "Windows 7",
          "Windows 8",
          "Windows Server 2003 R2",
          "Windows Server 2008 R2",
          "Windows Server 2012 R2",
          "Windows Vista",
          "Windows 8.1"
        ],
        "x_mitre_data_sources": [
          "Windows Registry",
          "File monitoring"
        ]
      }
    },
    {
      "value": "Service Execution",
      "description": "Adversaries may execute a binary, command, or script via a method that interacts with Windows services, such as the Service Control Manager. This can be done by either creating a new service or modifying an existing service. This technique is the execution used in conjunction with New Service and Modify Existing Service during service persistence or privilege escalation.\n\nDetection: Changes to service Registry entries and command-line invocation of tools capable of modifying services that do not correlate with known software, patch cycles, etc., may be suspicious. If a service is used only to execute a binary or script and not to persist, then it will likely be changed back to its original form shortly after the service is restarted so the service is not left broken, as is the case with the common administrator tool PsExec.\n\nPlatforms: Windows Server 2003, Windows Server 2008, Windows Server 2012, Windows XP, Windows 7, Windows 8, Windows Server 2003 R2, Windows Server 2008 R2, Windows Server 2012 R2, Windows Vista, Windows 8.1\n\nData Sources: Windows Registry, Process command-line parameters, Process monitoring",
      "meta": {
        "refs": [
          "https://attack.mitre.org/wiki/Technique/T1035"
        ],
        "uuid": "f44731de-ea9f-406d-9b83-30ecbb9b4392",
        "x_mitre_platforms": [
          "Windows Server 2003",
          "Windows Server 2008",
          "Windows Server 2012",
          "Windows XP",
          "Windows 7",
          "Windows 8",
          "Windows Server 2003 R2",
          "Windows Server 2008 R2",
          "Windows Server 2012 R2",
          "Windows Vista",
          "Windows 8.1"
        ],
        "x_mitre_data_sources": [
          "Windows Registry",
          "Process command-line parameters",
          "Process monitoring"
        ]
      }
    },
    {
      "value": "Uncommonly Used Port",
      "description": "Adversaries may conduct C2 communications over a non-standard port to bypass proxies and firewalls that have been improperly configured.\n\nDetection: Analyze network data for uncommon data flows (e.g., a client sending significantly more data than it receives from a server). Processes utilizing the network that do not normally have network communication or have never been seen before are suspicious. Analyze packet contents to detect communications that do not follow the expected protocol behavior for the port that is being used.[[Citation: University of Birmingham C2]]\n\nPlatforms: Windows Server 2003, Windows Server 2008, Windows Server 2012, Windows XP, Windows 7, Windows 8, Windows Server 2003 R2, Windows Server 2008 R2, Windows Server 2012 R2, Windows Vista, Windows 8.1\n\nData Sources: Netflow/Enclave netflow, Process use of network, Process monitoring",
      "meta": {
        "refs": [
          "https://attack.mitre.org/wiki/Technique/T1065",
          "https://arxiv.org/ftp/arxiv/papers/1408/1408.1136.pdf"
        ],
        "uuid": "c848fcf7-6b62-4bde-8216-b6c157d48da0",
        "x_mitre_platforms": [
          "Windows Server 2003",
          "Windows Server 2008",
          "Windows Server 2012",
          "Windows XP",
          "Windows 7",
          "Windows 8",
          "Windows Server 2003 R2",
          "Windows Server 2008 R2",
          "Windows Server 2012 R2",
          "Windows Vista",
          "Windows 8.1"
        ],
        "x_mitre_data_sources": [
          "Netflow/Enclave netflow",
          "Process use of network",
          "Process monitoring"
        ]
      }
    },
    {
      "value": "Data Staged",
      "description": "Collected data is staged in a central location or directory prior to Data Compressed or Data Encrypted.\n\nInteractive command shells may be used, and common functionality within cmd may be used to copy data into a staging location.\n\nDetection: Processes that appear to be reading files from disparate locations and writing them to the same directory or file may be an indication of data being staged, especially if they are suspected of performing encryption or compression on the files.\n\nMonitor processes and command-line arguments for actions that could be taken to collect and combine files. Remote access tools with built-in features may interact directly with the Windows API to gather and copy to a location. Data may also be acquired and staged through Windows system management tools such as Windows Management Instrumentation and PowerShell.\n\nPlatforms: Windows Server 2003, Windows Server 2008, Windows Server 2012, Windows XP, Windows 7, Windows 8, Windows Server 2003 R2, Windows Server 2008 R2, Windows Server 2012 R2, Windows Vista, Windows 8.1\n\nData Sources: File monitoring, Process monitoring, Process command-line parameters",
      "meta": {
        "refs": [
          "https://attack.mitre.org/wiki/Technique/T1074"
        ],
        "uuid": "7dd95ff6-712e-4056-9626-312ea4ab4c5e",
        "x_mitre_platforms": [
          "Windows Server 2003",
          "Windows Server 2008",
          "Windows Server 2012",
          "Windows XP",
          "Windows 7",
          "Windows 8",
          "Windows Server 2003 R2",
          "Windows Server 2008 R2",
          "Windows Server 2012 R2",
          "Windows Vista",
          "Windows 8.1"
        ],
        "x_mitre_data_sources": [
          "File monitoring",
          "Process monitoring",
          "Process command-line parameters"
        ]
      }
    },
    {
      "value": "New Service",
      "description": "When operating systems boot up, they can start programs or applications called services that perform background system functions.Masquerading. Services may be created with administrator privileges but are executed under SYSTEM privileges, so an adversary may also use a service to escalate privileges from administrator to SYSTEM. Adversaries may also directly start services through Service Execution.\n\nDetection: Monitor service creation through changes in the Registry and common utilities using command-line invocation. New, benign services may be created during installation of new software. Data and events should not be viewed in isolation, but as part of a chain of behavior that could lead to other activities, such as network connections made for Windows Management Instrumentation and PowerShell, so additional logging may need to be configured to gather the appropriate data.\n\nPlatforms: Windows Server 2003, Windows Server 2008, Windows Server 2012, Windows XP, Windows 7, Windows 8, Windows Server 2003 R2, Windows Server 2008 R2, Windows Server 2012 R2, Windows Vista, Windows 8.1\n\nData Sources: Windows Registry, Process monitoring, Process command-line parameters\n\nEffective Permissions: SYSTEM",
      "meta": {
        "refs": [
          "https://attack.mitre.org/wiki/Technique/T1050",
          "https://technet.microsoft.com/en-us/sysinternals/bb963902",
          "https://technet.microsoft.com/en-us/library/cc772408.aspx"
        ],
        "uuid": "478aa214-2ca7-4ec0-9978-18798e514790",
        "x_mitre_platforms": [
          "Windows Server 2003",
          "Windows Server 2008",
          "Windows Server 2012",
          "Windows XP",
          "Windows 7",
          "Windows 8",
          "Windows Server 2003 R2",
          "Windows Server 2008 R2",
          "Windows Server 2012 R2",
          "Windows Vista",
          "Windows 8.1"
        ],
        "x_mitre_data_sources": [
          "Windows Registry",
          "Process monitoring",
          "Process command-line parameters"
        ]
      }
    },
    {
      "value": "Network Share Connection Removal",
      "description": "Windows shared drive and Windows Admin Shares connections can be removed when no longer needed. Net is an example utility that can be used to remove network share connections with the <code>net use \\\\system\\share /delete</code> command.Windows Admin Shares. SMB traffic between systems may also be captured and decoded to look for related network share session and file transfer activity. Windows authentication logs are also useful in determining when authenticated network shares are established and by which account, and can be used to correlate network share activity to other events to investigate potentially malicious activity.\n\nPlatforms: Windows Server 2003, Windows Server 2008, Windows Server 2012, Windows XP, Windows 7, Windows 8, Windows Server 2003 R2, Windows Server 2008 R2, Windows Server 2012 R2, Windows Vista, Windows 8.1\n\nData Sources: Process monitoring, Process command-line parameters, Packet capture, Authentication logs",
      "meta": {
        "refs": [
          "https://attack.mitre.org/wiki/Technique/T1126",
          "https://technet.microsoft.com/bb490717.aspx"
        ],
        "uuid": "e7eab98d-ae11-4491-bd28-a53ba875865a",
        "x_mitre_platforms": [
          "Windows Server 2003",
          "Windows Server 2008",
          "Windows Server 2012",
          "Windows XP",
          "Windows 7",
          "Windows 8",
          "Windows Server 2003 R2",
          "Windows Server 2008 R2",
          "Windows Server 2012 R2",
          "Windows Vista",
          "Windows 8.1"
        ],
        "x_mitre_data_sources": [
          "Process monitoring",
          "Process command-line parameters",
          "Packet capture",
          "Authentication logs"
        ]
      }
    },
    {
      "value": "DLL Injection",
      "description": "DLL injection is used to run code in the context of another process by causing the other process to load and execute code. Running code in the context of another process provides adversaries many benefits, such as access to the process's memory and permissions. It also allows adversaries to mask their actions under a legitimate process. A more sophisticated kind of DLL injection, reflective DLL injection, loads code without calling the normal Windows API calls, potentially bypassing DLL load monitoring. Numerous methods of DLL injection exist on Windows, including modifying the Registry, creating remote threads, Windows hooking APIs, and DLL pre-loading.PowerShell with tools such as PowerSploit,[[Citation: Powersploit]] so additional PowerShell monitoring may be required to cover known implementations of this behavior.\n\nPlatforms: Windows Server 2003, Windows Server 2008, Windows Server 2012, Windows XP, Windows 7, Windows 8, Windows Server 2003 R2, Windows Server 2008 R2, Windows Server 2012 R2, Windows Vista, Windows 8.1\n\nData Sources: API monitoring, Windows Registry, File monitoring, Process monitoring\n\nEffective Permissions: User, Administrator, SYSTEM",
      "meta": {
        "refs": [
          "https://attack.mitre.org/wiki/Technique/T1055",
          "http://en.wikipedia.org/wiki/DLL%20injection",
          "http://www.codeproject.com/Articles/4610/Three-Ways-to-Inject-Your-Code-into-Another-Proces",
          "https://github.com/mattifestation/PowerSploit"
        ],
        "uuid": "43e7dc91-05b2-474c-b9ac-2ed4fe101f4d",
        "x_mitre_platforms": [
          "Windows Server 2003",
          "Windows Server 2008",
          "Windows Server 2012",
          "Windows XP",
          "Windows 7",
          "Windows 8",
          "Windows Server 2003 R2",
          "Windows Server 2008 R2",
          "Windows Server 2012 R2",
          "Windows Vista",
          "Windows 8.1"
        ],
        "x_mitre_data_sources": [
          "API monitoring",
          "Windows Registry",
          "File monitoring",
          "Process monitoring"
        ]
      }
    },
    {
      "value": "Authentication Package",
      "description": "Windows Authentication Package DLLs are loaded by the Local Security Authority (LSA) process at system start. They provide support for multiple logon processes and multiple security protocols to the operating system.[[Citation: MSDN Authentication Packages]]\n\nAdversaries can use the autostart mechanism provided by LSA Authentication Packages for persistence by placing a reference to a binary in the Windows Registry location <code>HKLM\\SYSTEM\\CurrentControlSet\\Control\\Lsa\\</code> with the key value of <code>\"Authentication Packages\"=<target binary></code>. The binary will then be executed by the system when the authentication packages are loaded.\n\nDetection: Monitor the Registry for changes to the LSA Registry keys. Monitor the LSA process for DLL loads. Windows 8.1 and Windows Server 2012 R2 may generate events when unsigned DLLs try to load into the LSA by setting the Registry key <code>HKLM\\SOFTWARE\\Microsoft\\Windows NT\\CurrentVersion\\Image File Execution Options\\LSASS.exe</code> with AuditLevel = 8.[[Citation: Graeber 2014]][[Citation: Microsoft Configure LSA]]\n\nPlatforms: Windows Server 2003, Windows Server 2008, Windows Server 2012, Windows XP, Windows 7, Windows 8, Windows Server 2003 R2, Windows Server 2008 R2, Windows Server 2012 R2, Windows Vista, Windows 8.1\n\nData Sources: DLL monitoring, Windows Registry, Loaded DLLs",
      "meta": {
        "refs": [
          "https://attack.mitre.org/wiki/Technique/T1131",
          "https://technet.microsoft.com/en-us/library/dn408187.aspx",
          "https://msdn.microsoft.com/library/windows/desktop/aa374733.aspx",
          "http://docplayer.net/20839173-Analysis-of-malicious-security-support-provider-dlls.html"
        ],
        "uuid": "52d40641-c480-4ad5-81a3-c80ccaddf82d",
        "x_mitre_platforms": [
          "Windows Server 2003",
          "Windows Server 2008",
          "Windows Server 2012",
          "Windows XP",
          "Windows 7",
          "Windows 8",
          "Windows Server 2003 R2",
          "Windows Server 2008 R2",
          "Windows Server 2012 R2",
          "Windows Vista",
          "Windows 8.1"
        ],
        "x_mitre_data_sources": [
          "DLL monitoring",
          "Windows Registry",
          "Loaded DLLs"
        ]
      }
    },
    {
      "value": "Multilayer Encryption",
      "description": "An adversary performs C2 communications using multiple layers of encryption, typically (but not exclusively) tunneling a custom encryption scheme within a protocol encryption scheme such as HTTPS or SMTPS.\n\nDetection: If malware uses Standard Cryptographic Protocol, SSL/TLS inspection can be used to detect command and control traffic within some encrypted communication channels.Custom Cryptographic Protocol, if malware uses encryption with symmetric keys, it may be possible to obtain the algorithm and key from samples and use them to decode network traffic to detect malware communications signatures.[[Citation: Fidelis DarkComet]]\n\nIn general, analyze network data for uncommon data flows (e.g., a client sending significantly more data than it receives from a server). Processes utilizing the network that do not normally have network communication or have never been seen before are suspicious. Analyze packet contents to detect communications that do not follow the expected protocol behavior for the port that is being used.[[Citation: University of Birmingham C2]]\n\nPlatforms: Windows Server 2003, Windows Server 2008, Windows Server 2012, Windows XP, Windows 7, Windows 8, Windows Server 2003 R2, Windows Server 2008 R2, Windows Server 2012 R2, Windows Vista, Windows 8.1\n\nData Sources: Packet capture, Process use of network, Malware reverse engineering, Process monitoring",
      "meta": {
        "refs": [
          "https://attack.mitre.org/wiki/Technique/T1079",
          "https://www.fidelissecurity.com/sites/default/files/FTA%201018%20looking%20at%20the%20sky%20for%20a%20dark%20comet.pdf",
          "https://insights.sei.cmu.edu/cert/2015/03/the-risks-of-ssl-inspection.html",
          "https://arxiv.org/ftp/arxiv/papers/1408/1408.1136.pdf",
          "http://www.sans.org/reading-room/whitepapers/analyst/finding-hidden-threats-decrypting-ssl-34840"
        ],
        "uuid": "428ca9f8-0e33-442a-be87-f869cb4cf73e",
        "x_mitre_platforms": [
          "Windows Server 2003",
          "Windows Server 2008",
          "Windows Server 2012",
          "Windows XP",
          "Windows 7",
          "Windows 8",
          "Windows Server 2003 R2",
          "Windows Server 2008 R2",
          "Windows Server 2012 R2",
          "Windows Vista",
          "Windows 8.1"
        ],
        "x_mitre_data_sources": [
          "Packet capture",
          "Process use of network",
          "Malware reverse engineering",
          "Process monitoring"
        ]
      }
    },
    {
      "value": "Component Firmware",
      "description": "Some adversaries may employ sophisticated means to compromise computer components and install malicious firmware that will execute adversary code outside of the operating system and main system firmware or BIOS. This technique may be similar to Basic Input/Output System but conducted upon other system components that may not have the same capability or level of integrity checking. Malicious device firmware could provide both a persistent level of access to systems despite potential typical failures to maintain access and hard disk re-images, as well as a way to evade host software-based defenses and integrity checks.\n\nPlatforms: Windows Server 2003, Windows Server 2008, Windows Server 2012, Windows XP, Windows 7, Windows 8, Windows Server 2003 R2, Windows Server 2008 R2, Windows Server 2012 R2, Windows Vista, Windows 8.1",
      "meta": {
        "refs": [
          "https://attack.mitre.org/wiki/Technique/T1109"
        ],
        "uuid": "10d5f3b7-6be6-4da5-9a77-0f1e2bbfcc44",
        "x_mitre_platforms": [
          "Windows Server 2003",
          "Windows Server 2008",
          "Windows Server 2012",
          "Windows XP",
          "Windows 7",
          "Windows 8",
          "Windows Server 2003 R2",
          "Windows Server 2008 R2",
          "Windows Server 2012 R2",
          "Windows Vista",
          "Windows 8.1"
        ]
      }
    },
    {
      "value": "Windows Management Instrumentation Event Subscription",
      "description": "Windows Management Instrumentation (WMI) can be used to install event filters, providers, consumers, and bindings that execute code when a defined event occurs. Adversaries may use the capabilities of WMI to subscribe to an event and execute arbitrary code when that event occurs, providing persistence on a system. Adversaries may attempt to evade detection of this technique by compiling WMI scripts.[[Citation: Dell WMI Persistence]] Examples of events that may be subscribed to are the wall clock time or the computer's uptime.[[Citation: Kazanciyan 2014]] Several threat groups have reportedly used this technique to maintain persistence.[[Citation: Mandiant M-Trends 2015]]\n\nDetection: Monitor WMI event subscription entries, comparing current WMI event subscriptions to known good subscriptions for each host. Tools such as Sysinternals Autoruns may also be used to detect WMI changes that could be attempts at persistence.[[Citation: TechNet Autoruns]]\n\nPlatforms: Windows Server 2003, Windows Server 2008, Windows Server 2012, Windows XP, Windows 7, Windows 8, Windows Server 2003 R2, Windows Server 2008 R2, Windows Server 2012 R2, Windows Vista, Windows 8.1\n\nData Sources: WMI Objects",
      "meta": {
        "refs": [
          "https://attack.mitre.org/wiki/Technique/T1084",
          "https://technet.microsoft.com/en-us/sysinternals/bb963902",
          "https://www.secureworks.com/blog/wmi-persistence",
          "https://www.defcon.org/images/defcon-22/dc-22-presentations/Kazanciyan-Hastings/DEFCON-22-Ryan-Kazanciyan-Matt-Hastings-Investigating-Powershell-Attacks.pdf",
          "https://www2.fireeye.com/rs/fireye/images/rpt-m-trends-2015.pdf"
        ],
        "uuid": "e906ae4d-1d3a-4675-be23-22f7311c0da4",
        "x_mitre_platforms": [
          "Windows Server 2003",
          "Windows Server 2008",
          "Windows Server 2012",
          "Windows XP",
          "Windows 7",
          "Windows 8",
          "Windows Server 2003 R2",
          "Windows Server 2008 R2",
          "Windows Server 2012 R2",
          "Windows Vista",
          "Windows 8.1"
        ],
        "x_mitre_data_sources": [
          "WMI Objects"
        ]
      }
    },
    {
      "value": "Disabling Security Tools",
      "description": "Adversaries may disable security tools to avoid possible detection of their tools and activities. This can take the form of killing security software or event logging processes, deleting Registry keys so that tools do not start at run time, or other methods to interfere with security scanning or event reporting.\n\nDetection: Monitor processes and command-line arguments to see if security tools are killed or stop running. Monitor Registry edits for modifications to services and startup programs that correspond to security tools. Lack of log or event file reporting may be suspicious.\n\nPlatforms: Windows Server 2003, Windows Server 2008, Windows Server 2012, Windows XP, Windows 7, Windows 8, Windows Server 2003 R2, Windows Server 2008 R2, Windows Server 2012 R2, Windows Vista, Windows 8.1\n\nData Sources: API monitoring, Anti-virus, File monitoring, Services, Windows Registry, Process command-line parameters",
      "meta": {
        "refs": [
          "https://attack.mitre.org/wiki/Technique/T1089"
        ],
        "uuid": "2e0dd10b-676d-4964-acd0-8a404c92b044",
        "x_mitre_platforms": [
          "Windows Server 2003",
          "Windows Server 2008",
          "Windows Server 2012",
          "Windows XP",
          "Windows 7",
          "Windows 8",
          "Windows Server 2003 R2",
          "Windows Server 2008 R2",
          "Windows Server 2012 R2",
          "Windows Vista",
          "Windows 8.1"
        ],
        "x_mitre_data_sources": [
          "API monitoring",
          "Anti-virus",
          "File monitoring",
          "Services",
          "Windows Registry",
          "Process command-line parameters"
        ]
      }
    },
    {
      "value": "Peripheral Device Discovery",
      "description": "Adversaries may attempt to gather information about attached peripheral devices and components connected to a computer system. The information may be used to enhance their awareness of the system and network environment or may be used for further actions.\n\nDetection: System and network discovery techniques normally occur throughout an operation as an adversary learns the environment. Data and events should not be viewed in isolation, but as part of a chain of behavior that could lead to other activities based on the information obtained.\n\nMonitor processes and command-line arguments for actions that could be taken to gather system and network information. Remote access tools with built-in features may interact directly with the Windows API to gather information. Information may also be acquired through Windows system management tools such as Windows Management Instrumentation and PowerShell.\n\nPlatforms: Windows Server 2003, Windows Server 2008, Windows Server 2012, Windows XP, Windows 7, Windows 8, Windows Server 2003 R2, Windows Server 2008 R2, Windows Server 2012 R2, Windows Vista, Windows 8.1",
      "meta": {
        "refs": [
          "https://attack.mitre.org/wiki/Technique/T1120"
        ],
        "uuid": "348f1eef-964b-4eb6-bb53-69b3dcb0c643",
        "x_mitre_platforms": [
          "Windows Server 2003",
          "Windows Server 2008",
          "Windows Server 2012",
          "Windows XP",
          "Windows 7",
          "Windows 8",
          "Windows Server 2003 R2",
          "Windows Server 2008 R2",
          "Windows Server 2012 R2",
          "Windows Vista",
          "Windows 8.1"
        ]
      }
    },
    {
      "value": "Data Compressed",
      "description": "An adversary may compress data (e.g., sensitive documents) that is collected prior to exfiltration in order to make it portable and minimize the amount of data sent over the network. The compression is done separately from the exfiltration channel and is performed using a custom program or algorithm, or a more common compression library or utility such as 7zip, RAR, ZIP, or zlib.\n\nDetection: Compression software and compressed files can be detected in many ways. Common utilities that may be present on the system or brought in by an adversary may be detectable through process monitoring and monitoring for command-line arguments for known compression utilities. This may yield a significant amount of benign events, depending on how systems in the environment are typically used.\n\nIf the communications channel is unencrypted, compressed files can be detected in transit during exfiltration with a network intrusion detection or data loss prevention system analyzing file headers.[[Citation: Wikipedia File Header Signatures]]\n\nPlatforms: Windows Server 2003, Windows Server 2008, Windows Server 2012, Windows XP, Windows 7, Windows 8, Windows Server 2003 R2, Windows Server 2008 R2, Windows Server 2012 R2, Windows Vista, Windows 8.1\n\nData Sources: File monitoring, Binary file metadata, Process command-line parameters, Process monitoring",
      "meta": {
        "refs": [
          "https://attack.mitre.org/wiki/Technique/T1002",
          "https://en.wikipedia.org/wiki/List%20of%20file%20signatures"
        ],
        "uuid": "b9f5dbe2-4c55-4fc5-af2e-d42c1d182ec4",
        "x_mitre_platforms": [
          "Windows Server 2003",
          "Windows Server 2008",
          "Windows Server 2012",
          "Windows XP",
          "Windows 7",
          "Windows 8",
          "Windows Server 2003 R2",
          "Windows Server 2008 R2",
          "Windows Server 2012 R2",
          "Windows Vista",
          "Windows 8.1"
        ],
        "x_mitre_data_sources": [
          "File monitoring",
          "Binary file metadata",
          "Process command-line parameters",
          "Process monitoring"
        ]
      }
    },
    {
      "value": "Account Discovery",
      "description": "Adversaries may attempt to get a listing of local system or domain accounts. Example commands that can acquire this information are <code>net user</code>, <code>net group <groupname></code>, and <code>net localgroup <groupname></code> using the Net utility or through use of dsquery. If adversaries attempt to identify the primary user, currently logged in user, or set of users that commonly uses a system, System Owner/User Discovery may apply.\n\nDetection: System and network discovery techniques normally occur throughout an operation as an adversary learns the environment. Data and events should not be viewed in isolation, but as part of a chain of behavior that could lead to other activities, such as Windows Management Instrumentation and PowerShell.\n\nPlatforms: Windows Server 2003, Windows Server 2008, Windows Server 2012, Windows XP, Windows 7, Windows 8, Windows Server 2003 R2, Windows Server 2008 R2, Windows Server 2012 R2, Windows Vista, Windows 8.1\n\nData Sources: API monitoring, Process command-line parameters, Process monitoring",
      "meta": {
        "refs": [
          "https://attack.mitre.org/wiki/Technique/T1087"
        ],
        "uuid": "72b74d71-8169-42aa-92e0-e7b04b9f5a08",
        "x_mitre_platforms": [
          "Windows Server 2003",
          "Windows Server 2008",
          "Windows Server 2012",
          "Windows XP",
          "Windows 7",
          "Windows 8",
          "Windows Server 2003 R2",
          "Windows Server 2008 R2",
          "Windows Server 2012 R2",
          "Windows Vista",
          "Windows 8.1"
        ],
        "x_mitre_data_sources": [
          "API monitoring",
          "Process command-line parameters",
          "Process monitoring"
        ]
      }
    },
    {
      "value": "Pass the Hash",
      "description": "Pass the hash (PtH)[[Citation: Aorato PTH]] is a method of authenticating as a user without having access to the user's cleartext password. This method bypasses standard authentication steps that require a cleartext password, moving directly into the portion of the authentication that uses the password hash. In this technique, valid password hashes for the account being used are captured using a [[Credential Access]] technique. Captured hashes are used with PtH to authenticate as that user. Once authenticated, PtH may be used to perform actions on local or remote systems. \n\nWindows 7 and higher with KB2871997 require valid domain user credentials or RID 500 administrator hashes.[[Citation: NSA Spotting]]\n\nDetection: Audit all logon and credential use events and review for discrepancies. Unusual remote logins that correlate with other suspicious activity (such as writing and executing binaries) may indicate malicious activity. NTLM LogonType 3 authentications that are not associated to a domain login and are not anonymous logins are suspicious.\n\nPlatforms: Windows Server 2003, Windows Server 2008, Windows Server 2012, Windows XP, Windows 7, Windows 8, Windows Server 2003 R2, Windows Server 2008 R2, Windows Server 2012 R2, Windows Vista, Windows 8.1\n\nData Sources: Authentication logs",
      "meta": {
        "refs": [
          "https://attack.mitre.org/wiki/Technique/T1075",
          "http://www.nsa.gov/ia/%20files/app/spotting%20the%20adversary%20with%20windows%20event%20log%20monitoring.pdf",
          "http://www.aorato.com/labs/pass-the-hash/"
        ],
        "uuid": "c23b740b-a42b-47a1-aec2-9d48ddd547ff",
        "x_mitre_platforms": [
          "Windows Server 2003",
          "Windows Server 2008",
          "Windows Server 2012",
          "Windows XP",
          "Windows 7",
          "Windows 8",
          "Windows Server 2003 R2",
          "Windows Server 2008 R2",
          "Windows Server 2012 R2",
          "Windows Vista",
          "Windows 8.1"
        ],
        "x_mitre_data_sources": [
          "Authentication logs"
        ]
      }
    },
    {
      "value": "Timestomp",
      "description": "Timestomping is a technique that modifies the timestamps of a file (the modify, access, create, and change times), often to mimic files that are in the same folder. This is done, for example, on files that have been modified or created by the adversary so that they do not appear conspicuous to forensic investigators or file analysis tools. Timestomping may be used along with file name Masquerading to hide malware and tools.[[Citation: WindowsIR Anti-Forensic Techniques]]\n\nDetection: Forensic techniques exist to detect aspects of files that have had their timestamps modified.[[Citation: WindowsIR Anti-Forensic Techniques]] It may be possible to detect timestomping using file modification monitoring that collects information on file handle opens and can compare timestamp values.\n\nPlatforms: Windows Server 2003, Windows Server 2008, Windows Server 2012, Windows XP, Windows 7, Windows 8, Windows Server 2003 R2, Windows Server 2008 R2, Windows Server 2012 R2, Windows Vista, Windows 8.1, Linux\n\nData Sources: File monitoring, Process monitoring, Process command-line parameters",
      "meta": {
        "refs": [
          "https://attack.mitre.org/wiki/Technique/T1099",
          "http://windowsir.blogspot.com/2013/07/howto-determinedetect-use-of-anti.html"
        ],
        "uuid": "128c55d3-aeba-469f-bd3e-c8996ab4112a",
        "x_mitre_platforms": [
          "Windows Server 2003",
          "Windows Server 2008",
          "Windows Server 2012",
          "Windows XP",
          "Windows 7",
          "Windows 8",
          "Windows Server 2003 R2",
          "Windows Server 2008 R2",
          "Windows Server 2012 R2",
          "Windows Vista",
          "Windows 8.1",
          "Linux"
        ],
        "x_mitre_data_sources": [
          "File monitoring",
          "Process monitoring",
          "Process command-line parameters"
        ]
      }
    },
    {
      "value": "Brute Force",
      "description": "Adversaries may use brute force techniques to attempt access to accounts when passwords are unknown or when password hashes are obtained.\n\nCredential Dumping to obtain password hashes may only get an adversary so far when Pass the Hash is not an option. Techniques to systematically guess the passwords used to compute hashes are available, or the adversary may use a pre-computed rainbow table. Cracking hashes is usually done on adversary-controlled systems outside of the target network.Legitimate Credentials. If authentication failures are high, then there may be a brute force attempt to gain access to a system using legitimate credentials.\n\nPlatforms: Windows Server 2003, Windows Server 2008, Windows Server 2012, Windows XP, Windows 7, Windows 8, Windows Server 2003 R2, Windows Server 2008 R2, Windows Server 2012 R2, Windows Vista, Windows 8.1\n\nData Sources: Authentication logs",
      "meta": {
        "refs": [
          "https://attack.mitre.org/wiki/Technique/T1110",
          "https://en.wikipedia.org/wiki/Password%20cracking",
          "http://www.cylance.com/assets/Cleaver/Cylance%20Operation%20Cleaver%20Report.pdf"
        ],
        "uuid": "a93494bb-4b80-4ea1-8695-3236a49916fd",
        "x_mitre_platforms": [
          "Windows Server 2003",
          "Windows Server 2008",
          "Windows Server 2012",
          "Windows XP",
          "Windows 7",
          "Windows 8",
          "Windows Server 2003 R2",
          "Windows Server 2008 R2",
          "Windows Server 2012 R2",
          "Windows Vista",
          "Windows 8.1"
        ],
        "x_mitre_data_sources": [
          "Authentication logs"
        ]
      }
    },
    {
      "value": "Modify Registry",
      "description": "Adversaries may interact with the Windows Registry to hide configuration information within Registry keys, remove information as part of cleaning up, or as part of other techniques to aid in Reg may be used for local or remote Registry modification.Legitimate Credentials are required, along with access to the remote system's Windows Admin Shares for RPC communication.\n\nDetection: Modifications to the Registry are normal and occur throughout typical use of the Windows operating system. Changes to Registry entries that load software on Windows startup that do not correlate with known software, patch cycles, etc., are suspicious, as are additions or changes to files within the startup folder. Changes could also include new services and modification of existing binary paths to point to malicious files. If a change to a service-related entry occurs, then it will likely be followed by a local or remote service start or restart to execute the file.\n\nMonitor processes and command-line arguments for actions that could be taken to change or delete information in the Registry. Remote access tools with built-in features may interact directly with the Windows API to gather information. Information may also be acquired through Windows system management tools such as Windows Management Instrumentation and PowerShell, which may require additional logging features to be configured in the operating system to collect necessary information for analysis.\n\nPlatforms: Windows Server 2003, Windows Server 2008, Windows Server 2012, Windows XP, Windows 7, Windows 8, Windows Server 2003 R2, Windows Server 2008 R2, Windows Server 2012 R2, Windows Vista, Windows 8.1\n\nData Sources: Windows Registry, File monitoring, Process monitoring, Process command-line parameters",
      "meta": {
        "refs": [
          "https://attack.mitre.org/wiki/Technique/T1112",
          "https://technet.microsoft.com/en-us/library/cc732643.aspx",
          "https://technet.microsoft.com/en-us/library/cc754820.aspx"
        ],
        "uuid": "57340c81-c025-4189-8fa0-fc7ede51bae4",
        "x_mitre_platforms": [
          "Windows Server 2003",
          "Windows Server 2008",
          "Windows Server 2012",
          "Windows XP",
          "Windows 7",
          "Windows 8",
          "Windows Server 2003 R2",
          "Windows Server 2008 R2",
          "Windows Server 2012 R2",
          "Windows Vista",
          "Windows 8.1"
        ],
        "x_mitre_data_sources": [
          "Windows Registry",
          "File monitoring",
          "Process monitoring",
          "Process command-line parameters"
        ]
      }
    },
    {
      "value": "Screen Capture",
      "description": "Adversaries may attempt to take screen captures of the desktop to gather information over the course of an operation. Screen capturing functionality may be included as a feature of a remote access tool used in post-compromise operations.\n\nDetection: Monitoring for screen capture behavior will depend on the method used to obtain data from the operating system and write output files. Detection methods could include collecting information from unusual processes using API calls used to obtain image data, and monitoring for image files written to disk. The sensor data may need to be correlated with other events to identify malicious activity, depending on the legitimacy of this behavior within a given network environment.\n\nPlatforms: Windows Server 2003, Windows Server 2008, Windows Server 2012, Windows XP, Windows 7, Windows 8, Windows Server 2003 R2, Windows Server 2008 R2, Windows Server 2012 R2, Windows Vista, Windows 8.1\n\nData Sources: API monitoring, Process monitoring, File monitoring",
      "meta": {
        "refs": [
          "https://attack.mitre.org/wiki/Technique/T1113"
        ],
        "uuid": "0259baeb-9f63-4c69-bf10-eb038c390688",
        "x_mitre_platforms": [
          "Windows Server 2003",
          "Windows Server 2008",
          "Windows Server 2012",
          "Windows XP",
          "Windows 7",
          "Windows 8",
          "Windows Server 2003 R2",
          "Windows Server 2008 R2",
          "Windows Server 2012 R2",
          "Windows Vista",
          "Windows 8.1"
        ],
        "x_mitre_data_sources": [
          "API monitoring",
          "Process monitoring",
          "File monitoring"
        ]
      }
    },
    {
      "value": "Indicator Removal from Tools",
      "description": "If a malicious tool is detected and quarantined or otherwise curtailed, an adversary may be able to determine why the malicious tool was detected (the indicator), modify the tool by removing the indicator, and use the updated version that is no longer detected by the target's defensive systems or subsequent targets that may use similar systems.\n\nA good example of this is when malware is detected with a file signature and quarantined by anti-virus software. An adversary who can determine that the malware was quarantined because of its file signature may use Software Packing or otherwise modify the file so it has a different signature, and then re-use the malware.\n\nDetection: The first detection of a malicious tool may trigger an anti-virus or other security tool alert. Similar events may also occur at the boundary through network IDS, email scanning appliance, etc. The initial detection should be treated as an indication of a potentially more invasive intrusion. The alerting system should be thoroughly investigated beyond that initial alert for activity that was not detected. Adversaries may continue with an operation, assuming that individual events like an anti-virus detect will not be investigated or that an analyst will not be able to conclusively link that event to other activity occurring on the network.\n\nPlatforms: Windows Server 2003, Windows Server 2008, Windows Server 2012, Windows XP, Windows 7, Windows 8, Windows Server 2003 R2, Windows Server 2008 R2, Windows Server 2012 R2, Windows Vista, Windows 8.1\n\nData Sources: Process use of network, Anti-virus, Binary file metadata, Process command-line parameters, Process monitoring",
      "meta": {
        "refs": [
          "https://attack.mitre.org/wiki/Technique/T1066"
        ],
        "uuid": "00d0b012-8a03-410e-95de-5826bf542de6",
        "x_mitre_platforms": [
          "Windows Server 2003",
          "Windows Server 2008",
          "Windows Server 2012",
          "Windows XP",
          "Windows 7",
          "Windows 8",
          "Windows Server 2003 R2",
          "Windows Server 2008 R2",
          "Windows Server 2012 R2",
          "Windows Vista",
          "Windows 8.1"
        ],
        "x_mitre_data_sources": [
          "Process use of network",
          "Anti-virus",
          "Binary file metadata",
          "Process command-line parameters",
          "Process monitoring"
        ]
      }
    },
    {
      "value": "Change Default File Association",
      "description": "When a file is opened, the default program used to open the file (also called the file association or handler) is checked. File association selections are stored in the Windows Registry and can be edited by users, administrators, or programs that have Registry access.[[Citation: Microsoft Change Default Programs]][[Citation: Microsoft File Handlers]] Applications can modify the file association for a given file extension to call an arbitrary program when a file with the given extension is opened.\n\nDetection: Collect and analyze changes to Registry keys that associate file extensions to default applications for execution and correlate with unknown process launch activity or unusual file types for that process. \n\nUser file association preferences are stored under <code> [HKEY_CURRENT_USER]\\Software\\Microsoft\\Windows\\CurrentVersion\\Explorer\\FileExts</code> and override associations configured under <code>[HKEY_CLASSES_ROOT]</code>. Changes to a user's preference will occur under this entry's subkeys.\n\nAlso look for abnormal process call trees for execution of other commands that could relate to [[Discovery]] actions or other techniques.\n\nPlatforms: Windows Server 2003, Windows Server 2008, Windows Server 2012, Windows XP, Windows 7, Windows 8, Windows Server 2003 R2, Windows Server 2008 R2, Windows Server 2012 R2, Windows Vista, Windows 8.1\n\nData Sources: Windows Registry, Process command-line parameters, Process monitoring\n\nContributors: Stefan Kanthak",
      "meta": {
        "refs": [
          "https://attack.mitre.org/wiki/Technique/T1042",
          "https://support.microsoft.com/en-us/help/18539/windows-7-change-default-programs",
          "http://msdn.microsoft.com/en-us/library/bb166549.aspx"
        ],
        "uuid": "68c96494-1a50-403e-8844-69a6af278c68",
        "x_mitre_platforms": [
          "Windows Server 2003",
          "Windows Server 2008",
          "Windows Server 2012",
          "Windows XP",
          "Windows 7",
          "Windows 8",
          "Windows Server 2003 R2",
          "Windows Server 2008 R2",
          "Windows Server 2012 R2",
          "Windows Vista",
          "Windows 8.1"
        ],
        "x_mitre_data_sources": [
          "Windows Registry",
          "Process command-line parameters",
          "Process monitoring"
        ]
      }
    },
    {
      "value": "Email Collection",
      "description": "Adversaries may target user email to collect sensitive information from a target.\n\nFiles containing email data can be acquired from a user's system, such as Outlook storage or cache files .pst and .ost.\n\nAdversaries may leverage a user's credentials and interact directly with the Exchange server to acquire information from within a network.\n\nSome adversaries may acquire user credentials and access externally facing webmail applications, such as Outlook Web Access.\n\nDetection: There are likely a variety of ways an adversary could collect email from a target, each with a different mechanism for detection.\n\nFile access of local system email files for Windows Management Instrumentation and PowerShell.\n\nPlatforms: Windows Server 2003, Windows Server 2008, Windows Server 2012, Windows XP, Windows 7, Windows 8, Windows Server 2003 R2, Windows Server 2008 R2, Windows Server 2012 R2, Windows Vista, Windows 8.1\n\nData Sources: Authentication logs, File monitoring, Process monitoring, Process use of network",
      "meta": {
        "refs": [
          "https://attack.mitre.org/wiki/Technique/T1114"
        ],
        "uuid": "1608f3e1-598a-42f4-a01a-2e252e81728f",
        "x_mitre_platforms": [
          "Windows Server 2003",
          "Windows Server 2008",
          "Windows Server 2012",
          "Windows XP",
          "Windows 7",
          "Windows 8",
          "Windows Server 2003 R2",
          "Windows Server 2008 R2",
          "Windows Server 2012 R2",
          "Windows Vista",
          "Windows 8.1"
        ],
        "x_mitre_data_sources": [
          "Authentication logs",
          "File monitoring",
          "Process monitoring",
          "Process use of network"
        ]
      }
    },
    {
      "value": "System Information Discovery",
      "description": "An adversary may attempt to get detailed information about the operating system and hardware, including version, patches, hotfixes, service packs, and architecture.\nExample commands and utilities that obtain this information include <code>ver</code>, Systeminfo, and <code>dir</code> within cmd for identifying information based on present files and directories.\n\nDetection: System and network discovery techniques normally occur throughout an operation as an adversary learns the environment. Data and events should not be viewed in isolation, but as part of a chain of behavior that could lead to other activities based on the information obtained.\n\nMonitor processes and command-line arguments for actions that could be taken to gather system and network information. Remote access tools with built-in features may interact directly with the Windows API to gather information. Information may also be acquired through Windows system management tools such as Windows Management Instrumentation and PowerShell.\n\nPlatforms: Windows Server 2003, Windows Server 2008, Windows Server 2012, Windows XP, Windows 7, Windows 8, Windows Server 2003 R2, Windows Server 2008 R2, Windows Server 2012 R2, Windows Vista, Windows 8.1, Linux\n\nData Sources: Process command-line parameters, Process monitoring",
      "meta": {
        "refs": [
          "https://attack.mitre.org/wiki/Technique/T1082"
        ],
        "uuid": "354a7f88-63fb-41b5-a801-ce3b377b36f1",
        "x_mitre_platforms": [
          "Windows Server 2003",
          "Windows Server 2008",
          "Windows Server 2012",
          "Windows XP",
          "Windows 7",
          "Windows 8",
          "Windows Server 2003 R2",
          "Windows Server 2008 R2",
          "Windows Server 2012 R2",
          "Windows Vista",
          "Windows 8.1",
          "Linux"
        ],
        "x_mitre_data_sources": [
          "Process command-line parameters",
          "Process monitoring"
        ]
      }
    },
    {
      "value": "Local Network Connections Discovery",
      "description": "Adversaries may attempt to get a listing of network connections to or from the compromised system.\nUtilities and commands that acquire this information include netstat, \"net use,\" and \"net session\" with Net.\n\nDetection: System and network discovery techniques normally occur throughout an operation as an adversary learns the environment. Data and events should not be viewed in isolation, but as part of a chain of behavior that could lead to other activities, such as Windows Management Instrumentation and PowerShell.\n\nPlatforms: Windows Server 2003, Windows Server 2008, Windows Server 2012, Windows XP, Windows 7, Windows 8, Windows Server 2003 R2, Windows Server 2008 R2, Windows Server 2012 R2, Windows Vista, Windows 8.1\n\nData Sources: Process command-line parameters, Process monitoring",
      "meta": {
        "refs": [
          "https://attack.mitre.org/wiki/Technique/T1049"
        ],
        "uuid": "7e150503-88e7-4861-866b-ff1ac82c4475",
        "x_mitre_platforms": [
          "Windows Server 2003",
          "Windows Server 2008",
          "Windows Server 2012",
          "Windows XP",
          "Windows 7",
          "Windows 8",
          "Windows Server 2003 R2",
          "Windows Server 2008 R2",
          "Windows Server 2012 R2",
          "Windows Vista",
          "Windows 8.1"
        ],
        "x_mitre_data_sources": [
          "Process command-line parameters",
          "Process monitoring"
        ]
      }
    },
    {
      "value": "Two-Factor Authentication Interception",
      "description": "Use of two- or multifactor authentication is recommended and provides a higher level of security than user names and passwords alone, but organizations should be aware of techniques that could be used to intercept and bypass these security mechanisms. Adversaries may target authentication mechanisms, such as smart cards, to gain access to systems, services, and network resources.\n\nIf a smart card is used for two-factor authentication (2FA), then a keylogger will need to be used to obtain the password associated with a smart card during normal use. With both an inserted card and access to the smart card password, an adversary can connect to a network resource using the infected system to proxy the authentication with the inserted hardware token.[[Citation: Mandiant M Trends 2011]]\n\nOther methods of 2FA may be intercepted and used by an adversary to authenticate. It is common for one-time codes to be sent via out-of-band communications (email, SMS). If the device and/or service is not secured, then it may be vulnerable to interception. Although primarily focused on by cyber criminals, these authentication mechanisms have been targeted by advanced actors.[[Citation: Operation Emmental]]\n\nOther hardware tokens, such as RSA SecurID, require the adversary to have access to the physical device or the seed and algorithm in addition to the corresponding credentials.\n\nDetection: Detecting use of proxied smart card connections by an adversary may be difficult because it requires the token to be inserted into a system; thus it is more likely to be in use by a legitimate user and blend in with other network behavior.\n\nPlatforms: Windows Server 2003, Windows Server 2008, Windows Server 2012, Windows XP, Windows 7, Windows 8, Windows Server 2003 R2, Windows Server 2008 R2, Windows Server 2012 R2, Windows Vista, Windows 8.1\n\nContributors: John Lambert, Microsoft Threat Intelligence Center",
      "meta": {
        "refs": [
          "https://attack.mitre.org/wiki/Technique/T1111",
          "https://dl.mandiant.com/EE/assets/PDF%20MTrends%202011.pdf",
          "http://www.trendmicro.com/cloud-content/us/pdfs/security-intelligence/white-papers/wp-finding-holes-operation-emmental.pdf"
        ],
        "uuid": "dd43c543-bb85-4a6f-aa6e-160d90d06a49",
        "x_mitre_platforms": [
          "Windows Server 2003",
          "Windows Server 2008",
          "Windows Server 2012",
          "Windows XP",
          "Windows 7",
          "Windows 8",
          "Windows Server 2003 R2",
          "Windows Server 2008 R2",
          "Windows Server 2012 R2",
          "Windows Vista",
          "Windows 8.1"
        ]
      }
    },
    {
      "value": "Execution through API",
      "description": "Adversary tools may directly use the Windows application programming interface (API) to execute binaries. Functions such as the Windows API CreateProcess will allow programs and scripts to start other processes with proper path and argument parameters.[[Citation: Microsoft CreateProcess]]\n\nAdditional Windows API calls that can be used to execute binaries include:[[Citation: Kanthak Verifier]]\n\n*CreateProcessA() and CreateProcessW(),\n*CreateProcessAsUserA() and CreateProcessAsUserW(),\n*CreateProcessInternalA() and CreateProcessInternalW(),\n*CreateProcessWithLogonW(), CreateProcessWithTokenW(),\n*LoadLibraryA() and LoadLibraryW(),\n*LoadLibraryExA() and LoadLibraryExW(),\n*LoadModule(),\n*LoadPackagedLibrary(),\n*WinExec(),\n*ShellExecuteA() and ShellExecuteW(),\n*ShellExecuteExA() and ShellExecuteExW()\n\nDetection: Monitoring API calls may generate a significant amount of data and may not be directly useful for defense unless collected under specific circumstances, since benign use of Windows API functions such as CreateProcess are common and difficult to distinguish from malicious behavior. Correlation of other events with behavior surrounding API function calls using API monitoring will provide additional context to an event that may assist in determining if it is due to malicious behavior. Correlation of activity by process lineage by process ID may be sufficient.\n\nPlatforms: Windows Server 2003, Windows Server 2008, Windows Server 2012, Windows XP, Windows 7, Windows 8, Windows Server 2003 R2, Windows Server 2008 R2, Windows Server 2012 R2, Windows Vista, Windows 8.1\n\nData Sources: API monitoring, Process monitoring\n\nContributors: Stefan Kanthak",
      "meta": {
        "refs": [
          "https://attack.mitre.org/wiki/Technique/T1106",
          "http://msdn.microsoft.com/en-us/library/ms682425",
          "https://skanthak.homepage.t-online.de/verifier.html"
        ],
        "uuid": "391d824f-0ef1-47a0-b0ee-c59a75e27670",
        "x_mitre_platforms": [
          "Windows Server 2003",
          "Windows Server 2008",
          "Windows Server 2012",
          "Windows XP",
          "Windows 7",
          "Windows 8",
          "Windows Server 2003 R2",
          "Windows Server 2008 R2",
          "Windows Server 2012 R2",
          "Windows Vista",
          "Windows 8.1"
        ],
        "x_mitre_data_sources": [
          "API monitoring",
          "Process monitoring"
        ]
      }
    },
    {
      "value": "Component Object Model Hijacking",
      "description": "The Microsoft Component Object Model (COM) is a system within Windows to enable interaction between software components through the operating system.[[Citation: Microsoft Component Object Model]] Adversaries can use this system to insert malicious code that can be executed in place of legitimate software through hijacking the COM references and relationships as a means for persistence. Hijacking a COM object requires a change in the Windows Registry to replace a reference to a legitimate system component which may cause that component to not work when executed. When that system component is executed through normal system operation the adversary's code will be executed instead.[[Citation: GDATA COM Hijacking]] An adversary is likely to hijack objects that are used frequently enough to maintain a consistent level of persistence, but are unlikely to break noticeable functionality within the system as to avoid system instability that could lead to detection.\n\nDetection: There are opportunities to detect COM hijacking by searching for Registry references that have been replaced and through Registry operations replacing know binary paths with unknown paths. Even though some third party applications define user COM objects, the presence of objects within <code>HKEY_CURRENT_USER\\Software\\Classes\\CLSID\\</code> may be anomalous and should be investigated since user objects will be loaded prior to machine objects in <code>HKEY_LOCAL_MACHINE\\SOFTWARE\\Classes\\CLSID\\</code>.[[Citation: Endgame COM Hijacking]] Registry entries for existing COM objects may change infrequently. When an entry with a known good path and binary is replaced or changed to an unusual value to point to an unknown binary in a new location, then it may indicate suspicious behavior and should be investigated. Likewise, if software DLL loads are collected and analyzed, any unusual DLL load that can be correlated with a COM object Registry modification may indicate COM hijacking has been performed.\n\nPlatforms: Windows Server 2003, Windows Server 2008, Windows Server 2012, Windows XP, Windows 7, Windows 8, Windows Server 2003 R2, Windows Server 2008 R2, Windows Server 2012 R2, Windows Vista, Windows 8.1\n\nData Sources: Windows Registry, DLL monitoring, Loaded DLLs\n\nContributors: ENDGAME",
      "meta": {
        "refs": [
          "https://attack.mitre.org/wiki/Technique/T1122",
          "https://msdn.microsoft.com/library/ms694363.aspx",
          "https://www.endgame.com/blog/how-hunt-detecting-persistence-evasion-com",
          "https://blog.gdatasoftware.com/2014/10/23941-com-object-hijacking-the-discreet-way-of-persistence"
        ],
        "uuid": "9b52fca7-1a36-4da0-b62d-da5bd83b4d69",
        "x_mitre_platforms": [
          "Windows Server 2003",
          "Windows Server 2008",
          "Windows Server 2012",
          "Windows XP",
          "Windows 7",
          "Windows 8",
          "Windows Server 2003 R2",
          "Windows Server 2008 R2",
          "Windows Server 2012 R2",
          "Windows Vista",
          "Windows 8.1"
        ],
        "x_mitre_data_sources": [
          "Windows Registry",
          "DLL monitoring",
          "Loaded DLLs"
        ]
      }
    },
    {
      "value": "Clipboard Data",
      "description": "Adversaries may collect data stored in the Windows clipboard from users copying information within or between applications. \n\nApplications can access clipboard data by using the Windows API.[[Citation: MSDN Clipboard]]\n\nDetection: Access to the clipboard is a legitimate function of many applications on a Windows system. If an organization chooses to monitor for this behavior, then the data will likely need to be correlated against other suspicious or non-user-driven activity.\n\nPlatforms: Windows Server 2003, Windows Server 2008, Windows Server 2012, Windows XP, Windows 7, Windows 8, Windows Server 2003 R2, Windows Server 2008 R2, Windows Server 2012 R2, Windows Vista, Windows 8.1\n\nData Sources: API monitoring",
      "meta": {
        "refs": [
          "https://attack.mitre.org/wiki/Technique/T1115",
          "https://msdn.microsoft.com/en-us/library/ms649012"
        ],
        "uuid": "30973a08-aed9-4edf-8604-9084ce1b5c4f",
        "x_mitre_platforms": [
          "Windows Server 2003",
          "Windows Server 2008",
          "Windows Server 2012",
          "Windows XP",
          "Windows 7",
          "Windows 8",
          "Windows Server 2003 R2",
          "Windows Server 2008 R2",
          "Windows Server 2012 R2",
          "Windows Vista",
          "Windows 8.1"
        ],
        "x_mitre_data_sources": [
          "API monitoring"
        ]
      }
    },
    {
      "value": "InstallUtil",
      "description": "InstallUtil is a command-line utility that allows for installation and uninstallation of resources by executing specific installer components specified in .NET binaries.[[Citation: MSDN InstallUtil]] InstallUtil is located in the .NET directory on a Windows system: <code>C:\\Windows\\Microsoft.NET\\Framework\\v<version>\\InstallUtil.exe</code>.InstallUtil.exe is digitally signed by Microsoft.\n\nAdversaries may use InstallUtil to proxy execution of code through a trusted Windows utility. InstallUtil may also be used to bypass process whitelisting through use of attributes within the binary that execute the class decorated with the attribute <code>[System.ComponentModel.RunInstaller(true)]</code>.[[Citation: SubTee InstallUtil Whitelist Bypass]]\n\nDetection: Use process monitoring to monitor the execution and arguments of InstallUtil.exe. Compare recent invocations of InstallUtil.exe with prior history of known good arguments and executed binaries to determine anomalous and potentially adversarial activity. Command arguments used before and after the InstallUtil.exe invocation may also be useful in determining the origin and purpose of the binary being executed.\n\nPlatforms: Windows Server 2003, Windows Server 2008, Windows Server 2012, Windows XP, Windows 7, Windows 8, Windows Server 2003 R2, Windows Server 2008 R2, Windows Server 2012 R2, Windows Vista, Windows 8.1\n\nData Sources: Process monitoring, Process command-line parameters\n\nContributors: Casey Smith",
      "meta": {
        "refs": [
          "https://attack.mitre.org/wiki/Technique/T1118",
          "https://msdn.microsoft.com/en-us/library/50614e95.aspx",
          "http://subt0x10.blogspot.com/2015/08/application-whitelisting-bypasses-101.html"
        ],
        "uuid": "f792d02f-813d-402b-86a5-ab98cb391d3b",
        "x_mitre_platforms": [
          "Windows Server 2003",
          "Windows Server 2008",
          "Windows Server 2012",
          "Windows XP",
          "Windows 7",
          "Windows 8",
          "Windows Server 2003 R2",
          "Windows Server 2008 R2",
          "Windows Server 2012 R2",
          "Windows Vista",
          "Windows 8.1"
        ],
        "x_mitre_data_sources": [
          "Process monitoring",
          "Process command-line parameters"
        ]
      }
    },
    {
      "value": "Data Obfuscation",
      "description": "Command and control (C2) communications are hidden (but not necessarily encrypted) in an attempt to make the content more difficult to discover or decipher and to make the communication less conspicuous and hide commands from being seen. This encompasses many methods, such as adding junk data to protocol traffic, using steganography, commingling legitimate traffic with C2 communications traffic, or using a non-standard data encoding system, such as a modified Base64 encoding for the message body of an HTTP request.\n\nDetection: Analyze network data for uncommon data flows (e.g., a client sending significantly more data than it receives from a server). Processes utilizing the network that do not normally have network communication or have never been seen before are suspicious. Analyze packet contents to detect communications that do not follow the expected protocol behavior for the port that is being used.[[Citation: University of Birmingham C2]]\n\nPlatforms: Windows Server 2003, Windows Server 2008, Windows Server 2012, Windows XP, Windows 7, Windows 8, Windows Server 2003 R2, Windows Server 2008 R2, Windows Server 2012 R2, Windows Vista, Windows 8.1\n\nData Sources: Packet capture, Process use of network, Process monitoring, Network protocol analysis",
      "meta": {
        "refs": [
          "https://attack.mitre.org/wiki/Technique/T1001",
          "https://arxiv.org/ftp/arxiv/papers/1408/1408.1136.pdf"
        ],
        "uuid": "ad255bfe-a9e6-4b52-a258-8d3462abe842",
        "x_mitre_platforms": [
          "Windows Server 2003",
          "Windows Server 2008",
          "Windows Server 2012",
          "Windows XP",
          "Windows 7",
          "Windows 8",
          "Windows Server 2003 R2",
          "Windows Server 2008 R2",
          "Windows Server 2012 R2",
          "Windows Vista",
          "Windows 8.1"
        ],
        "x_mitre_data_sources": [
          "Packet capture",
          "Process use of network",
          "Process monitoring",
          "Network protocol analysis"
        ]
      }
    },
    {
      "value": "Shortcut Modification",
      "description": "Shortcuts or symbolic links are ways of referencing other files or programs that will be opened or executed when the shortcut is clicked or executed by a system startup process. Adversaries could use shortcuts to execute their tools for persistence. They may create a new shortcut as a means of indirection that may use Masquerading to look like a legitimate program. Adversaries could also edit the target path or entirely replace an existing shortcut so their tools will be executed instead of the intended legitimate program.\n\nDetection: Since a shortcut's target path likely will not change, modifications to shortcut files that do not correlate with known software changes, patches, removal, etc., may be suspicious. Analysis should attempt to relate shortcut file change or creation events to other potentially suspicious events based on known adversary behavior such as process launches of unknown executables that make network connections.\n\nPlatforms: Windows Server 2003, Windows Server 2008, Windows Server 2012, Windows XP, Windows 7, Windows 8, Windows Server 2003 R2, Windows Server 2008 R2, Windows Server 2012 R2, Windows Vista, Windows 8.1\n\nData Sources: File monitoring, Process command-line parameters, Process monitoring",
      "meta": {
        "refs": [
          "https://attack.mitre.org/wiki/Technique/T1023"
        ],
        "uuid": "970cdb5c-02fb-4c38-b17e-d6327cf3c810",
        "x_mitre_platforms": [
          "Windows Server 2003",
          "Windows Server 2008",
          "Windows Server 2012",
          "Windows XP",
          "Windows 7",
          "Windows 8",
          "Windows Server 2003 R2",
          "Windows Server 2008 R2",
          "Windows Server 2012 R2",
          "Windows Vista",
          "Windows 8.1"
        ],
        "x_mitre_data_sources": [
          "File monitoring",
          "Process command-line parameters",
          "Process monitoring"
        ]
      }
    },
    {
      "value": "Obfuscated Files or Information",
      "description": "Adversaries may attempt to make an executable or file difficult to discover or analyze by encrypting, encoding, or otherwise obfuscating its contents on the system.\n\nDetection: Detection of file obfuscation is difficult unless artifacts are left behind by the obfuscation process that are uniquely detectable with a signature. If detection of the obfuscation itself is not possible, it may be possible to detect the malicious activity that caused the obfuscated file (for example, the method that was used to write, read, or modify the file on the file system).\n\nPlatforms: Windows Server 2003, Windows Server 2008, Windows Server 2012, Windows XP, Windows 7, Windows 8, Windows Server 2003 R2, Windows Server 2008 R2, Windows Server 2012 R2, Windows Vista, Windows 8.1\n\nData Sources: Network protocol analysis, Process use of network, Binary file metadata, File monitoring, Malware reverse engineering",
      "meta": {
        "refs": [
          "https://attack.mitre.org/wiki/Technique/T1027"
        ],
        "uuid": "b3d682b6-98f2-4fb0-aa3b-b4df007ca70a",
        "x_mitre_platforms": [
          "Windows Server 2003",
          "Windows Server 2008",
          "Windows Server 2012",
          "Windows XP",
          "Windows 7",
          "Windows 8",
          "Windows Server 2003 R2",
          "Windows Server 2008 R2",
          "Windows Server 2012 R2",
          "Windows Vista",
          "Windows 8.1"
        ],
        "x_mitre_data_sources": [
          "Network protocol analysis",
          "Process use of network",
          "Binary file metadata",
          "File monitoring",
          "Malware reverse engineering"
        ]
      }
    },
    {
      "value": "Video Capture",
      "description": "An adversary can leverage a computer's peripheral devices (e.g., integrated cameras or webcams) or applications (e.g., video call services) to capture video recordings for the purpose of gathering information. Images may also be captured from devices or applications, potentially in specified intervals, in lieu of video files.\n\nMalware or scripts may be used to interact with the devices through an available API provided by the operating system or an application to capture video or images. Video or image files may be written to disk and exfiltrated later. This technique differs from Screen Capture due to use of specific devices or applications for video recording rather than capturing the victim's screen.\n\nDetection: Detection of this technique may be difficult due to the various APIs that may be used. Telemetry data regarding API use may not be useful depending on how a system is normally used, but may provide context to other potentially malicious activity occurring on a system.\n\nBehavior that could indicate technique use include an unknown or unusual process accessing APIs associated with devices or software that interact with the video camera, recording devices, or recording software, and a process periodically writing files to disk that contain video or camera image data.\n\nPlatforms: Windows Server 2003, Windows Server 2008, Windows Server 2012, Windows XP, Windows 7, Windows 8, Windows Server 2003 R2, Windows Server 2008 R2, Windows Server 2012 R2, Windows Vista, Windows 8.1\n\nData Sources: Process monitoring, File monitoring, API monitoring",
      "meta": {
        "refs": [
          "https://attack.mitre.org/wiki/Technique/T1125"
        ],
        "uuid": "6faf650d-bf31-4eb4-802d-1000cf38efaf",
        "x_mitre_platforms": [
          "Windows Server 2003",
          "Windows Server 2008",
          "Windows Server 2012",
          "Windows XP",
          "Windows 7",
          "Windows 8",
          "Windows Server 2003 R2",
          "Windows Server 2008 R2",
          "Windows Server 2012 R2",
          "Windows Vista",
          "Windows 8.1"
        ],
        "x_mitre_data_sources": [
          "Process monitoring",
          "File monitoring",
          "API monitoring"
        ]
      }
    },
    {
      "value": "Masquerading",
      "description": "Masquerading occurs when an executable, legitimate or malicious, is placed in a commonly trusted location (such as C:\\Windows\\System32) or named with a common name (such as \"explorer.exe\" or \"svchost.exe\") to bypass tools that trust executables by relying on file name or path. An adversary may even use a renamed copy of a legitimate utility, such as rundll32.exe.[[Citation: Endgame Masquerade Ball]] Masquerading also may be done to deceive defenders and system administrators into thinking a file is benign by associating the name with something that is thought to be legitimate.\n\nDetection: Collect file hashes; file names that do not match their expected hash are suspect. Perform file monitoring; files with known names but in unusual locations are suspect. Likewise, files that are modified outside of an update or patch are suspect.\n\nIf file names are mismatched between the binary name on disk and the binary's resource section, this is a likely indicator that a binary was renamed after it was compiled. Collecting and comparing disk and resource filenames for binaries could provide useful leads, but may not always be indicative of malicious activity.[[Citation: Endgame Masquerade Ball]]\n\nPlatforms: Windows Server 2003, Windows Server 2008, Windows Server 2012, Windows XP, Windows 7, Windows 8, Windows Server 2003 R2, Windows Server 2008 R2, Windows Server 2012 R2, Windows Vista, Windows 8.1\n\nData Sources: File monitoring, Process monitoring, Binary file metadata\n\nContributors: ENDGAME",
      "meta": {
        "refs": [
          "https://attack.mitre.org/wiki/Technique/T1036",
          "https://www.endgame.com/blog/how-hunt-masquerade-ball"
        ],
        "uuid": "42e8de7b-37b2-4258-905a-6897815e58e0",
        "x_mitre_platforms": [
          "Windows Server 2003",
          "Windows Server 2008",
          "Windows Server 2012",
          "Windows XP",
          "Windows 7",
          "Windows 8",
          "Windows Server 2003 R2",
          "Windows Server 2008 R2",
          "Windows Server 2012 R2",
          "Windows Vista",
          "Windows 8.1"
        ],
        "x_mitre_data_sources": [
          "File monitoring",
          "Process monitoring",
          "Binary file metadata"
        ]
      }
    },
    {
      "value": "DLL Side-Loading",
      "description": "Programs may specify DLLs that are loaded at runtime. Programs that improperly or vaguely specify a required DLL may be open to a vulnerability in which an unintended DLL is loaded. Side-loading vulnerabilities specifically occur when Windows Side-by-Side (WinSxS) manifests[[Citation: MSDN Manifests]] are not explicit enough about characteristics of the DLL to be loaded. Adversaries may take advantage of a legitimate program that is vulnerable to side-loading to load a malicious DLL.[[Citation: Stewart 2014]]\n\nAdversaries likely use this technique as a means of masking actions they perform under a legitimate, trusted system or software process.\n\nDetection: Monitor processes for unusual activity (e.g., a process that does not use the network begins to do so). Track DLL metadata, such as a hash, and compare DLLs that are loaded at process execution time against previous executions to detect differences that do not correlate with patching or updates.\n\nPlatforms: Windows Server 2003, Windows Server 2008, Windows Server 2012, Windows XP, Windows 7, Windows 8, Windows Server 2003 R2, Windows Server 2008 R2, Windows Server 2012 R2, Windows Vista, Windows 8.1\n\nData Sources: Process use of network, Process monitoring, Loaded DLLs",
      "meta": {
        "refs": [
          "https://attack.mitre.org/wiki/Technique/T1073",
          "https://msdn.microsoft.com/en-us/library/aa375365",
          "https://www.fireeye.com/content/dam/fireeye-www/global/en/current-threats/pdfs/rpt-dll-sideloading.pdf"
        ],
        "uuid": "b2001907-166b-4d71-bb3c-9d26c871de09",
        "x_mitre_platforms": [
          "Windows Server 2003",
          "Windows Server 2008",
          "Windows Server 2012",
          "Windows XP",
          "Windows 7",
          "Windows 8",
          "Windows Server 2003 R2",
          "Windows Server 2008 R2",
          "Windows Server 2012 R2",
          "Windows Vista",
          "Windows 8.1"
        ],
        "x_mitre_data_sources": [
          "Process use of network",
          "Process monitoring",
          "Loaded DLLs"
        ]
      }
    },
    {
      "value": "Automated Exfiltration",
      "description": "Data, such as sensitive documents, may be exfiltrated through the use of automated processing or Scripting after being gathered during Exfiltration Over Command and Control Channel and Exfiltration Over Alternative Protocol.\n\nDetection: Monitor process file access patterns and network behavior. Unrecognized processes or scripts that appear to be traversing file systems and sending network traffic may be suspicious.\n\nPlatforms: Windows Server 2003, Windows Server 2008, Windows Server 2012, Windows XP, Windows 7, Windows 8, Windows Server 2003 R2, Windows Server 2008 R2, Windows Server 2012 R2, Windows Vista, Windows 8.1\n\nData Sources: File monitoring, Process monitoring, Process use of network",
      "meta": {
        "refs": [
          "https://attack.mitre.org/wiki/Technique/T1020"
        ],
        "uuid": "774a3188-6ba9-4dc4-879d-d54ee48a5ce9",
        "x_mitre_platforms": [
          "Windows Server 2003",
          "Windows Server 2008",
          "Windows Server 2012",
          "Windows XP",
          "Windows 7",
          "Windows 8",
          "Windows Server 2003 R2",
          "Windows Server 2008 R2",
          "Windows Server 2012 R2",
          "Windows Vista",
          "Windows 8.1"
        ],
        "x_mitre_data_sources": [
          "File monitoring",
          "Process monitoring",
          "Process use of network"
        ]
      }
    },
    {
      "value": "Network Service Scanning",
      "description": "Adversaries may attempt to get a listing of services running on remote hosts, including those that may be vulnerable to remote software exploitation. Methods to acquire this information include port scans and vulnerability scans using tools that are brought onto a system.\n\nDetection: System and network discovery techniques normally occur throughout an operation as an adversary learns the environment. Data and events should not be viewed in isolation, but as part of a chain of behavior that could lead to other activities, such as [[Lateral Movement]], based on the information obtained.\n\nNormal, benign system and network events from legitimate remote service scanning may be uncommon, depending on the environment and how they are used. Legitimate open port and vulnerability scanning may be conducted within the environment and will need to be deconflicted with any detection capabilities developed. Network intrusion detection systems can also be used to identify scanning activity. Monitor for process use of the networks and inspect intra-network flows to detect port scans.\n\nPlatforms: Windows Server 2003, Windows Server 2008, Windows Server 2012, Windows XP, Windows 7, Windows 8, Windows Server 2003 R2, Windows Server 2008 R2, Windows Server 2012 R2, Windows Vista, Windows 8.1\n\nData Sources: Netflow/Enclave netflow, Network protocol analysis, Packet capture, Process command-line parameters, Process use of network",
      "meta": {
        "refs": [
          "https://attack.mitre.org/wiki/Technique/T1046"
        ],
        "uuid": "e3a12395-188d-4051-9a16-ea8e14d07b88",
        "x_mitre_platforms": [
          "Windows Server 2003",
          "Windows Server 2008",
          "Windows Server 2012",
          "Windows XP",
          "Windows 7",
          "Windows 8",
          "Windows Server 2003 R2",
          "Windows Server 2008 R2",
          "Windows Server 2012 R2",
          "Windows Vista",
          "Windows 8.1"
        ],
        "x_mitre_data_sources": [
          "Netflow/Enclave netflow",
          "Network protocol analysis",
          "Packet capture",
          "Process command-line parameters",
          "Process use of network"
        ]
      }
    },
    {
      "value": "Replication Through Removable Media",
      "description": "Adversaries may move to additional systems, possibly those on disconnected or air-gapped networks, by copying malware to removable media and taking advantage of Autorun features when the media is inserted into another system and executes. This may occur through modification of executable files stored on removable media or by copying malware and renaming it to look like a legitimate file to trick users into executing it on a separate system.\n\nDetection: Monitor file access on removable media. Detect processes that execute from removable media after it is mounted or when initiated by a user. If a remote access tool is used in this manner to move laterally, then additional actions are likely to occur after execution, such as opening network connections for [[Command and Control]] and system and network information [[Discovery]].\n\nPlatforms: Windows Server 2003, Windows Server 2008, Windows Server 2012, Windows XP, Windows 7, Windows 8, Windows Server 2003 R2, Windows Server 2008 R2, Windows Server 2012 R2, Windows Vista, Windows 8.1\n\nData Sources: File monitoring, Data loss prevention",
      "meta": {
        "refs": [
          "https://attack.mitre.org/wiki/Technique/T1091"
        ],
        "uuid": "3b744087-9945-4a6f-91e8-9dbceda417a4",
        "x_mitre_platforms": [
          "Windows Server 2003",
          "Windows Server 2008",
          "Windows Server 2012",
          "Windows XP",
          "Windows 7",
          "Windows 8",
          "Windows Server 2003 R2",
          "Windows Server 2008 R2",
          "Windows Server 2012 R2",
          "Windows Vista",
          "Windows 8.1"
        ],
        "x_mitre_data_sources": [
          "File monitoring",
          "Data loss prevention"
        ]
      }
    },
    {
      "value": "Remote Desktop Protocol",
      "description": "Remote desktop is a common feature in operating systems. It allows a user to log into an interactive session with a system desktop graphical user interface on a remote system. Microsoft refers to its implementation of the Remote Desktop Protocol (RDP) as Remote Desktop Services (RDS).Remote Services similar to RDS.\n\nAdversaries may connect to a remote system over RDP/RDS to expand access if the service is enabled and allows access to accounts with known credentials. Adversaries will likely use Accessibility Features technique for [[Persistence]].[[Citation: Alperovitch Malware]]\n\nDetection: Use of RDP may be legitimate, depending on the network environment and how it is used. Other factors, such as access patterns and activity that occurs after a remote login, may indicate suspicious or malicious behavior with RDP. Monitor for user accounts logged into systems they would not normally access or access patterns to multiple systems over a relatively short period of time.\n\nPlatforms: Windows Server 2003, Windows Server 2008, Windows Server 2012, Windows XP, Windows 7, Windows 8, Windows Server 2003 R2, Windows Server 2008 R2, Windows Server 2012 R2, Windows Vista, Windows 8.1\n\nData Sources: Authentication logs, Netflow/Enclave netflow, Process monitoring",
      "meta": {
        "refs": [
          "https://attack.mitre.org/wiki/Technique/T1076",
          "https://technet.microsoft.com/en-us/windowsserver/ee236407.aspx",
          "http://blog.crowdstrike.com/adversary-tricks-crowdstrike-treats/"
        ],
        "uuid": "51dea151-0898-4a45-967c-3ebee0420484",
        "x_mitre_platforms": [
          "Windows Server 2003",
          "Windows Server 2008",
          "Windows Server 2012",
          "Windows XP",
          "Windows 7",
          "Windows 8",
          "Windows Server 2003 R2",
          "Windows Server 2008 R2",
          "Windows Server 2012 R2",
          "Windows Vista",
          "Windows 8.1"
        ],
        "x_mitre_data_sources": [
          "Authentication logs",
          "Netflow/Enclave netflow",
          "Process monitoring"
        ]
      }
    },
    {
      "value": "Scheduled Transfer",
      "description": "Data exfiltration may be performed only at certain times of day or at certain intervals.  This could be done to blend traffic patterns with normal activity or availability.\n\nWhen scheduled exfiltration is used, other exfiltration techniques likely apply as well to transfer the information out of the network, such as Exfiltration Over Command and Control Channel and Exfiltration Over Alternative Protocol.\n\nDetection: Monitor process file access patterns and network behavior. Unrecognized processes or scripts that appear to be traversing file systems and sending network traffic may be suspicious. Network connections to the same destination that occur at the same time of day for multiple days are suspicious.\n\nPlatforms: Windows Server 2003, Windows Server 2008, Windows Server 2012, Windows XP, Windows 7, Windows 8, Windows Server 2003 R2, Windows Server 2008 R2, Windows Server 2012 R2, Windows Vista, Windows 8.1\n\nData Sources: Netflow/Enclave netflow, Process use of network, Process monitoring",
      "meta": {
        "refs": [
          "https://attack.mitre.org/wiki/Technique/T1029"
        ],
        "uuid": "4eeaf8a9-c86b-4954-a663-9555fb406466",
        "x_mitre_platforms": [
          "Windows Server 2003",
          "Windows Server 2008",
          "Windows Server 2012",
          "Windows XP",
          "Windows 7",
          "Windows 8",
          "Windows Server 2003 R2",
          "Windows Server 2008 R2",
          "Windows Server 2012 R2",
          "Windows Vista",
          "Windows 8.1"
        ],
        "x_mitre_data_sources": [
          "Netflow/Enclave netflow",
          "Process use of network",
          "Process monitoring"
        ]
      }
    },
    {
      "value": "Bypass User Account Control",
      "description": "Windows User Account Control (UAC) allows a program to elevate its privileges to perform a task under administrator-level permissions by prompting the user for confirmation. The impact to the user ranges from denying the operation under high enforcement to allowing the user to perform the action if they are in the local administrators group and click through the prompt or allowing them to enter an administrator password to complete the action.DLL Injection and unusual loaded DLLs through DLL Search Order Hijacking, which indicate attempts to gain access to higher privileged processes.\n\nPlatforms: Windows Server 2012, Windows 7, Windows 8, Windows Server 2008 R2, Windows Server 2012 R2, Windows 8.1\n\nData Sources: System calls, Process monitoring, Authentication logs, Process command-line parameters\n\nEffective Permissions: Administrator\n\nContributors: Stefan Kanthak, Casey Smith",
      "meta": {
        "refs": [
          "https://attack.mitre.org/wiki/Technique/T1088",
          "http://www.pretentiousname.com/misc/win7%20uac%20whitelist2.html",
          "https://technet.microsoft.com/en-us/itpro/windows/keep-secure/how-user-account-control-works",
          "https://msdn.microsoft.com/en-us/library/ms679687.aspx",
          "https://technet.microsoft.com/en-US/magazine/2009.07.uac.aspx",
          "https://enigma0x3.net/2016/08/15/fileless-uac-bypass-using-eventvwr-exe-and-registry-hijacking/",
          "http://pen-testing.sans.org/blog/pen-testing/2013/08/08/psexec-uac-bypass",
          "https://github.com/hfiref0x/UACME",
          "https://blog.fortinet.com/2016/12/16/malicious-macro-bypasses-uac-to-elevate-privilege-for-fareit-malware"
        ],
        "uuid": "ca1a3f50-5ebd-41f8-8320-2c7d6a6e88be",
        "x_mitre_platforms": [
          "Windows Server 2012",
          "Windows 7",
          "Windows 8",
          "Windows Server 2008 R2",
          "Windows Server 2012 R2",
          "Windows 8.1"
        ],
        "x_mitre_data_sources": [
          "System calls",
          "Process monitoring",
          "Authentication logs",
          "Process command-line parameters"
        ]
      }
    },
    {
      "value": "Logon Scripts",
      "description": "Windows allows logon scripts to be run whenever a specific user or group of users log into a system.[[Citation: TechNet Logon Scripts]] The scripts can be used to perform administrative functions, which may often execute other programs or send information to an internal logging server.\n\nIf adversaries can access these scripts, they may insert additional code into the logon script to execute their tools when a user logs in. This code can allow them to maintain persistence on a single system, if it is a local script, or to move laterally within a network, if the script is stored on a central server and pushed to many systems. Depending on the access configuration of the logon scripts, either local credentials or an administrator account may be necessary.\n\nDetection: Monitor logon scripts for unusual access by abnormal users or at abnormal times. Look for files added or modified by unusual accounts outside of normal administration duties.\n\nPlatforms: Windows Server 2003, Windows Server 2008, Windows Server 2012, Windows XP, Windows 7, Windows 8, Windows Server 2003 R2, Windows Server 2008 R2, Windows Server 2012 R2, Windows Vista, Windows 8.1\n\nData Sources: File monitoring, Process monitoring",
      "meta": {
        "refs": [
          "https://attack.mitre.org/wiki/Technique/T1037",
          "https://technet.microsoft.com/en-us/library/cc758918(v=ws.10).aspx"
        ],
        "uuid": "03259939-0b57-482f-8eb5-87c0e0d54334",
        "x_mitre_platforms": [
          "Windows Server 2003",
          "Windows Server 2008",
          "Windows Server 2012",
          "Windows XP",
          "Windows 7",
          "Windows 8",
          "Windows Server 2003 R2",
          "Windows Server 2008 R2",
          "Windows Server 2012 R2",
          "Windows Vista",
          "Windows 8.1"
        ],
        "x_mitre_data_sources": [
          "File monitoring",
          "Process monitoring"
        ]
      }
    },
    {
      "value": "Connection Proxy",
      "description": "A connection proxy is used to direct network traffic between systems or act as an intermediary for network communications. Many tools exist that enable traffic redirection through proxies or port redirection, including HTRAN, ZXProxy, and ZXPortMap.[[Citation: Trend Micro APT Attack Tools]]\n\nThe definition of a proxy can also be expanded out to encompass trust relationships between networks in peer-to-peer, mesh, or trusted connections between networks consisting of hosts or systems that regularly communicate with each other.\n\nThe network may be within a single organization or across organizations with trust relationships. Adversaries could use these types of relationships to manage command and control communications, to reduce the number of simultaneous outbound network connections, to provide resiliency in the face of connection loss, or to ride over existing trusted communications paths between victims to avoid suspicion.\n\nDetection: Processes utilizing the network that do not normally have network communication or have never been seen before are suspicious. Network activities disassociated from user-driven actions from processes that normally require user direction are suspicious.\n\nAnalyze network data for uncommon data flows (e.g., a client sending significantly more data than it receives from a server or between clients that should not or often do not communicate with one another). Processes utilizing the network that do not normally have network communication or have never been seen before are suspicious. Analyze packet contents to detect communications that do not follow the expected protocol behavior for the port that is being used.[[Citation: University of Birmingham C2]]\n\nPlatforms: Windows Server 2003, Windows Server 2008, Windows Server 2012, Windows XP, Windows 7, Windows 8, Windows Server 2003 R2, Windows Server 2008 R2, Windows Server 2012 R2, Windows Vista, Windows 8.1\n\nData Sources: Process use of network, Process monitoring, Netflow/Enclave netflow, Packet capture\n\nContributors: Walker Johnson",
      "meta": {
        "refs": [
          "https://attack.mitre.org/wiki/Technique/T1090",
          "https://arxiv.org/ftp/arxiv/papers/1408/1408.1136.pdf",
          "http://blog.trendmicro.com/trendlabs-security-intelligence/in-depth-look-apt-attack-tools-of-the-trade/"
        ],
        "uuid": "731f4f55-b6d0-41d1-a7a9-072a66389aea",
        "x_mitre_platforms": [
          "Windows Server 2003",
          "Windows Server 2008",
          "Windows Server 2012",
          "Windows XP",
          "Windows 7",
          "Windows 8",
          "Windows Server 2003 R2",
          "Windows Server 2008 R2",
          "Windows Server 2012 R2",
          "Windows Vista",
          "Windows 8.1"
        ],
        "x_mitre_data_sources": [
          "Process use of network",
          "Process monitoring",
          "Netflow/Enclave netflow",
          "Packet capture"
        ]
      }
    },
    {
      "value": "Regsvr32",
      "description": "Regsvr32.exe is a command-line program used to register and unregister object linking and embedding controls, including dynamic link libraries (DLLs), on Windows systems. Regsvr32.exe can be used to execute arbitrary binaries.[[Citation: Microsoft Regsvr32]]\n\nAdversaries may take advantage of this functionality to proxy execution of code to avoid triggering security tools that may not monitor execution of, and modules loaded by, the regsvr32.exe process because of whitelists or false positives from Windows using regsvr32.exe for normal operations. Regsvr32.exe is also a Microsoft signed binary.\n\nRegsvr32.exe can also be used to specifically bypass process whitelisting using functionality to load COM scriptlets to execute DLLs under user permissions. Since regsvr32.exe is network and proxy aware, the scripts can be loaded by passing a uniform resource locator (URL) to file on an external Web server as an argument during invocation. This method makes no changes to the Registry as the COM object is not actually registered, only executed.[[Citation: SubTee Regsvr32 Whitelisting Bypass]] This variation of the technique has been used in campaigns targeting governments.[[Citation: FireEye Regsvr32 Targeting Mongolian Gov]]\n\nDetection: Use process monitoring to monitor the execution and arguments of regsvr32.exe. Compare recent invocations of regsvr32.exe with prior history of known good arguments and loaded files to determine anomalous and potentially adversarial activity. Command arguments used before and after the regsvr32.exe invocation may also be useful in determining the origin and purpose of the script or DLL being loaded.\n\nPlatforms: Windows Server 2003, Windows Server 2008, Windows Server 2012, Windows XP, Windows 7, Windows 8, Windows Server 2003 R2, Windows Server 2008 R2, Windows Server 2012 R2, Windows Vista, Windows 8.1\n\nData Sources: Loaded DLLs, Process monitoring, Process command-line parameters, Windows Registry\n\nContributors: Casey Smith",
      "meta": {
        "refs": [
          "https://attack.mitre.org/wiki/Technique/T1117",
          "https://support.microsoft.com/en-us/kb/249873",
          "http://subt0x10.blogspot.com/2016/04/bypass-application-whitelisting-script.html",
          "https://www.fireeye.com/blog/threat-research/2017/02/spear%20phishing%20techn.html"
        ],
        "uuid": "68f7e3a1-f09f-4164-9a62-16b648a0dd5a",
        "x_mitre_platforms": [
          "Windows Server 2003",
          "Windows Server 2008",
          "Windows Server 2012",
          "Windows XP",
          "Windows 7",
          "Windows 8",
          "Windows Server 2003 R2",
          "Windows Server 2008 R2",
          "Windows Server 2012 R2",
          "Windows Vista",
          "Windows 8.1"
        ],
        "x_mitre_data_sources": [
          "Loaded DLLs",
          "Process monitoring",
          "Process command-line parameters",
          "Windows Registry"
        ]
      }
    },
    {
      "value": "File and Directory Discovery",
      "description": "Adversaries may enumerate files and directories or may search in specific locations of a host or network share for certain information within a file system. Example utilities used to obtain this information are <code>dir</code> and <code>tree</code>.Windows Management Instrumentation and PowerShell.\n\nPlatforms: Windows Server 2003, Windows Server 2008, Windows Server 2012, Windows XP, Windows 7, Windows 8, Windows Server 2003 R2, Windows Server 2008 R2, Windows Server 2012 R2, Windows Vista, Windows 8.1, Linux\n\nData Sources: File monitoring, Process command-line parameters, Process monitoring",
      "meta": {
        "refs": [
          "https://attack.mitre.org/wiki/Technique/T1083",
          "http://blog.jpcert.or.jp/2016/01/windows-commands-abused-by-attackers.html"
        ],
        "uuid": "7bc57495-ea59-4380-be31-a64af124ef18",
        "x_mitre_platforms": [
          "Windows Server 2003",
          "Windows Server 2008",
          "Windows Server 2012",
          "Windows XP",
          "Windows 7",
          "Windows 8",
          "Windows Server 2003 R2",
          "Windows Server 2008 R2",
          "Windows Server 2012 R2",
          "Windows Vista",
          "Windows 8.1",
          "Linux"
        ],
        "x_mitre_data_sources": [
          "File monitoring",
          "Process command-line parameters",
          "Process monitoring"
        ]
      }
    },
    {
      "value": "Commonly Used Port",
      "description": "Adversaries may communicate over a commonly used port to bypass firewalls or network detection systems and to blend with normal network activity to avoid more detailed inspection. They may use commonly open ports such as\n* TCP:80 (HTTP)\n* TCP:443 (HTTPS)\n* TCP:25 (SMTP)\n* TCP/UDP:53 (DNS)\n\nThey may use the protocol associated with the port or a completely different protocol. \n\nFor connections that occur internally within an enclave (such as those between a proxy or pivot node and other nodes), examples of common ports are \n* TCP/UDP:135 (RPC)\n* TCP/UDP:22 (SSH)\n* TCP/UDP:3389 (RDP)\n\nDetection: Analyze network data for uncommon data flows (e.g., a client sending significantly more data than it receives from a server). Processes utilizing the network that do not normally have network communication or have never been seen before are suspicious. Analyze packet contents to detect communications that do not follow the expected protocol behavior for the port that is being used.[[Citation: University of Birmingham C2]]\n\nPlatforms: Windows Server 2003, Windows Server 2008, Windows Server 2012, Windows XP, Windows 7, Windows 8, Windows Server 2003 R2, Windows Server 2008 R2, Windows Server 2012 R2, Windows Vista, Windows 8.1, Linux\n\nData Sources: Packet capture, Netflow/Enclave netflow, Process use of network, Process monitoring",
      "meta": {
        "refs": [
          "https://attack.mitre.org/wiki/Technique/T1043",
          "https://arxiv.org/ftp/arxiv/papers/1408/1408.1136.pdf"
        ],
        "uuid": "f879d51c-5476-431c-aedf-f14d207e4d1e",
        "x_mitre_platforms": [
          "Windows Server 2003",
          "Windows Server 2008",
          "Windows Server 2012",
          "Windows XP",
          "Windows 7",
          "Windows 8",
          "Windows Server 2003 R2",
          "Windows Server 2008 R2",
          "Windows Server 2012 R2",
          "Windows Vista",
          "Windows 8.1",
          "Linux"
        ],
        "x_mitre_data_sources": [
          "Packet capture",
          "Netflow/Enclave netflow",
          "Process use of network",
          "Process monitoring"
        ]
      }
    },
    {
      "value": "Data Encoding",
      "description": "Command and control (C2) information is encoded using a standard data encoding system. Use of data encoding may be to adhere to existing protocol specifications and includes use of ASCII, Unicode, Base64,  MIME, UTF-8, or other binary-to-text and character encoding systems.[[Citation: Wikipedia Binary-to-text Encoding]][[Citation: Wikipedia Character Encoding]] Some data encoding systems may also result in data compression, such as gzip.\n\nDetection: Analyze network data for uncommon data flows (e.g., a client sending significantly more data than it receives from a server). Processes utilizing the network that do not normally have network communication or have never been seen before are suspicious. Analyze packet contents to detect communications that do not follow the expected protocol behavior for the port that is being used.[[Citation: University of Birmingham C2]]\n\nPlatforms: Windows Server 2003, Windows Server 2008, Windows Server 2012, Windows XP, Windows 7, Windows 8, Windows Server 2003 R2, Windows Server 2008 R2, Windows Server 2012 R2, Windows Vista, Windows 8.1, Linux\n\nData Sources: Packet capture, Process use of network, Process Monitoring, Network protocol analysis\n\nContributors: Itzik Kotler, SafeBreach",
      "meta": {
        "refs": [
          "https://attack.mitre.org/wiki/Technique/T1132",
          "https://en.wikipedia.org/wiki/Character%20encoding",
          "https://en.wikipedia.org/wiki/Binary-to-text%20encoding",
          "https://arxiv.org/ftp/arxiv/papers/1408/1408.1136.pdf"
        ],
        "uuid": "cc7b8c4e-9be0-47ca-b0bb-83915ec3ee2f",
        "x_mitre_platforms": [
          "Windows Server 2003",
          "Windows Server 2008",
          "Windows Server 2012",
          "Windows XP",
          "Windows 7",
          "Windows 8",
          "Windows Server 2003 R2",
          "Windows Server 2008 R2",
          "Windows Server 2012 R2",
          "Windows Vista",
          "Windows 8.1",
          "Linux"
        ],
        "x_mitre_data_sources": [
          "Packet capture",
          "Process use of network",
          "Process Monitoring",
          "Network protocol analysis"
        ]
      }
    },
    {
      "value": "Credentials in Files",
      "description": "Adversaries may search local file systems and remote file shares for files containing passwords.  These can be files created by users to store their own credentials, shared credential stores for a group of individuals, configuration files containing passwords for a system or service, or source code/binary files containing embedded passwords.\n\nIt is possible to extract passwords from backups or saved virtual machines through Credential Dumping.Legitimate Credentials for more information.\n\nPlatforms: Windows Server 2003, Windows Server 2008, Windows Server 2012, Windows XP, Windows 7, Windows 8, Windows Server 2003 R2, Windows Server 2008 R2, Windows Server 2012 R2, Windows Vista, Windows 8.1\n\nData Sources: File monitoring, Process command-line parameters",
      "meta": {
        "refs": [
          "https://attack.mitre.org/wiki/Technique/T1081",
          "http://blogs.technet.com/b/srd/archive/2014/05/13/ms14-025-an-update-for-group-policy-preferences.aspx",
          "http://carnal0wnage.attackresearch.com/2014/05/mimikatz-against-virtual-machine-memory.html"
        ],
        "uuid": "ba8e391f-14b5-496f-81f2-2d5ecd646c1c",
        "x_mitre_platforms": [
          "Windows Server 2003",
          "Windows Server 2008",
          "Windows Server 2012",
          "Windows XP",
          "Windows 7",
          "Windows 8",
          "Windows Server 2003 R2",
          "Windows Server 2008 R2",
          "Windows Server 2012 R2",
          "Windows Vista",
          "Windows 8.1"
        ],
        "x_mitre_data_sources": [
          "File monitoring",
          "Process command-line parameters"
        ]
      }
    },
    {
      "value": "PowerShell",
      "description": "PowerShell is a powerful interactive command-line interface and scripting environment included in the Windows operating system.[[Citation: TechNet PowerShell]] Adversaries can use PowerShell to perform a number of actions, including discovery of information and execution of code. Examples include the Start-Process cmdlet which can be used to run an executable and the Invoke-Command cmdlet which runs a command locally or on a remote computer. \n\nPowerShell may also be used to download and run executables from the Internet, which can be executed from disk or in memory without touching disk.\n\nAdministrator permissions are required to use PowerShell to connect to remote systems.\n\nA number of PowerShell-based offensive testing tools are available, including Empire,[[Citation: Github PowerShell Empire]] PowerSploit,[[Citation: Powersploit]] and PSAttack.[[Citation: Github PSAttack]]\n\nDetection: If proper execution policy is set, adversaries will likely be able to define their own execution policy if they obtain administrator or system access, either through the Registry or at the command line. This change in policy on a system may be a way to detect malicious use of PowerShell. If PowerShell is not used in an environment, then simply looking for PowerShell execution may detect malicious activity.\n\nIt is also beneficial to turn on PowerShell logging to gain increased fidelity in what occurs during execution.[[Citation: Malware Archaeology PowerShell Cheat Sheet]] PowerShell 5.0 introduced enhanced logging capabilities, and some of those features have since been added to PowerShell 4.0. Earlier versions of PowerShell do not have many logging features.[[Citation: FireEye PowerShell Logging 2016]] An organization can gather PowerShell execution details in a data analytic platform to supplement it with other data.\n\nPlatforms: Windows Server 2003, Windows Server 2008, Windows Server 2012, Windows XP, Windows 7, Windows 8, Windows Server 2003 R2, Windows Server 2008 R2, Windows Server 2012 R2, Windows Vista, Windows 8.1\n\nData Sources: Windows Registry, File monitoring, Process command-line parameters, Process monitoring",
      "meta": {
        "refs": [
          "https://attack.mitre.org/wiki/Technique/T1086",
          "https://github.com/jaredhaight/PSAttack",
          "https://github.com/PowerShellEmpire/Empire",
          "https://technet.microsoft.com/en-us/scriptcenter/dd742419.aspx",
          "https://www.fireeye.com/blog/threat-research/2016/02/greater%20visibilityt.html",
          "http://www.malwarearchaeology.com/s/Windows-PowerShell-Logging-Cheat-Sheet-ver-June-2016-v2.pdf",
          "https://github.com/mattifestation/PowerSploit"
        ],
        "uuid": "f4882e23-8aa7-4b12-b28a-b349c12ee9e0",
        "x_mitre_platforms": [
          "Windows Server 2003",
          "Windows Server 2008",
          "Windows Server 2012",
          "Windows XP",
          "Windows 7",
          "Windows 8",
          "Windows Server 2003 R2",
          "Windows Server 2008 R2",
          "Windows Server 2012 R2",
          "Windows Vista",
          "Windows 8.1"
        ],
        "x_mitre_data_sources": [
          "Windows Registry",
          "File monitoring",
          "Process command-line parameters",
          "Process monitoring"
        ]
      }
    },
    {
      "value": "Security Software Discovery",
      "description": "Adversaries may attempt to get a listing of security software, configurations, defensive tools, and sensors that are installed on the system. This may include things such as local firewall rules, anti-virus, and virtualization. These checks may be built into early-stage remote access tools.\n\nExample commands that can be used to obtain security software information are netsh, <code>reg query</code> with Reg, <code>dir</code> with cmd, and Tasklist, but other indicators of discovery behavior may be more specific to the type of software or security system the adversary is looking for.\n\nDetection: System and network discovery techniques normally occur throughout an operation as an adversary learns the environment. Data and events should not be viewed in isolation, but as part of a chain of behavior that could lead to other activities, such as lateral movement, based on the information obtained.\n\nMonitor processes and command-line arguments for actions that could be taken to gather system and network information. Remote access tools with built-in features may interact directly with the Windows API to gather information. Information may also be acquired through Windows system management tools such as Windows Management Instrumentation and PowerShell.\n\nPlatforms: Windows Server 2003, Windows Server 2008, Windows Server 2012, Windows XP, Windows 7, Windows 8, Windows Server 2003 R2, Windows Server 2008 R2, Windows Server 2012 R2, Windows Vista, Windows 8.1\n\nData Sources: File monitoring, Process command-line parameters, Process monitoring",
      "meta": {
        "refs": [
          "https://attack.mitre.org/wiki/Technique/T1063"
        ],
        "uuid": "241814ae-de3f-4656-b49e-f9a80764d4b7",
        "x_mitre_platforms": [
          "Windows Server 2003",
          "Windows Server 2008",
          "Windows Server 2012",
          "Windows XP",
          "Windows 7",
          "Windows 8",
          "Windows Server 2003 R2",
          "Windows Server 2008 R2",
          "Windows Server 2012 R2",
          "Windows Vista",
          "Windows 8.1"
        ],
        "x_mitre_data_sources": [
          "File monitoring",
          "Process command-line parameters",
          "Process monitoring"
        ]
      }
    },
    {
      "value": "Modify Existing Service",
      "description": "Windows service configuration information, including the file path to the service's executable, is stored in the Registry. Service configurations can be modified using utilities such as sc.exe and Reg.\n\nAdversaries can modify an existing service to persist malware on a system by using system utilities or by using custom tools to interact with the Windows API. Use of existing services is a type of Masquerading that may make detection analysis more challenging. Modifying existing services may interrupt their functionality or may enable services that are disabled or otherwise not commonly used.\n\nDetection: Look for changes to service Registry entries that do not correlate with known software, patch cycles, etc. Changes to the binary path and the service startup type changed from manual or disabled to automatic, if it does not typically do so, may be suspicious. Tools such as Sysinternals Autoruns may also be used to detect system service changes that could be attempts at persistence.cmd commands or scripts.\n\nLook for abnormal process call trees from known services and for execution of other commands that could relate to Windows Management Instrumentation and PowerShell, so additional logging may need to be configured to gather the appropriate data.\n\nPlatforms: Windows Server 2003, Windows Server 2008, Windows Server 2012, Windows XP, Windows 7, Windows 8, Windows Server 2003 R2, Windows Server 2008 R2, Windows Server 2012 R2, Windows Vista, Windows 8.1\n\nData Sources: Windows Registry, File monitoring, Process command-line parameters, Process monitoring",
      "meta": {
        "refs": [
          "https://attack.mitre.org/wiki/Technique/T1031",
          "https://technet.microsoft.com/en-us/sysinternals/bb963902"
        ],
        "uuid": "62dfd1ca-52d5-483c-a84b-d6e80bf94b7b",
        "x_mitre_platforms": [
          "Windows Server 2003",
          "Windows Server 2008",
          "Windows Server 2012",
          "Windows XP",
          "Windows 7",
          "Windows 8",
          "Windows Server 2003 R2",
          "Windows Server 2008 R2",
          "Windows Server 2012 R2",
          "Windows Vista",
          "Windows 8.1"
        ],
        "x_mitre_data_sources": [
          "Windows Registry",
          "File monitoring",
          "Process command-line parameters",
          "Process monitoring"
        ]
      }
    },
    {
      "value": "Standard Cryptographic Protocol",
      "description": "Adversaries use command and control over an encrypted channel using a known encryption protocol like HTTPS or SSL/TLS. The use of strong encryption makes it difficult for defenders to detect signatures within adversary command and control traffic.\n\nSome adversaries may use other encryption protocols and algorithms with symmetric keys, such as RC4, that rely on encryption keys encoded into malware configuration files and not public key cryptography. Such keys may be obtained through malware reverse engineering.\n\nDetection: SSL/TLS inspection is one way of detecting command and control traffic within some encrypted communication channels.[[Citation: SANS Decrypting SSL]] SSL/TLS inspection does come with certain risks that should be considered before implementing to avoid potential security issues such as incomplete certificate validation.[[Citation: SEI SSL Inspection Risks]]\n\nIf malware uses encryption with symmetric keys, it may be possible to obtain the algorithm and key from samples and use them to decode network traffic to detect malware communications signatures.[[Citation: Fidelis DarkComet]]\n\nIn general, analyze network data for uncommon data flows (e.g., a client sending significantly more data than it receives from a server). Processes utilizing the network that do not normally have network communication or have never been seen before are suspicious. Analyze packet contents to detect communications that do not follow the expected protocol behavior for the port that is being used.[[Citation: University of Birmingham C2]]\n\nPlatforms: Windows Server 2003, Windows Server 2008, Windows Server 2012, Windows XP, Windows 7, Windows 8, Windows Server 2003 R2, Windows Server 2008 R2, Windows Server 2012 R2, Windows Vista, Windows 8.1\n\nData Sources: Packet capture, Netflow/Enclave netflow, Malware reverse engineering, Process use of network, Process monitoring, SSL/TLS inspection",
      "meta": {
        "refs": [
          "https://attack.mitre.org/wiki/Technique/T1032",
          "https://www.fidelissecurity.com/sites/default/files/FTA%201018%20looking%20at%20the%20sky%20for%20a%20dark%20comet.pdf",
          "https://insights.sei.cmu.edu/cert/2015/03/the-risks-of-ssl-inspection.html",
          "https://arxiv.org/ftp/arxiv/papers/1408/1408.1136.pdf",
          "http://www.sans.org/reading-room/whitepapers/analyst/finding-hidden-threats-decrypting-ssl-34840"
        ],
        "uuid": "4b74a1d4-b0e9-4ef1-93f1-14ecc6e2f5b5",
        "x_mitre_platforms": [
          "Windows Server 2003",
          "Windows Server 2008",
          "Windows Server 2012",
          "Windows XP",
          "Windows 7",
          "Windows 8",
          "Windows Server 2003 R2",
          "Windows Server 2008 R2",
          "Windows Server 2012 R2",
          "Windows Vista",
          "Windows 8.1"
        ],
        "x_mitre_data_sources": [
          "Packet capture",
          "Netflow/Enclave netflow",
          "Malware reverse engineering",
          "Process use of network",
          "Process monitoring",
          "SSL/TLS inspection"
        ]
      }
    },
    {
      "value": "Legitimate Credentials",
      "description": "Adversaries may steal the credentials of a specific user or service account using [[Credential Access]] techniques. Compromised credentials may be used to bypass access controls placed on various resources on hosts and within the network and may even be used for persistent access to remote systems. Compromised credentials may also grant an adversary increased privilege to specific systems or access to restricted areas of the network. Adversaries may choose not to use malware or tools in conjunction with the legitimate access those credentials provide to make it harder to detect their presence.\n\nThe overlap of credentials and permissions across a network of systems is of concern because the adversary may be able to pivot across accounts and systems to reach a high level of access (i.e., domain or enterprise administrator) to bypass access controls set within the enterprise.[[Citation: TechNet Credential Theft]]\n\nDetection: Configure robust, consistent account activity audit policies across the enterprise.[[Citation: TechNet Audit Policy]] Look for suspicious account behavior across systems that share accounts, either user, admin, or service accounts. Examples: one account logged into multiple systems simultaneously; multiple accounts logged into the same machine simultaneously; accounts logged in at odd times or outside of business hours. Activity may be from interactive login sessions or process ownership from accounts being used to execute binaries on a remote system as a particular account. Correlate other security systems with login information (e.g., a user has an active login session but has not entered the building or does not have VPN access).\n\nPlatforms: Windows Server 2003, Windows Server 2008, Windows Server 2012, Windows XP, Windows 7, Windows 8, Windows Server 2003 R2, Windows Server 2008 R2, Windows Server 2012 R2, Windows Vista, Windows 8.1\n\nData Sources: Authentication logs, Process monitoring\n\nEffective Permissions: User, Administrator",
      "meta": {
        "refs": [
          "https://attack.mitre.org/wiki/Technique/T1078",
          "https://technet.microsoft.com/en-us/library/dn487457.aspx",
          "https://technet.microsoft.com/en-us/library/dn535501.aspx"
        ],
        "uuid": "b17a1a56-e99c-403c-8948-561df0cffe81",
        "x_mitre_platforms": [
          "Windows Server 2003",
          "Windows Server 2008",
          "Windows Server 2012",
          "Windows XP",
          "Windows 7",
          "Windows 8",
          "Windows Server 2003 R2",
          "Windows Server 2008 R2",
          "Windows Server 2012 R2",
          "Windows Vista",
          "Windows 8.1"
        ],
        "x_mitre_data_sources": [
          "Authentication logs",
          "Process monitoring"
        ]
      }
    },
    {
      "value": "System Service Discovery",
      "description": "Adversaries may try to get information about registered services. Commands that may obtain information about services using operating system utilities are \"sc,\" \"tasklist /svc\" using Tasklist, and \"net start\" using Net, but adversaries may also use other tools as well.\n\nDetection: System and network discovery techniques normally occur throughout an operation as an adversary learns the environment. Data and events should not be viewed in isolation, but as part of a chain of behavior that could lead to other activities, such as Windows Management Instrumentation and PowerShell.\n\nPlatforms: Windows Server 2003, Windows Server 2008, Windows Server 2012, Windows XP, Windows 7, Windows 8, Windows Server 2003 R2, Windows Server 2008 R2, Windows Server 2012 R2, Windows Vista, Windows 8.1\n\nData Sources: Process command-line parameters, Process monitoring",
      "meta": {
        "refs": [
          "https://attack.mitre.org/wiki/Technique/T1007"
        ],
        "uuid": "322bad5a-1c49-4d23-ab79-76d641794afa",
        "x_mitre_platforms": [
          "Windows Server 2003",
          "Windows Server 2008",
          "Windows Server 2012",
          "Windows XP",
          "Windows 7",
          "Windows 8",
          "Windows Server 2003 R2",
          "Windows Server 2008 R2",
          "Windows Server 2012 R2",
          "Windows Vista",
          "Windows 8.1"
        ],
        "x_mitre_data_sources": [
          "Process command-line parameters",
          "Process monitoring"
        ]
      }
    },
    {
      "value": "System Owner/User Discovery",
      "description": "Adversaries may attempt to identify the primary user, currently logged in user, set of users that commonly uses a system, or whether a user is actively using the system. They may do this, for example, by retrieving account usernames or by using Credential Dumping. The information may be collected in a number of different ways using other Windows Management Instrumentation and PowerShell.\n\nPlatforms: Windows Server 2003, Windows Server 2008, Windows Server 2012, Windows XP, Windows 7, Windows 8, Windows Server 2003 R2, Windows Server 2008 R2, Windows Server 2012 R2, Windows Vista, Windows 8.1, Linux\n\nData Sources: File monitoring, Process monitoring, Process command-line parameters",
      "meta": {
        "refs": [
          "https://attack.mitre.org/wiki/Technique/T1033"
        ],
        "uuid": "03d7999c-1f4c-42cc-8373-e7690d318104",
        "x_mitre_platforms": [
          "Windows Server 2003",
          "Windows Server 2008",
          "Windows Server 2012",
          "Windows XP",
          "Windows 7",
          "Windows 8",
          "Windows Server 2003 R2",
          "Windows Server 2008 R2",
          "Windows Server 2012 R2",
          "Windows Vista",
          "Windows 8.1",
          "Linux"
        ],
        "x_mitre_data_sources": [
          "File monitoring",
          "Process monitoring",
          "Process command-line parameters"
        ]
      }
    },
    {
      "value": "Multiband Communication",
      "description": "Some adversaries may split communications between different protocols.  There could be one protocol for inbound command and control and another for outbound data, allowing it to bypass certain firewall restrictions.  The split could also be random to simply avoid data threshold alerts on any one communication.\n\nDetection: Analyze network data for uncommon data flows (e.g., a client sending significantly more data than it receives from a server). Processes utilizing the network that do not normally have network communication or have never been seen before are suspicious. Analyze packet contents to detect communications that do not follow the expected protocol behavior for the port that is being used.[[Citation: University of Birmingham C2]] Correlating alerts between multiple communication channels can further help identify command-and-control behavior.\n\nPlatforms: Windows Server 2003, Windows Server 2008, Windows Server 2012, Windows XP, Windows 7, Windows 8, Windows Server 2003 R2, Windows Server 2008 R2, Windows Server 2012 R2, Windows Vista, Windows 8.1\n\nData Sources: Packet capture, Netflow/Enclave netflow, Process use of network, Malware reverse engineering, Process monitoring",
      "meta": {
        "refs": [
          "https://attack.mitre.org/wiki/Technique/T1026",
          "https://arxiv.org/ftp/arxiv/papers/1408/1408.1136.pdf"
        ],
        "uuid": "99709758-2b96-48f2-a68a-ad7fbd828091",
        "x_mitre_platforms": [
          "Windows Server 2003",
          "Windows Server 2008",
          "Windows Server 2012",
          "Windows XP",
          "Windows 7",
          "Windows 8",
          "Windows Server 2003 R2",
          "Windows Server 2008 R2",
          "Windows Server 2012 R2",
          "Windows Vista",
          "Windows 8.1"
        ],
        "x_mitre_data_sources": [
          "Packet capture",
          "Netflow/Enclave netflow",
          "Process use of network",
          "Malware reverse engineering",
          "Process monitoring"
        ]
      }
    },
    {
      "value": "Pass the Ticket",
      "description": "Pass the ticket (PtT)Legitimate Credentials are captured by Credential Dumping. A user's service tickets or ticket granting ticket (TGT) may be obtained, depending on the level of access. A service ticket allows for access to a particular resource, whereas a TGT can be used to request service tickets from the Ticket Granting Service (TGS) to access any resource the user has privileges to access.[[Citation: ADSecurity AD Kerberos Attacks]][[Citation: GentilKiwi Pass the Ticket]]\n\nSilver Tickets can be obtained for services that use Kerberos as an authentication mechanism and are used to generate tickets to access that particular resource and the system that hosts the resource (e.g., SharePoint).[[Citation: ADSecurity AD Kerberos Attacks]]\n\nGolden Tickets can be obtained for the domain using the KRBTGT account NTLM hash, which enables generation of TGTs for any account in Active Directory.[[Citation: Campbell 2014]]\n\nDetection: Audit all Kerberos authentication and credential use events and review for discrepancies. Unusual remote authentication events that correlate with other suspicious activity (such as writing and executing binaries) may indicate malicious activity.\n\nPlatforms: Windows Server 2003, Windows Server 2008, Windows Server 2012, Windows XP, Windows 7, Windows 8, Windows Server 2003 R2, Windows Server 2008 R2, Windows Server 2012 R2, Windows Vista, Windows 8.1\n\nData Sources: Authentication logs",
      "meta": {
        "refs": [
          "https://attack.mitre.org/wiki/Technique/T1097",
          "http://www.aorato.com/labs/pass-the-ticket/",
          "https://adsecurity.org/?p=556",
          "http://defcon.org/images/defcon-22/dc-22-presentations/Campbell/DEFCON-22-Christopher-Campbell-The-Secret-Life-of-Krbtgt.pdf",
          "http://blog.gentilkiwi.com/securite/mimikatz/pass-the-ticket-kerberos"
        ],
        "uuid": "a257ed11-ff3b-4216-8c9d-3938ef57064c",
        "x_mitre_platforms": [
          "Windows Server 2003",
          "Windows Server 2008",
          "Windows Server 2012",
          "Windows XP",
          "Windows 7",
          "Windows 8",
          "Windows Server 2003 R2",
          "Windows Server 2008 R2",
          "Windows Server 2012 R2",
          "Windows Vista",
          "Windows 8.1"
        ],
        "x_mitre_data_sources": [
          "Authentication logs"
        ]
      }
    },
    {
      "value": "Windows Remote Management",
      "description": "Windows Remote Management (WinRM) is the name of both a Windows service and a protocol that allows a user to interact with a remote system (e.g., run an executable, modify the Registry, modify services).[[Citation: Microsoft WinRM]] It may be called with the <code>winrm</code> command or by any number of programs such as PowerShell.[[Citation: Jacobsen 2014]]\n\nDetection: Monitor use of WinRM within an environment by tracking service execution. If it is not normally used or is disabled, then this may be an indicator of suspicious behavior. Monitor processes created and actions taken by the WinRM process or a WinRM invoked script to correlate it with other related events.\n\nPlatforms: Windows Server 2003, Windows Server 2008, Windows Server 2012, Windows XP, Windows 7, Windows 8, Windows Server 2003 R2, Windows Server 2008 R2, Windows Server 2012 R2, Windows Vista, Windows 8.1\n\nData Sources: File monitoring, Authentication logs, Netflow/Enclave netflow, Process command-line parameters, Process monitoring",
      "meta": {
        "refs": [
          "https://attack.mitre.org/wiki/Technique/T1028",
          "http://www.slideee.com/slide/lateral-movement-with-powershell",
          "http://msdn.microsoft.com/en-us/library/aa384426"
        ],
        "uuid": "c3bce4f4-9795-46c6-976e-8676300bbc39",
        "x_mitre_platforms": [
          "Windows Server 2003",
          "Windows Server 2008",
          "Windows Server 2012",
          "Windows XP",
          "Windows 7",
          "Windows 8",
          "Windows Server 2003 R2",
          "Windows Server 2008 R2",
          "Windows Server 2012 R2",
          "Windows Vista",
          "Windows 8.1"
        ],
        "x_mitre_data_sources": [
          "File monitoring",
          "Authentication logs",
          "Netflow/Enclave netflow",
          "Process command-line parameters",
          "Process monitoring"
        ]
      }
    },
    {
      "value": "Audio Capture",
      "description": "An adversary can leverage a computer's peripheral devices (e.g., microphones and webcams) or applications (e.g., voice and video call services) to capture audio recordings for the purpose of listening into sensitive conversations to gather information.\n\nMalware or scripts may be used to interact with the devices through an available API provided by the operating system or an application to capture audio. Audio files may be written to disk and exfiltrated later.\n\nDetection: Detection of this technique may be difficult due to the various APIs that may be used. Telemetry data regarding API use may not be useful depending on how a system is normally used, but may provide context to other potentially malicious activity occurring on a system.\n\nBehavior that could indicate technique use include an unknown or unusual process accessing APIs associated with devices or software that interact with the microphone, recording devices, or recording software, and a process periodically writing files to disk that contain audio data.\n\nPlatforms: Windows Server 2003, Windows Server 2008, Windows Server 2012, Windows XP, Windows 7, Windows 8, Windows Server 2003 R2, Windows Server 2008 R2, Windows Server 2012 R2, Windows Vista, Windows 8.1, Linux\n\nData Sources: API monitoring, Process monitoring, File monitoring",
      "meta": {
        "refs": [
          "https://attack.mitre.org/wiki/Technique/T1123"
        ],
        "uuid": "1035cdf2-3e5f-446f-a7a7-e8f6d7925967",
        "x_mitre_platforms": [
          "Windows Server 2003",
          "Windows Server 2008",
          "Windows Server 2012",
          "Windows XP",
          "Windows 7",
          "Windows 8",
          "Windows Server 2003 R2",
          "Windows Server 2008 R2",
          "Windows Server 2012 R2",
          "Windows Vista",
          "Windows 8.1",
          "Linux"
        ],
        "x_mitre_data_sources": [
          "API monitoring",
          "Process monitoring",
          "File monitoring"
        ]
      }
    },
    {
      "value": "Custom Cryptographic Protocol",
      "description": "Adversaries may use a custom cryptographic protocol or algorithm to hide command and control traffic. A simple scheme, such as XOR-ing the plaintext with a fixed key, will produce a very weak ciphertext.\n\nCustom encryption schemes may vary in sophistication. Analysis and reverse engineering of malware samples may be enough to discover the algorithm and encryption key used.\n\nSome adversaries may also attempt to implement their own version of a well-known cryptographic algorithm instead of using a known implementation library, which may lead to unintentional errors.[[Citation: F-Secure Cosmicduke]]\n\nDetection: If malware uses custom encryption with symmetric keys, it may be possible to obtain the algorithm and key from samples and use them to decode network traffic to detect malware communications signatures.[[Citation: Fidelis DarkComet]]\n\nIn general, analyze network data for uncommon data flows (e.g., a client sending significantly more data than it receives from a server). Processes utilizing the network that do not normally have network communication or have never been seen before are suspicious. Analyze packet contents to detect when communications do not follow the expected protocol behavior for the port that is being used.[[Citation: University of Birmingham C2]]\n\nPlatforms: Windows Server 2003, Windows Server 2008, Windows Server 2012, Windows XP, Windows 7, Windows 8, Windows Server 2003 R2, Windows Server 2008 R2, Windows Server 2012 R2, Windows Vista, Windows 8.1, Linux\n\nData Sources: Packet capture, Netflow/Enclave netflow, Process use of network, Malware reverse engineering, Process monitoring",
      "meta": {
        "refs": [
          "https://attack.mitre.org/wiki/Technique/T1024",
          "https://www.f-secure.com/documents/996508/1030745/cosmicduke%20whitepaper.pdf",
          "https://www.fidelissecurity.com/sites/default/files/FTA%201018%20looking%20at%20the%20sky%20for%20a%20dark%20comet.pdf",
          "https://arxiv.org/ftp/arxiv/papers/1408/1408.1136.pdf"
        ],
        "uuid": "3b3cbbe0-6ed3-4334-b543-3ddfd8c5642d",
        "x_mitre_platforms": [
          "Windows Server 2003",
          "Windows Server 2008",
          "Windows Server 2012",
          "Windows XP",
          "Windows 7",
          "Windows 8",
          "Windows Server 2003 R2",
          "Windows Server 2008 R2",
          "Windows Server 2012 R2",
          "Windows Vista",
          "Windows 8.1",
          "Linux"
        ],
        "x_mitre_data_sources": [
          "Packet capture",
          "Netflow/Enclave netflow",
          "Process use of network",
          "Malware reverse engineering",
          "Process monitoring"
        ]
      }
    },
    {
      "value": "Graphical User Interface",
      "description": "Cause a binary or script to execute based on interacting with the file through a graphical user interface (GUI) or in an interactive remote session such as Remote Desktop Protocol.\n\nDetection: Detection of execution through the GUI will likely lead to significant false positives. Other factors should be considered to detect misuse of services that can lead to adversaries gaining access to systems through interactive remote sessions. \n\nUnknown or unusual process launches outside of normal behavior on a particular system occurring through remote interactive sessions are suspicious. Collect and audit security logs that may indicate access to and use of [[Legitimate Credentials]] to access remote systems within the network.\n\nPlatforms: Windows Server 2003, Windows Server 2008, Windows Server 2012, Windows XP, Windows 7, Windows 8, Windows Server 2003 R2, Windows Server 2008 R2, Windows Server 2012 R2, Windows Vista, Windows 8.1\n\nData Sources: File monitoring, Binary file metadata, Process command-line parameters, Process monitoring",
      "meta": {
        "refs": [
          "https://attack.mitre.org/wiki/Technique/T1061"
        ],
        "uuid": "a6525aec-acc4-47fe-92f9-b9b4de4b9228",
        "x_mitre_platforms": [
          "Windows Server 2003",
          "Windows Server 2008",
          "Windows Server 2012",
          "Windows XP",
          "Windows 7",
          "Windows 8",
          "Windows Server 2003 R2",
          "Windows Server 2008 R2",
          "Windows Server 2012 R2",
          "Windows Vista",
          "Windows 8.1"
        ],
        "x_mitre_data_sources": [
          "File monitoring",
          "Binary file metadata",
          "Process command-line parameters",
          "Process monitoring"
        ]
      }
    },
    {
      "value": "Fallback Channels",
      "description": "Adversaries may use fallback or alternate communication channels if the primary channel is compromised or inaccessible in order to maintain reliable command and control and to avoid data transfer thresholds.\n\nDetection: Analyze network data for uncommon data flows (e.g., a client sending significantly more data than it receives from a server). Processes utilizing the network that do not normally have network communication or have never been seen before are suspicious. Analyze packet contents to detect communications that do not follow the expected protocol behavior for the port that is being used.[[Citation: University of Birmingham C2]]\n\nPlatforms: Windows Server 2003, Windows Server 2008, Windows Server 2012, Windows XP, Windows 7, Windows 8, Windows Server 2003 R2, Windows Server 2008 R2, Windows Server 2012 R2, Windows Vista, Windows 8.1, Linux\n\nData Sources: Packet capture, Netflow/Enclave netflow, Malware reverse engineering, Process use of network, Process monitoring",
      "meta": {
        "refs": [
          "https://attack.mitre.org/wiki/Technique/T1008",
          "https://arxiv.org/ftp/arxiv/papers/1408/1408.1136.pdf"
        ],
        "uuid": "f24faf46-3b26-4dbb-98f2-63460498e433",
        "x_mitre_platforms": [
          "Windows Server 2003",
          "Windows Server 2008",
          "Windows Server 2012",
          "Windows XP",
          "Windows 7",
          "Windows 8",
          "Windows Server 2003 R2",
          "Windows Server 2008 R2",
          "Windows Server 2012 R2",
          "Windows Vista",
          "Windows 8.1",
          "Linux"
        ],
        "x_mitre_data_sources": [
          "Packet capture",
          "Netflow/Enclave netflow",
          "Malware reverse engineering",
          "Process use of network",
          "Process monitoring"
        ]
      }
    },
    {
      "value": "Exploitation of Vulnerability",
      "description": "Exploitation of a software vulnerability occurs when an adversary takes advantage of a programming error in a program, service, or within the operating system software or kernel itself to execute adversary-controlled code. Exploiting software vulnerabilities may allow adversaries to run a command or binary on a remote system for lateral movement, escalate a current process to a higher privilege level, or bypass security mechanisms. Exploits may also allow an adversary access to privileged accounts and credentials. One example of this is MS14-068, which can be used to forge Kerberos tickets using domain user permissions.[[Citation: Technet MS14-068]][[Citation: ADSecurity Detecting Forged Tickets]]\n\nDetection: Software exploits may not always succeed or may cause the exploited process to become unstable or crash. Software and operating system crash reports may contain useful contextual information about attempted exploits that correlate with other malicious activity. Exploited processes may exhibit behavior that is unusual for the specific process, such as spawning additional processes or reading and writing to files.\n\nPlatforms: Windows Server 2003, Windows Server 2008, Windows Server 2012, Windows XP, Windows 7, Windows 8, Windows Server 2003 R2, Windows Server 2008 R2, Windows Server 2012 R2, Windows Vista, Windows 8.1\n\nData Sources: Windows Error Reporting, File monitoring, Process monitoring\n\nEffective Permissions: User, Administrator, SYSTEM\n\nContributors: John Lambert, Microsoft Threat Intelligence Center",
      "meta": {
        "refs": [
          "https://attack.mitre.org/wiki/Technique/T1068",
          "https://adsecurity.org/?p=1515",
          "https://technet.microsoft.com/en-us/library/security/ms14-068.aspx"
        ],
        "uuid": "b21c3b2d-02e6-45b1-980b-e69051040839",
        "x_mitre_platforms": [
          "Windows Server 2003",
          "Windows Server 2008",
          "Windows Server 2012",
          "Windows XP",
          "Windows 7",
          "Windows 8",
          "Windows Server 2003 R2",
          "Windows Server 2008 R2",
          "Windows Server 2012 R2",
          "Windows Vista",
          "Windows 8.1"
        ],
        "x_mitre_data_sources": [
          "Windows Error Reporting",
          "File monitoring",
          "Process monitoring"
        ]
      }
    },
    {
      "value": "Binary Padding",
      "description": "Some security tools inspect files with static signatures to determine if they are known malicious. Adversaries may add data to files to increase the size beyond what security tools are capable of handling or to change the file hash to avoid hash-based blacklists.\n\nDetection: Depending on the method used to pad files, a file-based signature may be capable of detecting padding using a scanning or on-access based tool. \n\nWhen executed, the resulting process from padded files may also exhibit other behavior characteristics of being used to conduct an intrusion such as system and network information [[Discovery]] or [[Lateral Movement]], which could be used as event indicators that point to the source file.\n\nPlatforms: Windows Server 2003, Windows Server 2008, Windows Server 2012, Windows XP, Windows 7, Windows 8, Windows Server 2003 R2, Windows Server 2008 R2, Windows Server 2012 R2, Windows Vista, Windows 8.1",
      "meta": {
        "refs": [
          "https://attack.mitre.org/wiki/Technique/T1009"
        ],
        "uuid": "519630c5-f03f-4882-825c-3af924935817",
        "x_mitre_platforms": [
          "Windows Server 2003",
          "Windows Server 2008",
          "Windows Server 2012",
          "Windows XP",
          "Windows 7",
          "Windows 8",
          "Windows Server 2003 R2",
          "Windows Server 2008 R2",
          "Windows Server 2012 R2",
          "Windows Vista",
          "Windows 8.1"
        ]
      }
    },
    {
      "value": "Redundant Access",
      "description": "Adversaries may use more than one remote access tool with varying command and control protocols as a hedge against detection. If one type of tool is detected and blocked or removed as a response but the organization did not gain a full understanding of the adversary's tools and access, then the adversary will be able to retain access to the network. Adversaries may also attempt to gain access to Legitimate Credentials to use External Remote Services such as external VPNs as a way to maintain access despite interruptions to remote access tools deployed within a target network.Web Shell is one such way to maintain access to a network through an externally accessible Web server.\n\nDetection: Existing methods of detecting remote access tools are helpful. Backup remote access tools or other access points may not have established command and control channels open during an intrusion, so the volume of data transferred may not be as high as the primary channel unless access is lost.\n\nDetection of tools based on beacon traffic, Legitimate Credentials and External Remote Services to collect account use information.\n\nPlatforms: Windows Server 2003, Windows Server 2008, Windows Server 2012, Windows XP, Windows 7, Windows 8, Windows Server 2003 R2, Windows Server 2008 R2, Windows Server 2012 R2, Windows Vista, Windows 8.1\n\nData Sources: Process monitoring, Process use of network, Packet capture, Network protocol analysis, File monitoring, Binary file metadata, Authentication logs",
      "meta": {
        "refs": [
          "https://attack.mitre.org/wiki/Technique/T1108",
          "https://www.fireeye.com/content/dam/fireeye-www/services/pdfs/mandiant-apt1-report.pdf"
        ],
        "uuid": "6aabc5ec-eae6-422c-8311-38d45ee9838a",
        "x_mitre_platforms": [
          "Windows Server 2003",
          "Windows Server 2008",
          "Windows Server 2012",
          "Windows XP",
          "Windows 7",
          "Windows 8",
          "Windows Server 2003 R2",
          "Windows Server 2008 R2",
          "Windows Server 2012 R2",
          "Windows Vista",
          "Windows 8.1"
        ],
        "x_mitre_data_sources": [
          "Process monitoring",
          "Process use of network",
          "Packet capture",
          "Network protocol analysis",
          "File monitoring",
          "Binary file metadata",
          "Authentication logs"
        ]
      }
    },
    {
      "value": "Data Encrypted",
      "description": "Data is encrypted before being exfiltrated in order to hide the information that is being exfiltrated from detection or to make the exfiltration less conspicuous upon inspection by a defender. The encryption is performed by a utility, programming library, or custom algorithm on the data itself and is considered separate from any encryption performed by the command and control or file transfer protocol. Common file archive formats that can encrypt files are RAR and zip.\n\nOther exfiltration techniques likely apply as well to transfer the information out of the network, such as Exfiltration Over Command and Control Channel and Exfiltration Over Alternative Protocol\n\nDetection: Encryption software and encrypted files can be detected in many ways. Common utilities that may be present on the system or brought in by an adversary may be detectable through process monitoring and monitoring for command-line arguments for known encryption utilities. This may yield a significant amount of benign events, depending on how systems in the environment are typically used. Often the encryption key is stated within command-line invocation of the software. \n\nA process that loads the Windows DLL crypt32.dll may be used to perform encryption, decryption, or verification of file signatures. \n\nNetwork traffic may also be analyzed for entropy to determine if encrypted data is being transmitted.[[Citation: Zhang 2013]] If the communications channel is unencrypted, encrypted files of known file types can be detected in transit during exfiltration with a network intrusion detection or data loss prevention system analyzing file headers.[[Citation: Wikipedia File Header Signatures]]\n\nPlatforms: Windows Server 2003, Windows Server 2008, Windows Server 2012, Windows XP, Windows 7, Windows 8, Windows Server 2003 R2, Windows Server 2008 R2, Windows Server 2012 R2, Windows Vista, Windows 8.1\n\nData Sources: File monitoring, Binary file metadata, Process command-line parameters, Process monitoring",
      "meta": {
        "refs": [
          "https://attack.mitre.org/wiki/Technique/T1022",
          "http://www.netsec.colostate.edu/~zhang/DetectingEncryptedBotnetTraffic.pdf",
          "https://en.wikipedia.org/wiki/List%20of%20file%20signatures"
        ],
        "uuid": "d54416bd-0803-41ca-870a-ce1af7c05638",
        "x_mitre_platforms": [
          "Windows Server 2003",
          "Windows Server 2008",
          "Windows Server 2012",
          "Windows XP",
          "Windows 7",
          "Windows 8",
          "Windows Server 2003 R2",
          "Windows Server 2008 R2",
          "Windows Server 2012 R2",
          "Windows Vista",
          "Windows 8.1"
        ],
        "x_mitre_data_sources": [
          "File monitoring",
          "Binary file metadata",
          "Process command-line parameters",
          "Process monitoring"
        ]
      }
    },
    {
      "value": "DLL Search Order Hijacking",
      "description": "Windows systems use a common method to look for required DLLs to load into a program.[[Citation: Microsoft DLL Search]] Adversaries may take advantage of the Windows DLL search order and programs that ambiguously specify DLLs to gain privilege escalation and persistence. \n\nAdversaries may perform DLL preloading, also called binary planting attacks,[[Citation: OWASP Binary Planting]] by placing a malicious DLL with the same name as an ambiguously specified DLL in a location that Windows searches before the legitimate DLL. Often this location is the current working directory of the program. Remote DLL preloading attacks occur when a program sets its current directory to a remote location such as a Web share before loading a DLL.[[Citation: Microsoft 2269637]] Adversaries may use this behavior to cause the program to load a malicious DLL. \n\nAdversaries may also directly modify the way a program loads DLLs by replacing an existing DLL or modifying a .manifest or .local redirection file, directory, or junction to cause the program to load a different DLL to maintain persistence or privilege escalation.[[Citation: Microsoft DLL Redirection]][[Citation: Microsoft Manifests]][[Citation: Mandiant Search Order]]\n\nIf a search order-vulnerable program is configured to run at a higher privilege level, then the adversary-controlled DLL that is loaded will also be executed at the higher level. In this case, the technique could be used for privilege escalation from user to administrator or SYSTEM or from administrator to SYSTEM, depending on the program.\n\nPrograms that fall victim to path hijacking may appear to behave normally because malicious DLLs may be configured to also load the legitimate DLLs they were meant to replace.\n\nDetection: Monitor file systems for moving, renaming, replacing, or modifying DLLs. Changes in the set of DLLs that are loaded by a process (compared with past behavior) that do not correlate with known software, patches, etc., are suspicious. Monitor DLLs loaded into a process and detect DLLs that have the same file name but abnormal paths. Modifications to or creation of .manifest and .local redirection files that do not correlate with software updates are suspicious. Disallow loading of remote DLLs.[[Citation: Microsoft DLL Preloading]]\n\nPlatforms: Windows Server 2003, Windows Server 2008, Windows Server 2012, Windows XP, Windows 7, Windows 8, Windows Server 2003 R2, Windows Server 2008 R2, Windows Server 2012 R2, Windows Vista, Windows 8.1\n\nData Sources: File monitoring, DLL monitoring, Process command-line parameters, Process monitoring\n\nEffective Permissions: User, Administrator, SYSTEM\n\nContributors: Stefan Kanthak",
      "meta": {
        "refs": [
          "https://attack.mitre.org/wiki/Technique/T1038",
          "http://blogs.technet.com/b/msrc/archive/2010/08/21/microsoft-security-advisory-2269637-released.aspx",
          "https://www.owasp.org/index.php/Binary%20planting",
          "https://www.mandiant.com/blog/dll-search-order-hijacking-revisited/",
          "http://blogs.technet.com/b/srd/archive/2010/08/23/more-information-about-dll-preloading-remote-attack-vector.aspx",
          "https://msdn.microsoft.com/en-US/library/aa375365",
          "http://msdn.microsoft.com/en-US/library/ms682600",
          "http://msdn.microsoft.com/en-US/library/ms682586"
        ],
        "uuid": "46944654-fcc1-4f63-9dad-628102376586",
        "x_mitre_platforms": [
          "Windows Server 2003",
          "Windows Server 2008",
          "Windows Server 2012",
          "Windows XP",
          "Windows 7",
          "Windows 8",
          "Windows Server 2003 R2",
          "Windows Server 2008 R2",
          "Windows Server 2012 R2",
          "Windows Vista",
          "Windows 8.1"
        ],
        "x_mitre_data_sources": [
          "File monitoring",
          "DLL monitoring",
          "Process command-line parameters",
          "Process monitoring"
        ]
      }
    },
    {
      "value": "Data from Network Shared Drive",
      "description": "Sensitive data can be collected from remote systems via shared network drives (host shared directory, network file server, etc.) that are accessible from the current system prior to cmd may be used to gather information.\n\nDetection: Monitor processes and command-line arguments for actions that could be taken to collect files from a network share. Remote access tools with built-in features may interact directly with the Windows API to gather data. Data may also be acquired through Windows system management tools such as Windows Management Instrumentation and PowerShell.\n\nPlatforms: Windows Server 2003, Windows Server 2008, Windows Server 2012, Windows XP, Windows 7, Windows 8, Windows Server 2003 R2, Windows Server 2008 R2, Windows Server 2012 R2, Windows Vista, Windows 8.1\n\nData Sources: File monitoring, Process monitoring, Process command-line parameters",
      "meta": {
        "refs": [
          "https://attack.mitre.org/wiki/Technique/T1039"
        ],
        "uuid": "ae676644-d2d2-41b7-af7e-9bed1b55898c",
        "x_mitre_platforms": [
          "Windows Server 2003",
          "Windows Server 2008",
          "Windows Server 2012",
          "Windows XP",
          "Windows 7",
          "Windows 8",
          "Windows Server 2003 R2",
          "Windows Server 2008 R2",
          "Windows Server 2012 R2",
          "Windows Vista",
          "Windows 8.1"
        ],
        "x_mitre_data_sources": [
          "File monitoring",
          "Process monitoring",
          "Process command-line parameters"
        ]
      }
    },
    {
      "value": "AppInit DLLs",
      "description": "DLLs that are specified in the AppInit_DLLs value in the Registry key <code>HKEY_LOCAL_MACHINE\\Software\\Microsoft\\Windows NT\\CurrentVersion\\Windows</code> are loaded by user32.dll into every process that loads user32.dll. In practice this is nearly every program. This value can be abused to obtain persistence by causing a DLL to be loaded into most processes on the computer.[[Citation: AppInit Registry]]\n\nThe AppInit DLL functionality is disabled in Windows 8 and later versions when secure boot is enabled.[[Citation: AppInit Secure Boot]]\n\nDetection: Monitor DLL loads by processes that load user32.dll and look for DLLs that are not recognized or not normally loaded into a process. Monitor the AppInit_DLLs Registry value for modifications that do not correlate with known software, patch cycles, etc. Tools such as Sysinternals Autoruns may also be used to detect system changes that could be attempts at persistence, including listing current AppInit DLLs.[[Citation: TechNet Autoruns]] \n\nLook for abnormal process behavior that may be due to a process loading a malicious DLL. Data and events should not be viewed in isolation, but as part of a chain of behavior that could lead to other activities, such as making network connections for [[Command and Control]], learning details about the environment through [[Discovery]], and conducting [[Lateral Movement]].\n\nPlatforms: Windows Server 2003, Windows Server 2008, Windows Server 2012, Windows XP, Windows 7, Windows 8, Windows Server 2003 R2, Windows Server 2008 R2, Windows Server 2012 R2, Windows Vista, Windows 8.1\n\nData Sources: Loaded DLLs, Process monitoring, Windows Registry\n\nEffective Permissions: Administrator, SYSTEM",
      "meta": {
        "refs": [
          "https://attack.mitre.org/wiki/Technique/T1103",
          "https://support.microsoft.com/en-us/kb/197571",
          "https://msdn.microsoft.com/en-us/library/dn280412",
          "https://technet.microsoft.com/en-us/sysinternals/bb963902"
        ],
        "uuid": "317fefa6-46c7-4062-adb6-2008cf6bcb41",
        "x_mitre_platforms": [
          "Windows Server 2003",
          "Windows Server 2008",
          "Windows Server 2012",
          "Windows XP",
          "Windows 7",
          "Windows 8",
          "Windows Server 2003 R2",
          "Windows Server 2008 R2",
          "Windows Server 2012 R2",
          "Windows Vista",
          "Windows 8.1"
        ],
        "x_mitre_data_sources": [
          "Loaded DLLs",
          "Process monitoring",
          "Windows Registry"
        ]
      }
    },
    {
      "value": "Standard Non-Application Layer Protocol",
      "description": "Use of a standard non-application layer protocol for communication between host and C2 server or among infected hosts within a network. The list of possible protocols is extensive.[[Citation: Wikipedia OSI]] Specific examples include use of network layer protocols, such as the Internet Control Message Protocol (ICMP), and transport layer protocols, such as the User Datagram Protocol (UDP).\n\nICMP communication between hosts is one example. Because ICMP is part of the Internet Protocol Suite, it is required to be implemented by all IP-compatible hosts;[[Citation: Microsoft ICMP]] however, it is not as commonly monitored as other Internet Protocols such as TCP or UDP and may be used by adversaries to hide communications.\n\nDetection: Analyze network traffic for ICMP messages or other protocols that contain abnormal data or are not normally seen within or exiting the network.\n\nAnalyze network data for uncommon data flows (e.g., a client sending significantly more data than it receives from a server). Processes utilizing the network that do not normally have network communication or have never been seen before are suspicious. Analyze packet contents to detect communications that do not follow the expected protocol behavior for the port that is being used.[[Citation: University of Birmingham C2]]\n\nPlatforms: Windows Server 2003, Windows Server 2008, Windows Server 2012, Windows XP, Windows 7, Windows 8, Windows Server 2003 R2, Windows Server 2008 R2, Windows Server 2012 R2, Windows Vista, Windows 8.1, Linux",
      "meta": {
        "refs": [
          "https://attack.mitre.org/wiki/Technique/T1095",
          "http://support.microsoft.com/KB/170292",
          "https://arxiv.org/ftp/arxiv/papers/1408/1408.1136.pdf"
        ],
        "uuid": "c21d5a77-d422-4a69-acd7-2c53c1faa34b",
        "x_mitre_platforms": [
          "Windows Server 2003",
          "Windows Server 2008",
          "Windows Server 2012",
          "Windows XP",
          "Windows 7",
          "Windows 8",
          "Windows Server 2003 R2",
          "Windows Server 2008 R2",
          "Windows Server 2012 R2",
          "Windows Vista",
          "Windows 8.1",
          "Linux"
        ]
      }
    },
    {
      "value": "Netsh Helper DLL",
      "description": "Netsh.exe (also referred to as Netshell) is a command-line scripting utility used to interact with the network configuration of a system. It contains functionality to add helper DLLs for extending functionality of the utility.[[Citation: TechNet Netsh]] The paths to registered netsh.exe helper DLLs are entered into the Windows Registry at <code>HKLM\\SOFTWARE\\Microsoft\\Netsh</code>.\n\nAdversaries can use netsh.exe with helper DLLs to proxy execution of arbitrary code in a persistent manner when netsh.exe is executed automatically with another [[Persistence]] technique or if other persistent software is present on the system that executes netsh.exe as part of its normal functionality. Examples include some VPN software that invoke netsh.exe.[[Citation: Demaske Netsh Persistence]]\n\nProof of concept code exists to load Cobalt Strike's payload using netsh.exe helper DLLs.[[Citation: Github Netsh Helper CS Beacon]]\n\nDetection: It is likely unusual for netsh.exe to have any child processes in most environments. Monitor process executions and investigate any child processes spawned by netsh.exe for malicious behavior. Monitor the <code>HKLM\\SOFTWARE\\Microsoft\\Netsh</code> registry key for any new or suspicious entries that do not correlate with known system files or benign software.[[Citation: Demaske Netsh Persistence]]\n\nPlatforms: Windows Server 2003, Windows Server 2008, Windows Server 2012, Windows XP, Windows 7, Windows 8, Windows Server 2003 R2, Windows Server 2008 R2, Windows Server 2012 R2, Windows Vista, Windows 8.1\n\nData Sources: Process monitoring, DLL monitoring, Windows Registry\n\nContributors: Matthew Demaske, Adaptforward",
      "meta": {
        "refs": [
          "https://attack.mitre.org/wiki/Technique/T1128",
          "https://htmlpreview.github.io/?https://github.com/MatthewDemaske/blogbackup/blob/master/netshell.html",
          "https://github.com/outflankbv/NetshHelperBeacon",
          "https://technet.microsoft.com/library/bb490939.aspx"
        ],
        "uuid": "bb0e0cb5-f3e4-4118-a4cb-6bf13bfbc9f2",
        "x_mitre_platforms": [
          "Windows Server 2003",
          "Windows Server 2008",
          "Windows Server 2012",
          "Windows XP",
          "Windows 7",
          "Windows 8",
          "Windows Server 2003 R2",
          "Windows Server 2008 R2",
          "Windows Server 2012 R2",
          "Windows Vista",
          "Windows 8.1"
        ],
        "x_mitre_data_sources": [
          "Process monitoring",
          "DLL monitoring",
          "Windows Registry"
        ]
      }
    },
    {
      "value": "Credential Manipulation",
      "description": "Account creation and manipulation may aid adversaries in maintaining access to credentials and certain permission levels within an environment. Manipulation could consist of creating new credentials, modifying permissions, adding or changing permission groups, modifying account settings, or modifying how authentication is performed. In order to create or manipulate accounts, the adversary must already have sufficient permissions on systems or the domain.\n\nDetection: Monitor for creation or modification of accounts in correlation with other suspicious activity. Changes may occur at unusual times or from unusual systems.\n\nUse of credentials may also occur at unusual times or to unusual systems or services and may correlate with other suspicious activity.\n\nPlatforms: Windows Server 2003, Windows Server 2008, Windows Server 2012, Windows XP, Windows 7, Windows 8, Windows Server 2003 R2, Windows Server 2008 R2, Windows Server 2012 R2, Windows Vista, Windows 8.1\n\nData Sources: Authentication logs, API monitoring",
      "meta": {
        "refs": [
          "https://attack.mitre.org/wiki/Technique/T1098"
        ],
        "uuid": "a10641f4-87b4-45a3-a906-92a149cb2c27",
        "x_mitre_platforms": [
          "Windows Server 2003",
          "Windows Server 2008",
          "Windows Server 2012",
          "Windows XP",
          "Windows 7",
          "Windows 8",
          "Windows Server 2003 R2",
          "Windows Server 2008 R2",
          "Windows Server 2012 R2",
          "Windows Vista",
          "Windows 8.1"
        ],
        "x_mitre_data_sources": [
          "Authentication logs",
          "API monitoring"
        ]
      }
    },
    {
      "value": "Remote System Discovery",
      "description": "Adversaries will likely attempt to get a listing of other systems by IP address, hostname, or other logical identifier on a network that may be used for Net.\n\nDetection: System and network discovery techniques normally occur throughout an operation as an adversary learns the environment. Data and events should not be viewed in isolation, but as part of a chain of behavior that could lead to other activities, such as Windows Management Instrumentation and PowerShell.\n\nPlatforms: Windows Server 2003, Windows Server 2008, Windows Server 2012, Windows XP, Windows 7, Windows 8, Windows Server 2003 R2, Windows Server 2008 R2, Windows Server 2012 R2, Windows Vista, Windows 8.1\n\nData Sources: Network protocol analysis, Process command-line parameters, Process monitoring, Process use of network",
      "meta": {
        "refs": [
          "https://attack.mitre.org/wiki/Technique/T1018"
        ],
        "uuid": "e358d692-23c0-4a31-9eb6-ecc13a8d7735",
        "x_mitre_platforms": [
          "Windows Server 2003",
          "Windows Server 2008",
          "Windows Server 2012",
          "Windows XP",
          "Windows 7",
          "Windows 8",
          "Windows Server 2003 R2",
          "Windows Server 2008 R2",
          "Windows Server 2012 R2",
          "Windows Vista",
          "Windows 8.1"
        ],
        "x_mitre_data_sources": [
          "Network protocol analysis",
          "Process command-line parameters",
          "Process monitoring",
          "Process use of network"
        ]
      }
    },
    {
      "value": "Permission Groups Discovery",
      "description": "Adversaries may attempt to find local system or domain-level groups and permissions settings. Examples of commands that can list groups are <code>net group /domain</code> and <code>net localgroup</code> using the Net utility.\n\nDetection: System and network discovery techniques normally occur throughout an operation as an adversary learns the environment. Data and events should not be viewed in isolation, but as part of a chain of behavior that could lead to other activities, such as Windows Management Instrumentation and PowerShell.\n\nPlatforms: Windows Server 2003, Windows Server 2008, Windows Server 2012, Windows XP, Windows 7, Windows 8, Windows Server 2003 R2, Windows Server 2008 R2, Windows Server 2012 R2, Windows Vista, Windows 8.1\n\nData Sources: API monitoring, Process command-line parameters, Process monitoring",
      "meta": {
        "refs": [
          "https://attack.mitre.org/wiki/Technique/T1069"
        ],
        "uuid": "15dbf668-795c-41e6-8219-f0447c0e64ce",
        "x_mitre_platforms": [
          "Windows Server 2003",
          "Windows Server 2008",
          "Windows Server 2012",
          "Windows XP",
          "Windows 7",
          "Windows 8",
          "Windows Server 2003 R2",
          "Windows Server 2008 R2",
          "Windows Server 2012 R2",
          "Windows Vista",
          "Windows 8.1"
        ],
        "x_mitre_data_sources": [
          "API monitoring",
          "Process command-line parameters",
          "Process monitoring"
        ]
      }
    },
    {
      "value": "File Deletion",
      "description": "Malware, tools, or other non-native files dropped or created on a system by an adversary may leave traces behind as to what was done within a network and how. Adversaries may remove these files over the course of an intrusion to keep their footprint low or remove them at the end as part of the post-intrusion cleanup process.\n\nThere are tools available from the host operating system to perform cleanup, but adversaries may use other tools as well. Examples include native cmd functions such as DEL, secure deletion tools such as Windows Sysinternals SDelete, or other third-party file deletion tools.[[Citation: Trend Micro APT Attack Tools]]\n\nDetection: It may be uncommon for events related to benign command-line functions such as DEL or third-party utilities or tools to be found in an environment, depending on the user base and how systems are typically used. Monitoring for command-line deletion functions to correlate with binaries or other files that an adversary may drop and remove may lead to detection of malicious activity. Another good practice is monitoring for known deletion and secure deletion tools that are not already on systems within an enterprise network that an adversary could introduce. Some monitoring tools may collect command-line arguments, but may not capture DEL commands since DEL is a native function within cmd.exe.\n\nPlatforms: Windows Server 2003, Windows Server 2008, Windows Server 2012, Windows XP, Windows 7, Windows 8, Windows Server 2003 R2, Windows Server 2008 R2, Windows Server 2012 R2, Windows Vista, Windows 8.1, Linux\n\nData Sources: File monitoring, Binary file metadata, Process command-line parameters\n\nContributors: Walker Johnson",
      "meta": {
        "refs": [
          "https://attack.mitre.org/wiki/Technique/T1107",
          "http://blog.trendmicro.com/trendlabs-security-intelligence/in-depth-look-apt-attack-tools-of-the-trade/"
        ],
        "uuid": "56fca983-1cf1-4fd1-bda0-5e170a37ab59",
        "x_mitre_platforms": [
          "Windows Server 2003",
          "Windows Server 2008",
          "Windows Server 2012",
          "Windows XP",
          "Windows 7",
          "Windows 8",
          "Windows Server 2003 R2",
          "Windows Server 2008 R2",
          "Windows Server 2012 R2",
          "Windows Vista",
          "Windows 8.1",
          "Linux"
        ],
        "x_mitre_data_sources": [
          "File monitoring",
          "Binary file metadata",
          "Process command-line parameters"
        ]
      }
    },
    {
      "value": "Path Interception",
      "description": "Path interception occurs when an executable is placed in a specific path so that it is executed by an application instead of the intended target. One example of this was the use of a copy of cmd in the current working directory of a vulnerable application that loads a CMD or BAT file with the CreateProcess function.DLL Search Order Hijacking.\n\nDetection: Monitor file creation for files named after partial directories and in locations that may be searched for common processes through the environment variable, or otherwise should not be user writable. Monitor the executing process for process executable paths that are named for partial directories. Monitor file creation for programs that are named after Windows system programs or programs commonly executed without a path (such as \"findstr,\" \"net,\" and \"python\"). If this activity occurs outside of known administration activity, upgrades, installations, or patches, then it may be suspicious. \n\nData and events should not be viewed in isolation, but as part of a chain of behavior that could lead to other activities, such as network connections made for [[Command and Control]], learning details about the environment through [[Discovery]], and [[Lateral Movement]].\n\nPlatforms: Windows Server 2003, Windows Server 2008, Windows Server 2012, Windows XP, Windows 7, Windows 8, Windows Server 2003 R2, Windows Server 2008 R2, Windows Server 2012 R2, Windows Vista, Windows 8.1\n\nData Sources: File monitoring, Process monitoring\n\nEffective Permissions: User, Administrator, SYSTEM\n\nContributors: Stefan Kanthak",
      "meta": {
        "refs": [
          "https://attack.mitre.org/wiki/Technique/T1034",
          "http://msdn.microsoft.com/en-us/library/ms682425",
          "http://technet.microsoft.com/en-us/library/cc723564.aspx#XSLTsection127121120120",
          "https://isc.sans.edu/diary/Help+eliminate+unquoted+path+vulnerabilities/14464",
          "https://msdn.microsoft.com/en-us/library/fd7hxfdd.aspx",
          "http://msdn.microsoft.com/en-us/library/ms687393",
          "http://support.microsoft.com/KB/103000",
          "https://blogs.technet.microsoft.com/srd/2014/04/08/ms14-019-fixing-a-binary-hijacking-via-cmd-or-bat-file/"
        ],
        "uuid": "c4ad009b-6e13-4419-8d21-918a1652de02",
        "x_mitre_platforms": [
          "Windows Server 2003",
          "Windows Server 2008",
          "Windows Server 2012",
          "Windows XP",
          "Windows 7",
          "Windows 8",
          "Windows Server 2003 R2",
          "Windows Server 2008 R2",
          "Windows Server 2012 R2",
          "Windows Vista",
          "Windows 8.1"
        ],
        "x_mitre_data_sources": [
          "File monitoring",
          "Process monitoring"
        ]
      }
    },
    {
      "value": "Bootkit",
      "description": "A bootkit is a malware variant that modifies the boot sectors of a hard drive, including the Master Boot Record (MBR) and Volume Boot Record (VBR).[[Citation: MTrends 2016]]\n\nAdversaries may use bootkits to persist on systems at a layer below the operating system, which may make it difficult to perform full remediation unless an organization suspects one was used and can act accordingly.\n\n===Master Boot Record===\nThe MBR is the section of disk that is first loaded after completing hardware initialization by the BIOS. It is the location of the boot loader. An adversary who has raw access to the boot drive may overwrite this area, diverting execution during startup from the normal boot loader to adversary code.[[Citation: Lau 2011]]\n\n===Volume Boot Record===\nThe MBR passes control of the boot process to the VBR. Similar to the case of MBR, an adversary who has raw access to the boot drive may overwrite the VBR to divert execution during startup to adversary code.\n\nDetection: Perform integrity checking on MBR and VBR. Take snapshots of MBR and VBR and compare against known good samples. Report changes to MBR and VBR as they occur for indicators of suspicious activity and further analysis.\n\nPlatforms: Windows Server 2003, Windows Server 2008, Windows Server 2012, Windows XP, Windows 7, Windows 8, Windows Server 2003 R2, Windows Server 2008 R2, Windows Server 2012 R2, Windows Vista, Windows 8.1, Linux\n\nData Sources: API monitoring, MBR, VBR",
      "meta": {
        "refs": [
          "https://attack.mitre.org/wiki/Technique/T1067",
          "http://www.symantec.com/connect/blogs/are-mbr-infections-back-fashion",
          "https://www.fireeye.com/content/dam/fireeye-www/regional/fr%20FR/offers/pdfs/ig-mtrends-2016.pdf"
        ],
        "uuid": "02fefddc-fb1b-423f-a76b-7552dd211d4d",
        "x_mitre_platforms": [
          "Windows Server 2003",
          "Windows Server 2008",
          "Windows Server 2012",
          "Windows XP",
          "Windows 7",
          "Windows 8",
          "Windows Server 2003 R2",
          "Windows Server 2008 R2",
          "Windows Server 2012 R2",
          "Windows Vista",
          "Windows 8.1",
          "Linux"
        ],
        "x_mitre_data_sources": [
          "API monitoring",
          "MBR",
          "VBR"
        ]
      }
    },
    {
      "value": "Indicator Removal on Host",
      "description": "Adversaries may delete or alter generated event files on a host system, including potentially captured files such as quarantined malware. This may compromise the integrity of the security solution, causing events to go unreported, or make forensic analysis and incident response more difficult due to lack of sufficient data to determine what occurred.\n\nDetection: File system monitoring may be used to detect improper deletion or modification of indicator files. Events not stored on the file system will require different detection mechanisms.\n\nPlatforms: Windows Server 2003, Windows Server 2008, Windows Server 2012, Windows XP, Windows 7, Windows 8, Windows Server 2003 R2, Windows Server 2008 R2, Windows Server 2012 R2, Windows Vista, Windows 8.1\n\nData Sources: File monitoring, Process command-line parameters, Process monitoring",
      "meta": {
        "refs": [
          "https://attack.mitre.org/wiki/Technique/T1070"
        ],
        "uuid": "799ace7f-e227-4411-baa0-8868704f2a69",
        "x_mitre_platforms": [
          "Windows Server 2003",
          "Windows Server 2008",
          "Windows Server 2012",
          "Windows XP",
          "Windows 7",
          "Windows 8",
          "Windows Server 2003 R2",
          "Windows Server 2008 R2",
          "Windows Server 2012 R2",
          "Windows Vista",
          "Windows 8.1"
        ],
        "x_mitre_data_sources": [
          "File monitoring",
          "Process command-line parameters",
          "Process monitoring"
        ]
      }
    },
    {
      "value": "Exfiltration Over Other Network Medium",
      "description": "Exfiltration could occur over a different network medium than the command and control channel. If the command and control network is a wired Internet connection, the exfiltration may occur, for example, over a WiFi connection, modem, cellular data connection, Bluetooth, or another radio frequency (RF) channel. Adversaries could choose to do this if they have sufficient access or proximity, and the connection might not be secured or defended as well as the primary Internet-connected channel because it is not routed through the same enterprise network.\n\nDetection: Processes utilizing the network that do not normally have network communication or have never been seen before. Processes that normally require user-driven events to access the network (for example, a mouse click or key press) but access the network without such may be malicious.\n\nPlatforms: Windows Server 2003, Windows Server 2008, Windows Server 2012, Windows XP, Windows 7, Windows 8, Windows Server 2003 R2, Windows Server 2008 R2, Windows Server 2012 R2, Windows Vista, Windows 8.1\n\nData Sources: User interface, Process monitoring\n\nContributors: Itzik Kotler, SafeBreach",
      "meta": {
        "refs": [
          "https://attack.mitre.org/wiki/Technique/T1011"
        ],
        "uuid": "51ea26b1-ff1e-4faa-b1a0-1114cd298c87",
        "x_mitre_platforms": [
          "Windows Server 2003",
          "Windows Server 2008",
          "Windows Server 2012",
          "Windows XP",
          "Windows 7",
          "Windows 8",
          "Windows Server 2003 R2",
          "Windows Server 2008 R2",
          "Windows Server 2012 R2",
          "Windows Vista",
          "Windows 8.1"
        ],
        "x_mitre_data_sources": [
          "User interface",
          "Process monitoring"
        ]
      }
    },
    {
      "value": "Data from Local System",
      "description": "Sensitive data can be collected from local system sources, such as the file system or databases of information residing on the system prior to Command-Line Interface, such as cmd, which has functionality to interact with the file system to gather information. Some adversaries may also use Automated Collection on the local system.\n\nDetection: Monitor processes and command-line arguments for actions that could be taken to collect files from a system. Remote access tools with built-in features may interact directly with the Windows API to gather data. Data may also be acquired through Windows system management tools such as Windows Management Instrumentation and PowerShell.\n\nPlatforms: Windows Server 2003, Windows Server 2008, Windows Server 2012, Windows XP, Windows 7, Windows 8, Windows Server 2003 R2, Windows Server 2008 R2, Windows Server 2012 R2, Windows Vista, Windows 8.1\n\nData Sources: File monitoring, Process monitoring, Process command-line parameters",
      "meta": {
        "refs": [
          "https://attack.mitre.org/wiki/Technique/T1005"
        ],
        "uuid": "3c4a2599-71ee-4405-ba1e-0e28414b4bc5",
        "x_mitre_platforms": [
          "Windows Server 2003",
          "Windows Server 2008",
          "Windows Server 2012",
          "Windows XP",
          "Windows 7",
          "Windows 8",
          "Windows Server 2003 R2",
          "Windows Server 2008 R2",
          "Windows Server 2012 R2",
          "Windows Vista",
          "Windows 8.1"
        ],
        "x_mitre_data_sources": [
          "File monitoring",
          "Process monitoring",
          "Process command-line parameters"
        ]
      }
    },
    {
      "value": "Web Shell",
      "description": "A Web shell is a Web script that is placed on an openly accessible Web server to allow an adversary to use the Web server as a gateway into a network. A Web shell may provide a set of functions to execute or a command-line interface on the system that hosts the Web server. In addition to a server-side script, a Web shell may have a client interface program that is used to talk to the Web server (see, for example, China Chopper Web shell client).Redundant Access or as a persistence mechanism in case an adversary's primary access methods are detected and removed.\n\nDetection: Web shells can be difficult to detect. Unlike other forms of persistent remote access, they do not initiate connections. The portion of the Web shell that is on the server may be small and innocuous looking. The PHP version of the China Chopper Web shell, for example, is the following short payload:cmd or accessing files that are not in the Web directory. File monitoring may be used to detect changes to files in the Web directory of a Web server that do not match with updates to the Web server's content and may indicate implantation of a Web shell script. Log authentication attempts to the server and any unusual traffic patterns to or from the server and internal network.[[Citation: US-CERT Alert TA15-314A Web Shells]]\n\nPlatforms: Windows Server 2003, Windows Server 2008, Windows Server 2012, Windows XP, Windows 7, Windows 8, Windows Server 2003 R2, Windows Server 2008 R2, Windows Server 2012 R2, Windows Vista, Windows 8.1\n\nData Sources: Anti-virus, File monitoring, Process monitoring, Authentication logs, Netflow/Enclave netflow\n\nEffective Permissions: User, SYSTEM",
      "meta": {
        "refs": [
          "https://attack.mitre.org/wiki/Technique/T1100",
          "https://www.us-cert.gov/ncas/alerts/TA15-314A",
          "https://www.fireeye.com/blog/threat-research/2013/08/breaking-down-the-china-chopper-web-shell-part-i.html"
        ],
        "uuid": "c16e5409-ee53-4d79-afdc-4099dc9292df",
        "x_mitre_platforms": [
          "Windows Server 2003",
          "Windows Server 2008",
          "Windows Server 2012",
          "Windows XP",
          "Windows 7",
          "Windows 8",
          "Windows Server 2003 R2",
          "Windows Server 2008 R2",
          "Windows Server 2012 R2",
          "Windows Vista",
          "Windows 8.1"
        ],
        "x_mitre_data_sources": [
          "Anti-virus",
          "File monitoring",
          "Process monitoring",
          "Authentication logs",
          "Netflow/Enclave netflow"
        ]
      }
    },
    {
      "value": "Service Registry Permissions Weakness",
      "description": "Windows stores local service configuration information in the Registry under <code>HKLM\\SYSTEM\\CurrentControlSet\\Services</code>. The information stored under a service's Registry keys can be manipulated to modify a service's execution parameters through tools such as the service controller, sc.exe, PowerShell, or Reg. Access to Registry keys is controlled through Access Control Lists and permissions.Windows Management Instrumentation and PowerShell, so additional logging may need to be configured to gather the appropriate data.\n\nPlatforms: Windows Server 2003, Windows Server 2008, Windows Server 2012, Windows XP, Windows 7, Windows 8, Windows Server 2003 R2, Windows Server 2008 R2, Windows Server 2012 R2, Windows Vista, Windows 8.1\n\nData Sources: Windows Registry, Services, Process command-line parameters\n\nEffective Permissions: SYSTEM",
      "meta": {
        "refs": [
          "https://attack.mitre.org/wiki/Technique/T1058",
          "https://technet.microsoft.com/en-us/sysinternals/bb963902",
          "https://msdn.microsoft.com/library/windows/desktop/ms724878.aspx"
        ],
        "uuid": "39a130e1-6ab7-434a-8bd2-418e7d9d6427",
        "x_mitre_platforms": [
          "Windows Server 2003",
          "Windows Server 2008",
          "Windows Server 2012",
          "Windows XP",
          "Windows 7",
          "Windows 8",
          "Windows Server 2003 R2",
          "Windows Server 2008 R2",
          "Windows Server 2012 R2",
          "Windows Vista",
          "Windows 8.1"
        ],
        "x_mitre_data_sources": [
          "Windows Registry",
          "Services",
          "Process command-line parameters"
        ]
      }
    },
    {
      "value": "Windows Admin Shares",
      "description": "Windows systems have hidden network shares that are accessible only to administrators and provide the ability for remote file copy and other administrative functions. Example network shares include <code>C$</code>, <code>ADMIN$</code>, and <code>IPC$</code>. \n\nAdversaries may use this technique in conjunction with administrator-level Legitimate Credentials to remotely access a networked system over server message block (SMB)Scheduled Task, Service Execution, and Windows Management Instrumentation. Adversaries can also use NTLM hashes to access administrator shares on systems with Pass the Hash and certain configuration and patch levels.Net utility can be used to connect to Windows admin shares on remote systems using <code>net use</code> commands with valid credentials.Net, on the command-line interface and [[Discovery]] techniques that could be used to find remotely accessible systems.\n\nPlatforms: Windows Server 2003, Windows Server 2008, Windows Server 2012, Windows XP, Windows 7, Windows 8, Windows Server 2003 R2, Windows Server 2008 R2, Windows Server 2012 R2, Windows Vista, Windows 8.1\n\nData Sources: Process use of network, Authentication logs, Process command-line parameters, Process monitoring",
      "meta": {
        "refs": [
          "https://attack.mitre.org/wiki/Technique/T1077",
          "https://en.wikipedia.org/wiki/Server%20Message%20Block",
          "https://technet.microsoft.com/bb490717.aspx",
          "http://support.microsoft.com/kb/314984",
          "http://blogs.technet.com/b/jepayne/archive/2015/11/24/monitoring-what-matters-windows-event-forwarding-for-everyone-even-if-you-already-have-a-siem.aspx",
          "http://blogs.technet.com/b/jepayne/archive/2015/11/27/tracking-lateral-movement-part-one-special-groups-and-specific-service-accounts.aspx",
          "https://technet.microsoft.com/en-us/library/cc787851.aspx"
        ],
        "uuid": "ffe742ed-9100-4686-9e00-c331da544787",
        "x_mitre_platforms": [
          "Windows Server 2003",
          "Windows Server 2008",
          "Windows Server 2012",
          "Windows XP",
          "Windows 7",
          "Windows 8",
          "Windows Server 2003 R2",
          "Windows Server 2008 R2",
          "Windows Server 2012 R2",
          "Windows Vista",
          "Windows 8.1"
        ],
        "x_mitre_data_sources": [
          "Process use of network",
          "Authentication logs",
          "Process command-line parameters",
          "Process monitoring"
        ]
      }
    },
    {
      "value": "Winlogon Helper DLL",
      "description": "Winlogon is a part of some Windows versions that performs actions at logon. In Windows systems prior to Windows Vista, a Registry key can be modified that causes Winlogon to load a DLL on startup. Adversaries may take advantage of this feature to load adversarial code at startup for persistence.\n\nDetection: Monitor for changes to registry entries in <code>HKLM\\Software\\Microsoft\\Windows NT\\CurrentVersion\\Winlogon\\Notify</code> that do not correlate with known software, patch cycles, etc. Tools such as Sysinternals Autoruns may also be used to detect system changes that could be attempts at persistence, including listing current Winlogon helper values.[[Citation: TechNet Autoruns]]  New DLLs written to System32 that do not correlate with known good software or patching may also be suspicious.\n\nLook for abnormal process behavior that may be due to a process loading a malicious DLL. Data and events should not be viewed in isolation, but as part of a chain of behavior that could lead to other activities, such as network connections made for [[Command and Control]], learning details about the environment through [[Discovery]], and [[Lateral Movement]].\n\nPlatforms: Windows Server 2003, Windows XP, Windows Server 2003 R2\n\nData Sources: Windows Registry, File monitoring, Process monitoring",
      "meta": {
        "refs": [
          "https://attack.mitre.org/wiki/Technique/T1004",
          "https://technet.microsoft.com/en-us/sysinternals/bb963902"
        ],
        "uuid": "514ede4c-78b3-4d78-a38b-daddf6217a79",
        "x_mitre_platforms": [
          "Windows Server 2003",
          "Windows XP",
          "Windows Server 2003 R2"
        ],
        "x_mitre_data_sources": [
          "Windows Registry",
          "File monitoring",
          "Process monitoring"
        ]
      }
    },
    {
      "value": "Remote Services",
      "description": "An adversary may use valid credentials to log into a service specifically designed to accept remote connections, such as telnet, SSH, and VNC. The adversary may then perform actions as the logged-on user.\n\nDetection: Correlate use of login activity related to remote services with unusual behavior or other malicious or suspicious activity. Adversaries will likely need to learn about an environment and the relationships between systems through [[Discovery]] techniques prior to attempting [[Lateral Movement]].\n\nPlatforms: Windows Server 2003, Windows Server 2008, Windows Server 2012, Windows XP, Windows 7, Windows 8, Windows Server 2003 R2, Windows Server 2008 R2, Windows Server 2012 R2, Windows Vista, Windows 8.1\n\nData Sources: Authentication logs",
      "meta": {
        "refs": [
          "https://attack.mitre.org/wiki/Technique/T1021"
        ],
        "uuid": "54a649ff-439a-41a4-9856-8d144a2551ba",
        "x_mitre_platforms": [
          "Windows Server 2003",
          "Windows Server 2008",
          "Windows Server 2012",
          "Windows XP",
          "Windows 7",
          "Windows 8",
          "Windows Server 2003 R2",
          "Windows Server 2008 R2",
          "Windows Server 2012 R2",
          "Windows Vista",
          "Windows 8.1"
        ],
        "x_mitre_data_sources": [
          "Authentication logs"
        ]
      }
    },
    {
      "value": "Accessibility Features",
      "description": "Windows contains accessibility features that may be launched with a key combination before a user has logged in (for example, when the user is on the Windows logon screen). An adversary can modify the way these programs are launched to get a command prompt or backdoor without logging in to the system.\n\nTwo of these accessibility programs are <code>C:\\Windows\\System32\\utilman.exe</code>, launched when the Windows + U key combination is pressed, and <code>C:\\Windows\\System32\\sethc.exe</code>, launched when the shift key is pressed five times. The program \"sethc.exe\" is often referred to as sticky keys, and has been used by adversaries for unauthenticated access through a remote desktop login screen.Remote Desktop Protocol will cause the replaced file to be executed with SYSTEM privileges.[[Citation: Tilbury 2014]]\n\nOn Windows Vista and later as well as Windows Server 2008 and later, a Registry key may be modified that configures \"cmd.exe,\" or another program that provides backdoor access, as a \"debugger\" for the accessibility program (e.g., \"utilman.exe\"). After the Registry is modified, pressing the appropriate key combination at the login screen while at the keyboard or when connected with RDP will cause the \"debugger\" program to be executed with SYSTEM privileges.[[Citation: Tilbury 2014]]\n\nDetection: Changes to accessibility utility binaries or binary paths that do not correlate with known software, patch cycles, etc., are suspicious. Command line invocation of tools capable of modifying the Registry for associated keys are also suspicious. Utility arguments and the binaries themselves should be monitored for changes. Monitor Registry keys within <code>HKEY_LOCAL_MACHINE\\SOFTWARE\\Microsoft\\Windows NT\\CurrentVersion\\Image File Execution Options</code>.\n\nPlatforms: Windows Server 2003, Windows Server 2008, Windows Server 2012, Windows XP, Windows 7, Windows 8, Windows Server 2003 R2, Windows Server 2008 R2, Windows Server 2012 R2, Windows Vista, Windows 8.1\n\nData Sources: Windows Registry, File monitoring, Process monitoring\n\nEffective Permissions: SYSTEM",
      "meta": {
        "refs": [
          "https://attack.mitre.org/wiki/Technique/T1015",
          "https://www.fireeye.com/blog/threat-research/2012/08/hikit-rootkit-advanced-persistent-attack-techniques-part-1.html",
          "http://blog.crowdstrike.com/registry-analysis-with-crowdresponse/"
        ],
        "uuid": "9b99b83a-1aac-4e29-b975-b374950551a3",
        "x_mitre_platforms": [
          "Windows Server 2003",
          "Windows Server 2008",
          "Windows Server 2012",
          "Windows XP",
          "Windows 7",
          "Windows 8",
          "Windows Server 2003 R2",
          "Windows Server 2008 R2",
          "Windows Server 2012 R2",
          "Windows Vista",
          "Windows 8.1"
        ],
        "x_mitre_data_sources": [
          "Windows Registry",
          "File monitoring",
          "Process monitoring"
        ]
      }
    },
    {
      "value": "Taint Shared Content",
      "description": "Content stored on network drives or in other shared locations may be tainted by adding malicious programs, scripts, or exploit code to otherwise valid files. Once a user opens the shared tainted content, the malicious portion can be executed to run the adversary's code on a remote system. Adversaries may use tainted shared content to move laterally.\n\nDetection: Processes that write or overwrite many files to a network shared directory may be suspicious. Monitor processes that are executed from removable media for malicious or abnormal activity such as network connections due to [[Command and Control]] and possible network [[Discovery]] techniques.\n\nPlatforms: Windows Server 2003, Windows Server 2008, Windows Server 2012, Windows XP, Windows 7, Windows 8, Windows Server 2003 R2, Windows Server 2008 R2, Windows Server 2012 R2, Windows Vista, Windows 8.1\n\nData Sources: File monitoring, Process monitoring",
      "meta": {
        "refs": [
          "https://attack.mitre.org/wiki/Technique/T1080"
        ],
        "uuid": "246fd3c7-f5e3-466d-8787-4c13d9e3b61c",
        "x_mitre_platforms": [
          "Windows Server 2003",
          "Windows Server 2008",
          "Windows Server 2012",
          "Windows XP",
          "Windows 7",
          "Windows 8",
          "Windows Server 2003 R2",
          "Windows Server 2008 R2",
          "Windows Server 2012 R2",
          "Windows Vista",
          "Windows 8.1"
        ],
        "x_mitre_data_sources": [
          "File monitoring",
          "Process monitoring"
        ]
      }
    },
    {
      "value": "External Remote Services",
      "description": "Remote services such as VPNs, Citrix, and other access mechanisms allow users to connect to internal enterprise network resources from external locations. There are often remote service gateways that manage connections and credential authentication for these services.\n\nAdversaries may use remote services to access and persist within a network.Legitimate Credentials to use the service is often a requirement, which could be obtained through credential pharming or by obtaining the credentials from users after compromising the enterprise network. Access to remote services may be used as part of Redundant Access during an operation.\n\nDetection: Follow best practices for detecting adversary use of Legitimate Credentials for authenticating to remote services. Collect authentication logs and analyze for unusual access patterns, windows of activity, and access outside of normal business hours.\n\nPlatforms: Windows Server 2003, Windows Server 2008, Windows Server 2012, Windows XP, Windows 7, Windows 8, Windows Server 2003 R2, Windows Server 2008 R2, Windows Server 2012 R2, Windows Vista, Windows 8.1\n\nData Sources: Authentication logs\n\nContributors: Daniel Oakley",
      "meta": {
        "refs": [
          "https://attack.mitre.org/wiki/Technique/T1133",
          "https://www.volexity.com/blog/2015/10/07/virtual-private-keylogging-cisco-web-vpns-leveraged-for-access-and-persistence/"
        ],
        "uuid": "10d51417-ee35-4589-b1ff-b6df1c334e8d",
        "x_mitre_platforms": [
          "Windows Server 2003",
          "Windows Server 2008",
          "Windows Server 2012",
          "Windows XP",
          "Windows 7",
          "Windows 8",
          "Windows Server 2003 R2",
          "Windows Server 2008 R2",
          "Windows Server 2012 R2",
          "Windows Vista",
          "Windows 8.1"
        ],
        "x_mitre_data_sources": [
          "Authentication logs"
        ]
      }
    },
    {
      "value": "Application Deployment Software",
      "description": "Adversaries may deploy malicious software to systems within a network using application deployment systems employed by enterprise administrators. The permissions required for this action vary by system configuration; local credentials may be sufficient with direct access to the deployment server, or specific domain credentials may be required. However, the system may require an administrative account to log in or to perform software deployment.\n\nAccess to a network-wide or enterprise-wide software deployment system enables an adversary to have remote code execution on all systems that are connected to such a system. The access may be used to laterally move to systems, gather information, or cause a specific effect, such as wiping the hard drives on all endpoints.\n\nDetection: Monitor application deployments from a secondary system. Perform application deployment at regular times so that irregular deployment activity stands out. Monitor process activity that does not correlate to known good software. Monitor account login activity on the deployment system.\n\nPlatforms: Windows Server 2003, Windows Server 2008, Windows Server 2012, Windows XP, Windows 7, Windows 8, Windows Server 2003 R2, Windows Server 2008 R2, Windows Server 2012 R2, Windows Vista, Windows 8.1\n\nData Sources: File monitoring, Process use of network, Process monitoring",
      "meta": {
        "refs": [
          "https://attack.mitre.org/wiki/Technique/T1017"
        ],
        "uuid": "327f3cc5-eea1-42d4-a6cd-ed34b7ce8f61",
        "x_mitre_platforms": [
          "Windows Server 2003",
          "Windows Server 2008",
          "Windows Server 2012",
          "Windows XP",
          "Windows 7",
          "Windows 8",
          "Windows Server 2003 R2",
          "Windows Server 2008 R2",
          "Windows Server 2012 R2",
          "Windows Vista",
          "Windows 8.1"
        ],
        "x_mitre_data_sources": [
          "File monitoring",
          "Process use of network",
          "Process monitoring"
        ]
      }
    },
    {
      "value": "Automated Collection",
      "description": "Once established within a system or network, an adversary may use automated techniques for collecting internal data. Methods for performing this technique could include use of Scripting to search for and copy information fitting set criteria such as file type, location, or name at specific time intervals. This functionality could also be built into remote access tools. \n\nThis technique may incorporate use of other techniques such as File and Directory Discovery and Remote File Copy to identify and move files.\n\nDetection: Depending on the method used, actions could include common file system commands and parameters on the command-line interface within batch files or scripts. A sequence of actions like this may be unusual, depending on the system and network environment. Automated collection may occur along with other techniques such as Data Staged. As such, file access monitoring that shows an unusual process performing sequential file opens and potentially copy actions to another location on the file system for many files at once may indicate automated collection behavior. Remote access tools with built-in features may interact directly with the Windows API to gather data. Data may also be acquired through Windows system management tools such as Windows Management Instrumentation and PowerShell.\n\nPlatforms: Windows Server 2003, Windows Server 2008, Windows Server 2012, Windows XP, Windows 7, Windows 8, Windows Server 2003 R2, Windows Server 2008 R2, Windows Server 2012 R2, Windows Vista, Windows 8.1\n\nData Sources: File monitoring, Process command-line parameters, Data loss prevention",
      "meta": {
        "refs": [
          "https://attack.mitre.org/wiki/Technique/T1119"
        ],
        "uuid": "30208d3e-0d6b-43c8-883e-44462a514619",
        "x_mitre_platforms": [
          "Windows Server 2003",
          "Windows Server 2008",
          "Windows Server 2012",
          "Windows XP",
          "Windows 7",
          "Windows 8",
          "Windows Server 2003 R2",
          "Windows Server 2008 R2",
          "Windows Server 2012 R2",
          "Windows Vista",
          "Windows 8.1"
        ],
        "x_mitre_data_sources": [
          "File monitoring",
          "Process command-line parameters",
          "Data loss prevention"
        ]
      }
    },
    {
      "value": "Security Support Provider",
      "description": "Windows Security Support Provider (SSP) DLLs are loaded into the Local Security Authority (LSA) process at system start. Once loaded into the LSA, SSP DLLs have access to encrypted and plaintext passwords that are stored in Windows, such as any logged-on user's Domain password or smart card PINs. The SSP configuration is stored in two Registry keys: <code>HKLM\\SYSTEM\\CurrentControlSet\\Control\\Lsa\\Security Packages</code> and <code>HKLM\\SYSTEM\\CurrentControlSet\\Control\\Lsa\\OSConfig\\Security Packages</code>. An adversary may modify these Registry keys to add new SSPs, which will be loaded the next time the system boots, or when the AddSecurityPackage Windows API function is called.\n[[Citation: Graeber 2014]]\n\nDetection: Monitor the Registry for changes to the SSP Registry keys. Monitor the LSA process for DLL loads. Windows 8.1 and Windows Server 2012 R2 may generate events when unsigned SSP DLLs try to load into the LSA by setting the Registry key <code>HKLM\\SOFTWARE\\Microsoft\\Windows NT\\CurrentVersion\\Image File Execution Options\\LSASS.exe</code> with AuditLevel = 8.[[Citation: Graeber 2014]][[Citation: Microsoft Configure LSA]]\n\nPlatforms: Windows Server 2003, Windows Server 2008, Windows Server 2012, Windows XP, Windows 7, Windows 8, Windows Server 2003 R2, Windows Server 2008 R2, Windows Server 2012 R2, Windows Vista, Windows 8.1\n\nData Sources: DLL monitoring, Windows Registry, Loaded DLLs",
      "meta": {
        "refs": [
          "https://attack.mitre.org/wiki/Technique/T1101",
          "https://technet.microsoft.com/en-us/library/dn408187.aspx",
          "http://docplayer.net/20839173-Analysis-of-malicious-security-support-provider-dlls.html"
        ],
        "uuid": "6c174520-beea-43d9-aac6-28fb77f3e446",
        "x_mitre_platforms": [
          "Windows Server 2003",
          "Windows Server 2008",
          "Windows Server 2012",
          "Windows XP",
          "Windows 7",
          "Windows 8",
          "Windows Server 2003 R2",
          "Windows Server 2008 R2",
          "Windows Server 2012 R2",
          "Windows Vista",
          "Windows 8.1"
        ],
        "x_mitre_data_sources": [
          "DLL monitoring",
          "Windows Registry",
          "Loaded DLLs"
        ]
      }
    },
    {
      "value": "Rundll32",
      "description": "The rundll32.exe program can be called to execute an arbitrary binary. Adversaries may take advantage of this functionality to proxy execution of code to avoid triggering security tools that may not monitor execution of the rundll32.exe process because of whitelists or false positives from Windows using rundll32.exe for normal operations.\n\nDetection: Use process monitoring to monitor the execution and arguments of rundll32.exe. Compare recent invocations of rundll32.exe with prior history of known good arguments and loaded DLLs to determine anomalous and potentially adversarial activity. Command arguments used with the rundll32.exe invocation may also be useful in determining the origin and purpose of the DLL being loaded.\n\nPlatforms: Windows Server 2003, Windows Server 2008, Windows Server 2012, Windows XP, Windows 7, Windows 8, Windows Server 2003 R2, Windows Server 2008 R2, Windows Server 2012 R2, Windows Vista, Windows 8.1\n\nData Sources: File monitoring, Binary file metadata, Process command-line parameters, Process monitoring",
      "meta": {
        "refs": [
          "https://attack.mitre.org/wiki/Technique/T1085"
        ],
        "uuid": "62b8c999-dcc0-4755-bd69-09442d9359f5",
        "x_mitre_platforms": [
          "Windows Server 2003",
          "Windows Server 2008",
          "Windows Server 2012",
          "Windows XP",
          "Windows 7",
          "Windows 8",
          "Windows Server 2003 R2",
          "Windows Server 2008 R2",
          "Windows Server 2012 R2",
          "Windows Vista",
          "Windows 8.1"
        ],
        "x_mitre_data_sources": [
          "File monitoring",
          "Binary file metadata",
          "Process command-line parameters",
          "Process monitoring"
        ]
      }
    },
    {
      "value": "Network Sniffing",
      "description": "Network sniffing refers to using the network interface on a system to monitor or capture information sent over a wired or wireless connection.\n\nUser credentials may be sent over an insecure, unencrypted protocol that can be captured and obtained through network packet analysis. An adversary may place a network interface into promiscuous mode, using a utility to capture traffic in transit over the network or use span ports to capture a larger amount of data. In addition, Address Resolution Protocol (ARP) and Domain Name Service (DNS) poisoning can be used to capture credentials to websites, proxies, and internal systems by redirecting traffic to an adversary.\n\nDetection: Detecting the events leading up to sniffing network traffic may be the best method of detection. From the host level, an adversary would likely need to perform a man-in-the-middle attack against other devices on a wired network in order to capture traffic that was not to or from the current compromised system. This change in the flow of information is detectable at the enclave network level. Monitor for ARP spoofing and gratuitous ARP broadcasts. Detecting compromised network devices is a bit more challenging. Auditing administrator logins, configuration changes, and device images is required to detect malicious changes.\n\nPlatforms: Windows Server 2003, Windows Server 2008, Windows Server 2012, Windows XP, Windows 7, Windows 8, Windows Server 2003 R2, Windows Server 2008 R2, Windows Server 2012 R2, Windows Vista, Windows 8.1\n\nData Sources: Network device logs, Host network interface, Netflow/Enclave netflow",
      "meta": {
        "refs": [
          "https://attack.mitre.org/wiki/Technique/T1040"
        ],
        "uuid": "3257eb21-f9a7-4430-8de1-d8b6e288f529",
        "x_mitre_platforms": [
          "Windows Server 2003",
          "Windows Server 2008",
          "Windows Server 2012",
          "Windows XP",
          "Windows 7",
          "Windows 8",
          "Windows Server 2003 R2",
          "Windows Server 2008 R2",
          "Windows Server 2012 R2",
          "Windows Vista",
          "Windows 8.1"
        ],
        "x_mitre_data_sources": [
          "Network device logs",
          "Host network interface",
          "Netflow/Enclave netflow"
        ]
      }
    },
    {
      "value": "Local Port Monitor",
      "description": "A port monitor can be set through the AddMonitor API call to set a DLL to be loaded at startup.[[Citation: AddMonitor]] This DLL can be located in <code>C:\\Windows\\System32</code> and will be loaded by the print spooler service, spoolsv.exe, on boot.[[Citation: Bloxham]] Alternatively, an arbitrary DLL can be loaded if permissions allow writing a fully-qualified pathname for that DLL to <code>HKLM\\SYSTEM\\CurrentControlSet\\Control\\Print\\Monitors</code>.[[Citation: Bloxham]] The spoolsv.exe process also runs under SYSTEM level permissions.\n\nAdversaries can use this technique to load malicious code at startup that will persist on system reboot and execute as SYSTEM.\n\nDetection: * Monitor process API calls to AddMonitor.\n* Monitor DLLs that are loaded by spoolsv.exe for DLLs that are abnormal.\n* New DLLs written to the System32 directory that do not correlate with known good software or patching may be suspicious.\n* Monitor registry writes to <code>HKLM\\SYSTEM\\CurrentControlSet\\Control\\Print\\Monitors</code>.\n* Run the Autoruns utility, which checks for this Registry key as a persistence mechanism[[Citation: TechNet Autoruns]]\n\nPlatforms: Windows Server 2003, Windows Server 2008, Windows Server 2012, Windows XP, Windows 7, Windows 8, Windows Server 2003 R2, Windows Server 2008 R2, Windows Server 2012 R2, Windows Vista, Windows 8.1\n\nData Sources: File monitoring, API monitoring, DLL monitoring, Windows Registry, Process monitoring\n\nEffective Permissions: SYSTEM\n\nContributors: Stefan Kanthak",
      "meta": {
        "refs": [
          "https://attack.mitre.org/wiki/Technique/T1013",
          "https://www.defcon.org/images/defcon-22/dc-22-presentations/Bloxham/DEFCON-22-Brady-Bloxham-Windows-API-Abuse-UPDATED.pdf",
          "https://technet.microsoft.com/en-us/sysinternals/bb963902",
          "http://msdn.microsoft.com/en-us/library/dd183341"
        ],
        "uuid": "1f47e2fd-fa77-4f2f-88ee-e85df308f125",
        "x_mitre_platforms": [
          "Windows Server 2003",
          "Windows Server 2008",
          "Windows Server 2012",
          "Windows XP",
          "Windows 7",
          "Windows 8",
          "Windows Server 2003 R2",
          "Windows Server 2008 R2",
          "Windows Server 2012 R2",
          "Windows Vista",
          "Windows 8.1"
        ],
        "x_mitre_data_sources": [
          "File monitoring",
          "API monitoring",
          "DLL monitoring",
          "Windows Registry",
          "Process monitoring"
        ]
      }
    },
    {
      "value": "Software Packing",
      "description": "Software packing is a method of compressing or encrypting an executable. Packing an executable changes the file signature in an attempt to avoid signature-based detection. Most decompression techniques decompress the executable code in memory.\n\nUtilities used to perform software packing are called packers. Example packers are MPRESS and UPX. A more comprehensive list of known packers is available,[[Citation: Wikipedia Exe Compression]] but adversaries may create their own packing techniques that do not leave the same artifacts as well-known packers to evade defenses.\n\nDetection: Use file scanning to look for known software packers or artifacts of packing techniques. Packing is not a definitive indicator of malicious activity, because legitimate software may use packing techniques to reduce binary size or to protect proprietary code.\n\nPlatforms: Windows Server 2003, Windows Server 2008, Windows Server 2012, Windows XP, Windows 7, Windows 8, Windows Server 2003 R2, Windows Server 2008 R2, Windows Server 2012 R2, Windows Vista, Windows 8.1\n\nData Sources: Binary file metadata",
      "meta": {
        "refs": [
          "https://attack.mitre.org/wiki/Technique/T1045",
          "http://en.wikipedia.org/wiki/Executable%20compression"
        ],
        "uuid": "6ff403bc-93e3-48be-8687-e102fdba8c88",
        "x_mitre_platforms": [
          "Windows Server 2003",
          "Windows Server 2008",
          "Windows Server 2012",
          "Windows XP",
          "Windows 7",
          "Windows 8",
          "Windows Server 2003 R2",
          "Windows Server 2008 R2",
          "Windows Server 2012 R2",
          "Windows Vista",
          "Windows 8.1"
        ],
        "x_mitre_data_sources": [
          "Binary file metadata"
        ]
      }
    },
    {
      "value": "Application Window Discovery",
      "description": "Adversaries may attempt to get a listing of open application windows. Window listings could convey information about how the system is used or give context to information collected by a keylogger.\n\nDetection: System and network discovery techniques normally occur throughout an operation as an adversary learns the environment. Data and events should not be viewed in isolation, but as part of a chain of behavior that could lead to other activities based on the information obtained.\n\nMonitor processes and command-line arguments for actions that could be taken to gather system and network information. Remote access tools with built-in features may interact directly with the Windows API to gather information. Information may also be acquired through Windows system management tools such as Windows Management Instrumentation and PowerShell.\n\nPlatforms: Windows Server 2003, Windows Server 2008, Windows Server 2012, Windows XP, Windows 7, Windows 8, Windows Server 2003 R2, Windows Server 2008 R2, Windows Server 2012 R2, Windows Vista, Windows 8.1\n\nData Sources: API monitoring, Process command-line parameters, Process monitoring",
      "meta": {
        "refs": [
          "https://attack.mitre.org/wiki/Technique/T1010"
        ],
        "uuid": "4ae4f953-fe58-4cc8-a327-33257e30a830",
        "x_mitre_platforms": [
          "Windows Server 2003",
          "Windows Server 2008",
          "Windows Server 2012",
          "Windows XP",
          "Windows 7",
          "Windows 8",
          "Windows Server 2003 R2",
          "Windows Server 2008 R2",
          "Windows Server 2012 R2",
          "Windows Vista",
          "Windows 8.1"
        ],
        "x_mitre_data_sources": [
          "API monitoring",
          "Process command-line parameters",
          "Process monitoring"
        ]
      }
    },
    {
      "value": "Hypervisor",
      "description": "A type-1 hypervisor is a software layer that sits between the guest operating systems and system's hardware.Rootkit functionality to hide its existence from the guest operating system.[[Citation: Myers 2007]] A malicious hypervisor of this nature could be used to persist on systems through interruption.\n\nDetection: Type-1 hypervisors may be detected by performing timing analysis. Hypervisors emulate certain CPU instructions that would normally be executed by the hardware. If an instruction takes orders of magnitude longer to execute than normal on a system that should not contain a hypervisor, one may be present.[[Citation: virtualization.info 2006]]\n\nPlatforms: Windows Server 2003, Windows Server 2008, Windows Server 2012, Windows XP, Windows 7, Windows 8, Windows Server 2003 R2, Windows Server 2008 R2, Windows Server 2012 R2, Windows Vista, Windows 8.1\n\nData Sources: System calls",
      "meta": {
        "refs": [
          "https://attack.mitre.org/wiki/Technique/T1062",
          "http://citeseerx.ist.psu.edu/viewdoc/download?doi=10.1.1.90.8832&rep=rep1&type=pdf",
          "http://en.wikipedia.org/wiki/Xen",
          "https://en.wikipedia.org/wiki/Hypervisor",
          "http://virtualization.info/en/news/2006/08/debunking-blue-pill-myth.html"
        ],
        "uuid": "4be89c7c-ace6-4876-9377-c8d54cef3d63",
        "x_mitre_platforms": [
          "Windows Server 2003",
          "Windows Server 2008",
          "Windows Server 2012",
          "Windows XP",
          "Windows 7",
          "Windows 8",
          "Windows Server 2003 R2",
          "Windows Server 2008 R2",
          "Windows Server 2012 R2",
          "Windows Vista",
          "Windows 8.1"
        ],
        "x_mitre_data_sources": [
          "System calls"
        ]
      }
    },
    {
      "value": "Credential Dumping",
      "description": "Credential dumping is the process of obtaining account login and password information from the operating system and software. Credentials can be used to perform Windows Credential Editor, Mimikatz, and gsecdump. These tools are in use by both professional security testers and adversaries.\n\nPlaintext passwords can be obtained using tools such as Mimikatz to extract passwords stored by the Local Security Authority (LSA). If smart cards are used to authenticate to a domain using a personal identification number (PIN), then that PIN is also cached as a result and may be dumped.Mimikatz access the LSA Subsystem Service (LSASS) process by opening the process, locating the LSA secrets key, and decrypting the sections in memory where credential details are stored. Credential dumpers may also use methods for reflective DLL Injection to reduce potential indicators of malicious activity.\n\nNTLM hash dumpers open the Security Accounts Manager (SAM) on the local file system (%SystemRoot%/system32/config/SAM) or create a dump of the Registry SAM key to access stored account password hashes. Some hash dumpers will open the local file system as a device and parse to the SAM table to avoid file access defenses. Others will make an in-memory copy of the SAM table before reading hashes. Detection of compromised Legitimate Credentials in-use by adversaries may help as well. \n\nOn Windows 8.1 and Windows Server 2012 R2, monitor Windows Logs for LSASS.exe creation to verify that LSASS started as a protected process.\n\nMonitor processes and command-line arguments for program execution that may be indicative of credential dumping. Remote access tools may contain built-in features or incorporate existing tools like Mimikatz. PowerShell scripts also exist that contain credential dumping functionality, such as PowerSploit's Invoke-Mimikatz module,[[Citation: Powersploit]] which may require additional logging features to be configured in the operating system to collect necessary information for analysis.\n\nPlatforms: Windows Server 2003, Windows Server 2008, Windows Server 2012, Windows XP, Windows 7, Windows 8, Windows Server 2003 R2, Windows Server 2008 R2, Windows Server 2012 R2, Windows Vista, Windows 8.1\n\nData Sources: API monitoring, Process command-line parameters, Process monitoring, PowerShell logs",
      "meta": {
        "refs": [
          "https://attack.mitre.org/wiki/Technique/T1003",
          "https://github.com/gentilkiwi/mimikatz/wiki/module-~-sekurlsa",
          "https://github.com/mattifestation/PowerSploit"
        ],
        "uuid": "0a3ead4e-6d47-4ccb-854c-a6a4f9d96b22",
        "x_mitre_platforms": [
          "Windows Server 2003",
          "Windows Server 2008",
          "Windows Server 2012",
          "Windows XP",
          "Windows 7",
          "Windows 8",
          "Windows Server 2003 R2",
          "Windows Server 2008 R2",
          "Windows Server 2012 R2",
          "Windows Vista",
          "Windows 8.1"
        ],
        "x_mitre_data_sources": [
          "API monitoring",
          "Process command-line parameters",
          "Process monitoring",
          "PowerShell logs"
        ]
      }
    },
    {
      "value": "Web Service",
      "description": "Adversaries may use an existing, legitimate external Web service as a means for relaying commands to a compromised system.\n\nPopular websites and social media can act as a mechanism for command and control and give a significant amount of cover due to the likelihood that hosts within a network are already communicating with them prior to a compromise. Using common services, such as those offered by Google or Twitter, makes it easier for adversaries to hide in expected noise. Web service providers commonly use SSL/TLS encryption, giving adversaries an added level of protection.\n\nDetection: Host data that can relate unknown or suspicious process activity using a network connection is important to supplement any existing indicators of compromise based on malware command and control signatures and infrastructure or the presence of strong encryption. Analyze network data for uncommon data flows (e.g., a client sending significantly more data than it receives from a server). Analyze packet contents to detect communications that do not follow the expected protocol behavior for the port that is being used.[[Citation: University of Birmingham C2]]\n\nPlatforms: Windows Server 2003, Windows Server 2008, Windows Server 2012, Windows XP, Windows 7, Windows 8, Windows Server 2003 R2, Windows Server 2008 R2, Windows Server 2012 R2, Windows Vista, Windows 8.1\n\nData Sources: Host network interface, Netflow/Enclave netflow, Network protocol analysis, Packet capture",
      "meta": {
        "refs": [
          "https://attack.mitre.org/wiki/Technique/T1102",
          "https://arxiv.org/ftp/arxiv/papers/1408/1408.1136.pdf"
        ],
        "uuid": "830c9528-df21-472c-8c14-a036bf17d665",
        "x_mitre_platforms": [
          "Windows Server 2003",
          "Windows Server 2008",
          "Windows Server 2012",
          "Windows XP",
          "Windows 7",
          "Windows 8",
          "Windows Server 2003 R2",
          "Windows Server 2008 R2",
          "Windows Server 2012 R2",
          "Windows Vista",
          "Windows 8.1"
        ],
        "x_mitre_data_sources": [
          "Host network interface",
          "Netflow/Enclave netflow",
          "Network protocol analysis",
          "Packet capture"
        ]
      }
    },
    {
      "value": "Query Registry",
      "description": "Adversaries may interact with the Windows Registry to gather information about the system, configuration, and installed software.\n\nThe Registry contains a significant amount of information about the operating system, configuration, software, and security.Reg or through running malware that may interact with the Registry through an API. Command-line invocation of utilities used to query the Registry may be detected through process and command-line monitoring. Remote access tools with built-in features may interact directly with the Windows API to gather information. Information may also be acquired through Windows system management tools such as Windows Management Instrumentation and PowerShell.\n\nPlatforms: Windows Server 2003, Windows Server 2008, Windows Server 2012, Windows XP, Windows 7, Windows 8, Windows Server 2003 R2, Windows Server 2008 R2, Windows Server 2012 R2, Windows Vista, Windows 8.1\n\nData Sources: Windows Registry, Process monitoring, Process command-line parameters",
      "meta": {
        "refs": [
          "https://attack.mitre.org/wiki/Technique/T1012",
          "https://en.wikipedia.org/wiki/Windows%20Registry"
        ],
        "uuid": "c32f7008-9fea-41f7-8366-5eb9b74bd896",
        "x_mitre_platforms": [
          "Windows Server 2003",
          "Windows Server 2008",
          "Windows Server 2012",
          "Windows XP",
          "Windows 7",
          "Windows 8",
          "Windows Server 2003 R2",
          "Windows Server 2008 R2",
          "Windows Server 2012 R2",
          "Windows Vista",
          "Windows 8.1"
        ],
        "x_mitre_data_sources": [
          "Windows Registry",
          "Process monitoring",
          "Process command-line parameters"
        ]
      }
    },
    {
      "value": "Third-party Software",
      "description": "Third-party applications and software deployment systems may be in use in the network environment for administration purposes (e.g., SCCM, VNC, HBSS, Altiris, etc.). If an adversary gains access to these systems, then they may be able to execute code.\n\nAdversaries may gain access to and use third-party application deployment systems installed within an enterprise network. Access to a network-wide or enterprise-wide software deployment system enables an adversary to have remote code execution on all systems that are connected to such a system. The access may be used to laterally move to systems, gather information, or cause a specific effect, such as wiping the hard drives on all endpoints.\n\nThe permissions required for this action vary by system configuration; local credentials may be sufficient with direct access to the deployment server, or specific domain credentials may be required. However, the system may require an administrative account to log in or to perform software deployment.\n\nDetection: Detection methods will vary depending on the type of third-party software or system and how it is typically used. \n\nThe same investigation process can be applied here as with other potentially malicious activities where the distribution vector is initially unknown but the resulting activity follows a discernible pattern. Analyze the process execution trees, historical activities from the third-party application (such as what types of files are usually pushed), and the resulting activities or events from the file/binary/script pushed to systems. \n\nOften these third-party applications will have logs of their own that can be collected and correlated with other data from the environment. Audit software deployment logs and look for suspicious or unauthorized activity. A system not typically used to push software to clients that suddenly is used for such a task outside of a known admin function may be suspicious.\n\nPerform application deployment at regular times so that irregular deployment activity stands out. Monitor process activity that does not correlate to known good software. Monitor account login activity on the deployment system.\n\nPlatforms: Windows Server 2003, Windows Server 2008, Windows Server 2012, Windows XP, Windows 7, Windows 8, Windows Server 2003 R2, Windows Server 2008 R2, Windows Server 2012 R2, Windows Vista, Windows 8.1\n\nData Sources: File monitoring, Third-party application logs, Binary file metadata, Windows Registry, Process monitoring, Process use of network",
      "meta": {
        "refs": [
          "https://attack.mitre.org/wiki/Technique/T1072"
        ],
        "uuid": "92a78814-b191-47ca-909c-1ccfe3777414",
        "x_mitre_platforms": [
          "Windows Server 2003",
          "Windows Server 2008",
          "Windows Server 2012",
          "Windows XP",
          "Windows 7",
          "Windows 8",
          "Windows Server 2003 R2",
          "Windows Server 2008 R2",
          "Windows Server 2012 R2",
          "Windows Vista",
          "Windows 8.1"
        ],
        "x_mitre_data_sources": [
          "File monitoring",
          "Third-party application logs",
          "Binary file metadata",
          "Windows Registry",
          "Process monitoring",
          "Process use of network"
        ]
      }
    },
    {
      "value": "Remote File Copy",
      "description": "Files may be copied from one system to another to stage adversary tools or other files over the course of an operation. Files may be copied from an external adversary-controlled system through the FTP. \n\nAdversaries may also copy files laterally between internal victim systems to support Windows Admin Shares or Remote Desktop Protocol.\n\nDetection: Monitor for file creation and files transferred within a network over SMB. Unusual processes with external network connections creating files on-system may be suspicious. Use of utilities, such as FTP, that does not normally occur may also be suspicious.\n\nAnalyze network data for uncommon data flows (e.g., a client sending significantly more data than it receives from a server). Processes utilizing the network that do not normally have network communication or have never been seen before are suspicious. Analyze packet contents to detect communications that do not follow the expected protocol behavior for the port that is being used.[[Citation: University of Birmingham C2]]\n\nPlatforms: Windows Server 2003, Windows Server 2008, Windows Server 2012, Windows XP, Windows 7, Windows 8, Windows Server 2003 R2, Windows Server 2008 R2, Windows Server 2012 R2, Windows Vista, Windows 8.1\n\nData Sources: File monitoring, Packet capture, Process use of network, Netflow/Enclave netflow, Network protocol analysis, Process monitoring",
      "meta": {
        "refs": [
          "https://attack.mitre.org/wiki/Technique/T1105",
          "https://arxiv.org/ftp/arxiv/papers/1408/1408.1136.pdf"
        ],
        "uuid": "e6919abc-99f9-4c6c-95a5-14761e7b2add",
        "x_mitre_platforms": [
          "Windows Server 2003",
          "Windows Server 2008",
          "Windows Server 2012",
          "Windows XP",
          "Windows 7",
          "Windows 8",
          "Windows Server 2003 R2",
          "Windows Server 2008 R2",
          "Windows Server 2012 R2",
          "Windows Vista",
          "Windows 8.1"
        ],
        "x_mitre_data_sources": [
          "File monitoring",
          "Packet capture",
          "Process use of network",
          "Netflow/Enclave netflow",
          "Network protocol analysis",
          "Process monitoring"
        ]
      }
    },
    {
      "value": "File System Logical Offsets",
      "description": "Windows allows programs to have direct access to logical volumes. Programs with direct access may read and write files directly from the drive by analyzing file system data structures. This technique bypasses Windows file access controls as well as file system monitoring tools.PowerShell, additional logging of PowerShell scripts is recommended.\n\nPlatforms: Windows Server 2003, Windows Server 2008, Windows Server 2012, Windows XP, Windows 7, Windows 8, Windows Server 2003 R2, Windows Server 2008 R2, Windows Server 2012 R2, Windows Vista, Windows 8.1\n\nData Sources: API monitoring",
      "meta": {
        "refs": [
          "https://attack.mitre.org/wiki/Technique/T1006",
          "https://github.com/PowerShellMafia/PowerSploit/blob/master/Exfiltration/Invoke-NinjaCopy.ps1",
          "http://www.codeproject.com/Articles/32169/FDump-Dumping-File-Sectors-Directly-from-Disk-usin"
        ],
        "uuid": "0c8ab3eb-df48-4b9c-ace7-beacaac81cc5",
        "x_mitre_platforms": [
          "Windows Server 2003",
          "Windows Server 2008",
          "Windows Server 2012",
          "Windows XP",
          "Windows 7",
          "Windows 8",
          "Windows Server 2003 R2",
          "Windows Server 2008 R2",
          "Windows Server 2012 R2",
          "Windows Vista",
          "Windows 8.1"
        ],
        "x_mitre_data_sources": [
          "API monitoring"
        ]
      }
    },
    {
      "value": "Shared Webroot",
      "description": "Adversaries may add malicious content to an internally accessible website through an open network file share that contains the website's webroot or Web content directory and then browse to that content with a Web browser to cause the server to execute the malicious content. The malicious content will typically run under the context and permissions of the Web server process, often resulting in local system or administrative privileges, depending on how the Web server is configured.\n\nThis mechanism of shared access and remote execution could be used for lateral movement to the system running the Web server. For example, a Web server running PHP with an open network share could allow an adversary to upload a remote access tool and PHP script to execute the RAT on the system running the Web server when a specific page is visited.\n\nDetection: Use file and process monitoring to detect when files are written to a Web server by a process that is not the normal Web server process or when files are written outside of normal administrative time periods. Use process monitoring to identify normal processes that run on the Web server and detect processes that are not typically executed.\n\nPlatforms: Windows Server 2003, Windows Server 2008, Windows Server 2012, Windows XP, Windows 7, Windows 8, Windows Server 2003 R2, Windows Server 2008 R2, Windows Server 2012 R2, Windows Vista, Windows 8.1\n\nData Sources: File monitoring, Process monitoring",
      "meta": {
        "refs": [
          "https://attack.mitre.org/wiki/Technique/T1051"
        ],
        "uuid": "804c042c-cfe6-449e-bc1a-ba0a998a70db",
        "x_mitre_platforms": [
          "Windows Server 2003",
          "Windows Server 2008",
          "Windows Server 2012",
          "Windows XP",
          "Windows 7",
          "Windows 8",
          "Windows Server 2003 R2",
          "Windows Server 2008 R2",
          "Windows Server 2012 R2",
          "Windows Vista",
          "Windows 8.1"
        ],
        "x_mitre_data_sources": [
          "File monitoring",
          "Process monitoring"
        ]
      }
    },
    {
      "value": "Indicator Blocking",
      "description": "An adversary may attempt to block indicators or events from leaving the host machine. In the case of network-based reporting of indicators, an adversary may block traffic associated with reporting to prevent central analysis. This may be accomplished by many means, such as stopping a local process or creating a host-based firewall rule to block traffic to a specific server.\n\nDetection: Detect lack of reported activity from a host sensor. Different methods of blocking may cause different disruptions in reporting. Systems may suddenly stop reporting all data or only certain kinds of data.\n\nDepending on the types of host information collected, an analyst may be able to detect the event that triggered a process to stop or connection to be blocked.\n\nPlatforms: Windows Server 2003, Windows Server 2008, Windows Server 2012, Windows XP, Windows 7, Windows 8, Windows Server 2003 R2, Windows Server 2008 R2, Windows Server 2012 R2, Windows Vista, Windows 8.1\n\nData Sources: Sensor health and status, Process command-line parameters, Process monitoring",
      "meta": {
        "refs": [
          "https://attack.mitre.org/wiki/Technique/T1054"
        ],
        "uuid": "6a5848a8-6201-4a2c-8a6a-ca5af8c6f3df",
        "x_mitre_platforms": [
          "Windows Server 2003",
          "Windows Server 2008",
          "Windows Server 2012",
          "Windows XP",
          "Windows 7",
          "Windows 8",
          "Windows Server 2003 R2",
          "Windows Server 2008 R2",
          "Windows Server 2012 R2",
          "Windows Vista",
          "Windows 8.1"
        ],
        "x_mitre_data_sources": [
          "Sensor health and status",
          "Process command-line parameters",
          "Process monitoring"
        ]
      }
    },
    {
      "value": "Exfiltration Over Physical Medium",
      "description": "In certain circumstances, such as an air-gapped network compromise, exfiltration could occur via a physical medium or device introduced by a user. Such media could be an external hard drive, USB drive, cellular phone, MP3 player, or other removable storage and processing device. The physical medium or device could be used as the final exfiltration point or to hop between otherwise disconnected systems.\n\nDetection: Monitor file access on removable media. Detect processes that execute when removable media are mounted.\n\nPlatforms: Windows Server 2003, Windows Server 2008, Windows Server 2012, Windows XP, Windows 7, Windows 8, Windows Server 2003 R2, Windows Server 2008 R2, Windows Server 2012 R2, Windows Vista, Windows 8.1\n\nData Sources: Data loss prevention, File monitoring",
      "meta": {
        "refs": [
          "https://attack.mitre.org/wiki/Technique/T1052"
        ],
        "uuid": "e6415f09-df0e-48de-9aba-928c902b7549",
        "x_mitre_platforms": [
          "Windows Server 2003",
          "Windows Server 2008",
          "Windows Server 2012",
          "Windows XP",
          "Windows 7",
          "Windows 8",
          "Windows Server 2003 R2",
          "Windows Server 2008 R2",
          "Windows Server 2012 R2",
          "Windows Vista",
          "Windows 8.1"
        ],
        "x_mitre_data_sources": [
          "Data loss prevention",
          "File monitoring"
        ]
      }
    },
    {
      "value": "System Time Discovery",
      "description": "The system time is set and stored by the Windows Time Service within a domain to maintain time synchronization between systems and services in an enterprise network.Net on Windows by performing <code>net time \\\\hostname</code> to gather the system time on a remote system. The victim's time zone may also be inferred from the current system time or gathered by using <code>w32tm /tz</code>.Scheduled Task[[Citation: RSA EU12 They're Inside]], or to discover locality information based on time zone to assist in victim targeting.\n\nDetection: Command-line interface monitoring may be useful to detect instances of net.exe or other command-line utilities being used to gather system time or time zone. Methods of detecting API use for gathering this information are likely less useful due to how often they may be used by legitimate software.\n\nPlatforms: Windows Server 2003, Windows Server 2008, Windows Server 2012, Windows XP, Windows 7, Windows 8, Windows Server 2003 R2, Windows Server 2008 R2, Windows Server 2012 R2, Windows Vista, Windows 8.1\n\nData Sources: Process monitoring, Process command-line parameters, API monitoring",
      "meta": {
        "refs": [
          "https://attack.mitre.org/wiki/Technique/T1124",
          "https://technet.microsoft.com/windows-server-docs/identity/ad-ds/get-started/windows-time-service/windows-time-service-tools-and-settings",
          "https://www.rsaconference.com/writable/presentations/file%20upload/ht-209%20rivner%20schwartz.pdf",
          "https://msdn.microsoft.com/ms724961.aspx"
        ],
        "uuid": "f3c544dc-673c-4ef3-accb-53229f1ae077",
        "x_mitre_platforms": [
          "Windows Server 2003",
          "Windows Server 2008",
          "Windows Server 2012",
          "Windows XP",
          "Windows 7",
          "Windows 8",
          "Windows Server 2003 R2",
          "Windows Server 2008 R2",
          "Windows Server 2012 R2",
          "Windows Vista",
          "Windows 8.1"
        ],
        "x_mitre_data_sources": [
          "Process monitoring",
          "Process command-line parameters",
          "API monitoring"
        ]
      }
    },
    {
      "value": "Execution through Module Load",
      "description": "The Windows module loader can be instructed to load DLLs from arbitrary local paths and arbitrary Universal Naming Convention (UNC) network paths. This functionality resides in NTDLL.dll and is part of the Windows Native API which is called from functions like CreateProcess(), LoadLibrary(), etc. of the Win32 API.[[Citation: Wikipedia Windows Library Files]]\n\nThe module loader can load DLLs:\n\n*via specification of the (fully-qualified or relative) DLL pathname in the IMPORT directory;\n    \n*via EXPORT forwarded to another DLL, specified with (fully-qualified or relative) pathname (but without extension);\n    \n*via an NTFS junction or symlink program.exe.local with the fully-qualified or relative pathname of a directory containing the DLLs specified in the IMPORT directory or forwarded EXPORTs;\n    \n*via <code><file name=\"filename.extension\" loadFrom=\"fully-qualified or relative pathname\"></code> in an embedded or external \"application manifest\". The file name refers to an entry in the IMPORT directory or a forwarded EXPORT.\n\nAdversaries can use this functionality as a way to execute arbitrary code on a system.\n\nDetection: Monitoring DLL module loads may generate a significant amount of data and may not be directly useful for defense unless collected under specific circumstances, since benign use of Windows modules load functions are common and may be difficult to distinguish from malicious behavior. Legitimate software will likely only need to load routine, bundled DLL modules or Windows system DLLs such that deviation from known module loads may be suspicious. Limiting DLL module loads to <code>%SystemRoot%</code> and <code>%ProgramFiles%</code> directories will protect against module loads from unsafe paths. \n\nCorrelation of other events with behavior surrounding module loads using API monitoring and suspicious DLLs written to disk will provide additional context to an event that may assist in determining if it is due to malicious behavior.\n\nPlatforms: Windows Server 2003, Windows Server 2008, Windows Server 2012, Windows XP, Windows 7, Windows 8, Windows Server 2003 R2, Windows Server 2008 R2, Windows Server 2012 R2, Windows Vista, Windows 8.1\n\nData Sources: Process Monitoring, API monitoring, File monitoring, DLL monitoring\n\nContributors: Stefan Kanthak",
      "meta": {
        "refs": [
          "https://attack.mitre.org/wiki/Technique/T1129",
          "https://en.wikipedia.org/wiki/Microsoft%20Windows%20library%20files"
        ],
        "uuid": "0a5231ec-41af-4a35-83d0-6bdf11f28c65",
        "x_mitre_platforms": [
          "Windows Server 2003",
          "Windows Server 2008",
          "Windows Server 2012",
          "Windows XP",
          "Windows 7",
          "Windows 8",
          "Windows Server 2003 R2",
          "Windows Server 2008 R2",
          "Windows Server 2012 R2",
          "Windows Vista",
          "Windows 8.1"
        ],
        "x_mitre_data_sources": [
          "Process Monitoring",
          "API monitoring",
          "File monitoring",
          "DLL monitoring"
        ]
      }
    },
    {
      "value": "Install Root Certificate",
      "description": "Root certificates are used in public key cryptography to identify a root certificate authority (CA). When a root certificate is installed, the system or application will trust certificates in the root's chain of trust that have been signed by the root certificate.[[Citation: Wikipedia Root Certificate]] Certificates are commonly used for establishing secure TLS/SSL communications within a web browser. When a user attempts to browse a website that presents a certificate that is not trusted an error message will be displayed to warn the user of the security risk. Depending on the security settings, the browser may not allow the user to establish a connection to the website.\n\nInstallation of a root certificate on a compromised system would give an adversary a way to degrade the security of that system. Adversaries have used this technique to avoid security warnings prompting users when compromised systems connect over HTTPS to adversary controlled web servers that spoof legitimate websites in order to collect login credentials.[[Citation: Operation Emmental]]\n\nAtypical root certificates have also been pre-installed on systems by the manufacturer or in the software supply chain and were used in conjunction with malware/adware to provide a man-in-the-middle capability for intercepting information transmitted over secure TLS/SSL communications.[[Citation: Kaspersky Superfish]]\n\nDetection: A system's root certificates are unlikely to change frequently. Monitor new certificates installed on a system that could be due to malicious activity. Check pre-installed certificates on new systems to ensure unnecessary or suspicious certificates are not present.\n\nPlatforms: Windows Server 2003, Windows Server 2008, Windows Server 2012, Windows XP, Windows 7, Windows 8, Windows Server 2003 R2, Windows Server 2008 R2, Windows Server 2012 R2, Windows Vista, Windows 8.1, Linux\n\nData Sources: SSL/TLS inspection, Digital Certificate Logs\n\nContributors: Itzik Kotler, SafeBreach",
      "meta": {
        "refs": [
          "https://attack.mitre.org/wiki/Technique/T1130",
          "https://usblog.kaspersky.com/superfish-adware-preinstalled-on-lenovo-laptops/5161/",
          "https://en.wikipedia.org/wiki/Root%20certificate",
          "http://www.trendmicro.com/cloud-content/us/pdfs/security-intelligence/white-papers/wp-finding-holes-operation-emmental.pdf"
        ],
        "uuid": "d519cfd5-f3a8-43a9-a846-ed0bb40672b1",
        "x_mitre_platforms": [
          "Windows Server 2003",
          "Windows Server 2008",
          "Windows Server 2012",
          "Windows XP",
          "Windows 7",
          "Windows 8",
          "Windows Server 2003 R2",
          "Windows Server 2008 R2",
          "Windows Server 2012 R2",
          "Windows Vista",
          "Windows 8.1",
          "Linux"
        ],
        "x_mitre_data_sources": [
          "SSL/TLS inspection",
          "Digital Certificate Logs"
        ]
      }
    },
    {
      "value": "Data Transfer Size Limits",
      "description": "An adversary may exfiltrate data in fixed size chunks instead of whole files or limit packet sizes below certain thresholds. This approach may be used to avoid triggering network data transfer threshold alerts.\n\nDetection: Analyze network data for uncommon data flows (e.g., a client sending significantly more data than it receives from a server). If a process maintains a long connection during which it consistently sends fixed size data packets or a process opens connections and sends fixed sized data packets at regular intervals, it may be performing an aggregate data transfer. Processes utilizing the network that do not normally have network communication or have never been seen before are suspicious. Analyze packet contents to detect communications that do not follow the expected protocol behavior for the port that is being used.[[Citation: University of Birmingham C2]]\n\nPlatforms: Windows Server 2003, Windows Server 2008, Windows Server 2012, Windows XP, Windows 7, Windows 8, Windows Server 2003 R2, Windows Server 2008 R2, Windows Server 2012 R2, Windows Vista, Windows 8.1\n\nData Sources: Packet capture, Netflow/Enclave netflow, Process use of network, Process monitoring",
      "meta": {
        "refs": [
          "https://attack.mitre.org/wiki/Technique/T1030",
          "https://arxiv.org/ftp/arxiv/papers/1408/1408.1136.pdf"
        ],
        "uuid": "c3888c54-775d-4b2f-b759-75a2ececcbfd",
        "x_mitre_platforms": [
          "Windows Server 2003",
          "Windows Server 2008",
          "Windows Server 2012",
          "Windows XP",
          "Windows 7",
          "Windows 8",
          "Windows Server 2003 R2",
          "Windows Server 2008 R2",
          "Windows Server 2012 R2",
          "Windows Vista",
          "Windows 8.1"
        ],
        "x_mitre_data_sources": [
          "Packet capture",
          "Netflow/Enclave netflow",
          "Process use of network",
          "Process monitoring"
        ]
      }
    }
  ],
  "version": 2,
  "uuid": "dcb864dc-775f-11e7-9fbb-1f41b4996683",
  "authors": [
    "MITRE"
  ]
}
